
AUTOMATIZA_SIMPLES.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004820  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000021c  080048dc  080048dc  000148dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004af8  08004af8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004af8  08004af8  00014af8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b00  08004b00  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b00  08004b00  00014b00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b04  08004b04  00014b04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004b08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e0  2000000c  08004b14  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  08004b14  000200ec  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c7a5  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002162  00000000  00000000  0002c81c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000928  00000000  00000000  0002e980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000708  00000000  00000000  0002f2a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001753d  00000000  00000000  0002f9b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cf26  00000000  00000000  00046eed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00096065  00000000  00000000  00053e13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001f64  00000000  00000000  000e9e78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000ebddc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080048c4 	.word	0x080048c4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	080048c4 	.word	0x080048c4

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	d434      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000466:	469b      	mov	fp, r3
 8000468:	4653      	mov	r3, sl
 800046a:	465a      	mov	r2, fp
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83b      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e079      	b.n	8000576 <__udivmoddi4+0x146>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e076      	b.n	800057c <__udivmoddi4+0x14c>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e029      	b.n	80004fc <__udivmoddi4+0xcc>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	469b      	mov	fp, r3
 80004d4:	2320      	movs	r3, #32
 80004d6:	1a9b      	subs	r3, r3, r2
 80004d8:	4652      	mov	r2, sl
 80004da:	40da      	lsrs	r2, r3
 80004dc:	4641      	mov	r1, r8
 80004de:	0013      	movs	r3, r2
 80004e0:	464a      	mov	r2, r9
 80004e2:	408a      	lsls	r2, r1
 80004e4:	0017      	movs	r7, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	431f      	orrs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d9c3      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f4:	2200      	movs	r2, #0
 80004f6:	2300      	movs	r3, #0
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	4643      	mov	r3, r8
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0d8      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000502:	07fb      	lsls	r3, r7, #31
 8000504:	0872      	lsrs	r2, r6, #1
 8000506:	431a      	orrs	r2, r3
 8000508:	4646      	mov	r6, r8
 800050a:	087b      	lsrs	r3, r7, #1
 800050c:	e00e      	b.n	800052c <__udivmoddi4+0xfc>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d101      	bne.n	8000516 <__udivmoddi4+0xe6>
 8000512:	42a2      	cmp	r2, r4
 8000514:	d80c      	bhi.n	8000530 <__udivmoddi4+0x100>
 8000516:	1aa4      	subs	r4, r4, r2
 8000518:	419d      	sbcs	r5, r3
 800051a:	2001      	movs	r0, #1
 800051c:	1924      	adds	r4, r4, r4
 800051e:	416d      	adcs	r5, r5
 8000520:	2100      	movs	r1, #0
 8000522:	3e01      	subs	r6, #1
 8000524:	1824      	adds	r4, r4, r0
 8000526:	414d      	adcs	r5, r1
 8000528:	2e00      	cmp	r6, #0
 800052a:	d006      	beq.n	800053a <__udivmoddi4+0x10a>
 800052c:	42ab      	cmp	r3, r5
 800052e:	d9ee      	bls.n	800050e <__udivmoddi4+0xde>
 8000530:	3e01      	subs	r6, #1
 8000532:	1924      	adds	r4, r4, r4
 8000534:	416d      	adcs	r5, r5
 8000536:	2e00      	cmp	r6, #0
 8000538:	d1f8      	bne.n	800052c <__udivmoddi4+0xfc>
 800053a:	9800      	ldr	r0, [sp, #0]
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	465b      	mov	r3, fp
 8000540:	1900      	adds	r0, r0, r4
 8000542:	4169      	adcs	r1, r5
 8000544:	2b00      	cmp	r3, #0
 8000546:	db24      	blt.n	8000592 <__udivmoddi4+0x162>
 8000548:	002b      	movs	r3, r5
 800054a:	465a      	mov	r2, fp
 800054c:	4644      	mov	r4, r8
 800054e:	40d3      	lsrs	r3, r2
 8000550:	002a      	movs	r2, r5
 8000552:	40e2      	lsrs	r2, r4
 8000554:	001c      	movs	r4, r3
 8000556:	465b      	mov	r3, fp
 8000558:	0015      	movs	r5, r2
 800055a:	2b00      	cmp	r3, #0
 800055c:	db2a      	blt.n	80005b4 <__udivmoddi4+0x184>
 800055e:	0026      	movs	r6, r4
 8000560:	409e      	lsls	r6, r3
 8000562:	0033      	movs	r3, r6
 8000564:	0026      	movs	r6, r4
 8000566:	4647      	mov	r7, r8
 8000568:	40be      	lsls	r6, r7
 800056a:	0032      	movs	r2, r6
 800056c:	1a80      	subs	r0, r0, r2
 800056e:	4199      	sbcs	r1, r3
 8000570:	9000      	str	r0, [sp, #0]
 8000572:	9101      	str	r1, [sp, #4]
 8000574:	e79e      	b.n	80004b4 <__udivmoddi4+0x84>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d8bc      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800057a:	e782      	b.n	8000482 <__udivmoddi4+0x52>
 800057c:	4642      	mov	r2, r8
 800057e:	2320      	movs	r3, #32
 8000580:	2100      	movs	r1, #0
 8000582:	1a9b      	subs	r3, r3, r2
 8000584:	2200      	movs	r2, #0
 8000586:	9100      	str	r1, [sp, #0]
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	2201      	movs	r2, #1
 800058c:	40da      	lsrs	r2, r3
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	e785      	b.n	800049e <__udivmoddi4+0x6e>
 8000592:	4642      	mov	r2, r8
 8000594:	2320      	movs	r3, #32
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	002a      	movs	r2, r5
 800059a:	4646      	mov	r6, r8
 800059c:	409a      	lsls	r2, r3
 800059e:	0023      	movs	r3, r4
 80005a0:	40f3      	lsrs	r3, r6
 80005a2:	4644      	mov	r4, r8
 80005a4:	4313      	orrs	r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	40e2      	lsrs	r2, r4
 80005aa:	001c      	movs	r4, r3
 80005ac:	465b      	mov	r3, fp
 80005ae:	0015      	movs	r5, r2
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	dad4      	bge.n	800055e <__udivmoddi4+0x12e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	002f      	movs	r7, r5
 80005b8:	2320      	movs	r3, #32
 80005ba:	0026      	movs	r6, r4
 80005bc:	4097      	lsls	r7, r2
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	40de      	lsrs	r6, r3
 80005c2:	003b      	movs	r3, r7
 80005c4:	4333      	orrs	r3, r6
 80005c6:	e7cd      	b.n	8000564 <__udivmoddi4+0x134>

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			; (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	; (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000620:	f000 fb9a 	bl	8000d58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000624:	f000 f810 	bl	8000648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000628:	f000 f8de 	bl	80007e8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800062c:	f000 f88e 	bl	800074c <MX_USART2_UART_Init>
  MX_IWDG_Init();
 8000630:	f000 f86c 	bl	800070c <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
//  HAL_UART_Init(&huart2);
  loadControlInitialize();
 8000634:	f000 fa5e 	bl	8000af4 <loadControlInitialize>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_IWDG_Refresh(&hiwdg);
 8000638:	4b02      	ldr	r3, [pc, #8]	; (8000644 <main+0x28>)
 800063a:	0018      	movs	r0, r3
 800063c:	f000 fff4 	bl	8001628 <HAL_IWDG_Refresh>
 8000640:	e7fa      	b.n	8000638 <main+0x1c>
 8000642:	46c0      	nop			; (mov r8, r8)
 8000644:	20000028 	.word	0x20000028

08000648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000648:	b590      	push	{r4, r7, lr}
 800064a:	b093      	sub	sp, #76	; 0x4c
 800064c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064e:	2410      	movs	r4, #16
 8000650:	193b      	adds	r3, r7, r4
 8000652:	0018      	movs	r0, r3
 8000654:	2338      	movs	r3, #56	; 0x38
 8000656:	001a      	movs	r2, r3
 8000658:	2100      	movs	r1, #0
 800065a:	f004 f8e3 	bl	8004824 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065e:	003b      	movs	r3, r7
 8000660:	0018      	movs	r0, r3
 8000662:	2310      	movs	r3, #16
 8000664:	001a      	movs	r2, r3
 8000666:	2100      	movs	r1, #0
 8000668:	f004 f8dc 	bl	8004824 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800066c:	2380      	movs	r3, #128	; 0x80
 800066e:	009b      	lsls	r3, r3, #2
 8000670:	0018      	movs	r0, r3
 8000672:	f000 ffe9 	bl	8001648 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000676:	193b      	adds	r3, r7, r4
 8000678:	220a      	movs	r2, #10
 800067a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800067c:	193b      	adds	r3, r7, r4
 800067e:	2280      	movs	r2, #128	; 0x80
 8000680:	0052      	lsls	r2, r2, #1
 8000682:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000684:	0021      	movs	r1, r4
 8000686:	187b      	adds	r3, r7, r1
 8000688:	2200      	movs	r2, #0
 800068a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800068c:	187b      	adds	r3, r7, r1
 800068e:	2240      	movs	r2, #64	; 0x40
 8000690:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000692:	187b      	adds	r3, r7, r1
 8000694:	2201      	movs	r2, #1
 8000696:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000698:	187b      	adds	r3, r7, r1
 800069a:	2202      	movs	r2, #2
 800069c:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800069e:	187b      	adds	r3, r7, r1
 80006a0:	2202      	movs	r2, #2
 80006a2:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80006a4:	187b      	adds	r3, r7, r1
 80006a6:	2200      	movs	r2, #0
 80006a8:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80006aa:	187b      	adds	r3, r7, r1
 80006ac:	2208      	movs	r2, #8
 80006ae:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b0:	187b      	adds	r3, r7, r1
 80006b2:	2280      	movs	r2, #128	; 0x80
 80006b4:	0292      	lsls	r2, r2, #10
 80006b6:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006b8:	187b      	adds	r3, r7, r1
 80006ba:	2280      	movs	r2, #128	; 0x80
 80006bc:	0492      	lsls	r2, r2, #18
 80006be:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006c0:	187b      	adds	r3, r7, r1
 80006c2:	2280      	movs	r2, #128	; 0x80
 80006c4:	0592      	lsls	r2, r2, #22
 80006c6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c8:	187b      	adds	r3, r7, r1
 80006ca:	0018      	movs	r0, r3
 80006cc:	f001 f808 	bl	80016e0 <HAL_RCC_OscConfig>
 80006d0:	1e03      	subs	r3, r0, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80006d4:	f000 f904 	bl	80008e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d8:	003b      	movs	r3, r7
 80006da:	2207      	movs	r2, #7
 80006dc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006de:	003b      	movs	r3, r7
 80006e0:	2202      	movs	r2, #2
 80006e2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e4:	003b      	movs	r3, r7
 80006e6:	2200      	movs	r2, #0
 80006e8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ea:	003b      	movs	r3, r7
 80006ec:	2200      	movs	r2, #0
 80006ee:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006f0:	003b      	movs	r3, r7
 80006f2:	2102      	movs	r1, #2
 80006f4:	0018      	movs	r0, r3
 80006f6:	f001 fb0d 	bl	8001d14 <HAL_RCC_ClockConfig>
 80006fa:	1e03      	subs	r3, r0, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80006fe:	f000 f8ef 	bl	80008e0 <Error_Handler>
  }
}
 8000702:	46c0      	nop			; (mov r8, r8)
 8000704:	46bd      	mov	sp, r7
 8000706:	b013      	add	sp, #76	; 0x4c
 8000708:	bd90      	pop	{r4, r7, pc}
	...

0800070c <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000710:	4b0b      	ldr	r3, [pc, #44]	; (8000740 <MX_IWDG_Init+0x34>)
 8000712:	4a0c      	ldr	r2, [pc, #48]	; (8000744 <MX_IWDG_Init+0x38>)
 8000714:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8000716:	4b0a      	ldr	r3, [pc, #40]	; (8000740 <MX_IWDG_Init+0x34>)
 8000718:	2200      	movs	r2, #0
 800071a:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 800071c:	4b08      	ldr	r3, [pc, #32]	; (8000740 <MX_IWDG_Init+0x34>)
 800071e:	4a0a      	ldr	r2, [pc, #40]	; (8000748 <MX_IWDG_Init+0x3c>)
 8000720:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 8000722:	4b07      	ldr	r3, [pc, #28]	; (8000740 <MX_IWDG_Init+0x34>)
 8000724:	4a08      	ldr	r2, [pc, #32]	; (8000748 <MX_IWDG_Init+0x3c>)
 8000726:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000728:	4b05      	ldr	r3, [pc, #20]	; (8000740 <MX_IWDG_Init+0x34>)
 800072a:	0018      	movs	r0, r3
 800072c:	f000 ff2a 	bl	8001584 <HAL_IWDG_Init>
 8000730:	1e03      	subs	r3, r0, #0
 8000732:	d001      	beq.n	8000738 <MX_IWDG_Init+0x2c>
  {
    Error_Handler();
 8000734:	f000 f8d4 	bl	80008e0 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000738:	46c0      	nop			; (mov r8, r8)
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	46c0      	nop			; (mov r8, r8)
 8000740:	20000028 	.word	0x20000028
 8000744:	40003000 	.word	0x40003000
 8000748:	00000fff 	.word	0x00000fff

0800074c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000750:	4b23      	ldr	r3, [pc, #140]	; (80007e0 <MX_USART2_UART_Init+0x94>)
 8000752:	4a24      	ldr	r2, [pc, #144]	; (80007e4 <MX_USART2_UART_Init+0x98>)
 8000754:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000756:	4b22      	ldr	r3, [pc, #136]	; (80007e0 <MX_USART2_UART_Init+0x94>)
 8000758:	22e1      	movs	r2, #225	; 0xe1
 800075a:	0252      	lsls	r2, r2, #9
 800075c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800075e:	4b20      	ldr	r3, [pc, #128]	; (80007e0 <MX_USART2_UART_Init+0x94>)
 8000760:	2200      	movs	r2, #0
 8000762:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000764:	4b1e      	ldr	r3, [pc, #120]	; (80007e0 <MX_USART2_UART_Init+0x94>)
 8000766:	2200      	movs	r2, #0
 8000768:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800076a:	4b1d      	ldr	r3, [pc, #116]	; (80007e0 <MX_USART2_UART_Init+0x94>)
 800076c:	2200      	movs	r2, #0
 800076e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000770:	4b1b      	ldr	r3, [pc, #108]	; (80007e0 <MX_USART2_UART_Init+0x94>)
 8000772:	220c      	movs	r2, #12
 8000774:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000776:	4b1a      	ldr	r3, [pc, #104]	; (80007e0 <MX_USART2_UART_Init+0x94>)
 8000778:	2200      	movs	r2, #0
 800077a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800077c:	4b18      	ldr	r3, [pc, #96]	; (80007e0 <MX_USART2_UART_Init+0x94>)
 800077e:	2200      	movs	r2, #0
 8000780:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000782:	4b17      	ldr	r3, [pc, #92]	; (80007e0 <MX_USART2_UART_Init+0x94>)
 8000784:	2200      	movs	r2, #0
 8000786:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000788:	4b15      	ldr	r3, [pc, #84]	; (80007e0 <MX_USART2_UART_Init+0x94>)
 800078a:	2200      	movs	r2, #0
 800078c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800078e:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <MX_USART2_UART_Init+0x94>)
 8000790:	2200      	movs	r2, #0
 8000792:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000794:	4b12      	ldr	r3, [pc, #72]	; (80007e0 <MX_USART2_UART_Init+0x94>)
 8000796:	0018      	movs	r0, r3
 8000798:	f001 fe1e 	bl	80023d8 <HAL_UART_Init>
 800079c:	1e03      	subs	r3, r0, #0
 800079e:	d001      	beq.n	80007a4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80007a0:	f000 f89e 	bl	80008e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007a4:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <MX_USART2_UART_Init+0x94>)
 80007a6:	2100      	movs	r1, #0
 80007a8:	0018      	movs	r0, r3
 80007aa:	f003 ff5b 	bl	8004664 <HAL_UARTEx_SetTxFifoThreshold>
 80007ae:	1e03      	subs	r3, r0, #0
 80007b0:	d001      	beq.n	80007b6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80007b2:	f000 f895 	bl	80008e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007b6:	4b0a      	ldr	r3, [pc, #40]	; (80007e0 <MX_USART2_UART_Init+0x94>)
 80007b8:	2100      	movs	r1, #0
 80007ba:	0018      	movs	r0, r3
 80007bc:	f003 ff92 	bl	80046e4 <HAL_UARTEx_SetRxFifoThreshold>
 80007c0:	1e03      	subs	r3, r0, #0
 80007c2:	d001      	beq.n	80007c8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80007c4:	f000 f88c 	bl	80008e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80007c8:	4b05      	ldr	r3, [pc, #20]	; (80007e0 <MX_USART2_UART_Init+0x94>)
 80007ca:	0018      	movs	r0, r3
 80007cc:	f003 ff10 	bl	80045f0 <HAL_UARTEx_DisableFifoMode>
 80007d0:	1e03      	subs	r3, r0, #0
 80007d2:	d001      	beq.n	80007d8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80007d4:	f000 f884 	bl	80008e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007d8:	46c0      	nop			; (mov r8, r8)
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	46c0      	nop			; (mov r8, r8)
 80007e0:	20000038 	.word	0x20000038
 80007e4:	40004400 	.word	0x40004400

080007e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e8:	b590      	push	{r4, r7, lr}
 80007ea:	b089      	sub	sp, #36	; 0x24
 80007ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ee:	240c      	movs	r4, #12
 80007f0:	193b      	adds	r3, r7, r4
 80007f2:	0018      	movs	r0, r3
 80007f4:	2314      	movs	r3, #20
 80007f6:	001a      	movs	r2, r3
 80007f8:	2100      	movs	r1, #0
 80007fa:	f004 f813 	bl	8004824 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fe:	4b36      	ldr	r3, [pc, #216]	; (80008d8 <MX_GPIO_Init+0xf0>)
 8000800:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000802:	4b35      	ldr	r3, [pc, #212]	; (80008d8 <MX_GPIO_Init+0xf0>)
 8000804:	2101      	movs	r1, #1
 8000806:	430a      	orrs	r2, r1
 8000808:	635a      	str	r2, [r3, #52]	; 0x34
 800080a:	4b33      	ldr	r3, [pc, #204]	; (80008d8 <MX_GPIO_Init+0xf0>)
 800080c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800080e:	2201      	movs	r2, #1
 8000810:	4013      	ands	r3, r2
 8000812:	60bb      	str	r3, [r7, #8]
 8000814:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000816:	4b30      	ldr	r3, [pc, #192]	; (80008d8 <MX_GPIO_Init+0xf0>)
 8000818:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800081a:	4b2f      	ldr	r3, [pc, #188]	; (80008d8 <MX_GPIO_Init+0xf0>)
 800081c:	2102      	movs	r1, #2
 800081e:	430a      	orrs	r2, r1
 8000820:	635a      	str	r2, [r3, #52]	; 0x34
 8000822:	4b2d      	ldr	r3, [pc, #180]	; (80008d8 <MX_GPIO_Init+0xf0>)
 8000824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000826:	2202      	movs	r2, #2
 8000828:	4013      	ands	r3, r2
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_3_Pin|GPIO_LOAD_Pin|GPIO_5_Pin|GPIO_7_Pin, GPIO_PIN_RESET);
 800082e:	23b1      	movs	r3, #177	; 0xb1
 8000830:	005b      	lsls	r3, r3, #1
 8000832:	482a      	ldr	r0, [pc, #168]	; (80008dc <MX_GPIO_Init+0xf4>)
 8000834:	2200      	movs	r2, #0
 8000836:	0019      	movs	r1, r3
 8000838:	f000 fe38 	bl	80014ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_2_Pin|GPIO_1_Pin, GPIO_PIN_RESET);
 800083c:	23c0      	movs	r3, #192	; 0xc0
 800083e:	0159      	lsls	r1, r3, #5
 8000840:	23a0      	movs	r3, #160	; 0xa0
 8000842:	05db      	lsls	r3, r3, #23
 8000844:	2200      	movs	r2, #0
 8000846:	0018      	movs	r0, r3
 8000848:	f000 fe30 	bl	80014ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPIO_3_Pin GPIO_LOAD_Pin GPIO_5_Pin GPIO_7_Pin */
  GPIO_InitStruct.Pin = GPIO_3_Pin|GPIO_LOAD_Pin|GPIO_5_Pin|GPIO_7_Pin;
 800084c:	193b      	adds	r3, r7, r4
 800084e:	22b1      	movs	r2, #177	; 0xb1
 8000850:	0052      	lsls	r2, r2, #1
 8000852:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000854:	193b      	adds	r3, r7, r4
 8000856:	2201      	movs	r2, #1
 8000858:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	193b      	adds	r3, r7, r4
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000860:	193b      	adds	r3, r7, r4
 8000862:	2200      	movs	r2, #0
 8000864:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000866:	193b      	adds	r3, r7, r4
 8000868:	4a1c      	ldr	r2, [pc, #112]	; (80008dc <MX_GPIO_Init+0xf4>)
 800086a:	0019      	movs	r1, r3
 800086c:	0010      	movs	r0, r2
 800086e:	f000 fcb9 	bl	80011e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_2_Pin GPIO_1_Pin */
  GPIO_InitStruct.Pin = GPIO_2_Pin|GPIO_1_Pin;
 8000872:	0021      	movs	r1, r4
 8000874:	187b      	adds	r3, r7, r1
 8000876:	22c0      	movs	r2, #192	; 0xc0
 8000878:	0152      	lsls	r2, r2, #5
 800087a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087c:	000c      	movs	r4, r1
 800087e:	193b      	adds	r3, r7, r4
 8000880:	2201      	movs	r2, #1
 8000882:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	193b      	adds	r3, r7, r4
 8000886:	2200      	movs	r2, #0
 8000888:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088a:	193b      	adds	r3, r7, r4
 800088c:	2200      	movs	r2, #0
 800088e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000890:	193a      	adds	r2, r7, r4
 8000892:	23a0      	movs	r3, #160	; 0xa0
 8000894:	05db      	lsls	r3, r3, #23
 8000896:	0011      	movs	r1, r2
 8000898:	0018      	movs	r0, r3
 800089a:	f000 fca3 	bl	80011e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONTROL_Pin */
  GPIO_InitStruct.Pin = CONTROL_Pin;
 800089e:	0021      	movs	r1, r4
 80008a0:	187b      	adds	r3, r7, r1
 80008a2:	2280      	movs	r2, #128	; 0x80
 80008a4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008a6:	187b      	adds	r3, r7, r1
 80008a8:	2284      	movs	r2, #132	; 0x84
 80008aa:	0392      	lsls	r2, r2, #14
 80008ac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	187b      	adds	r3, r7, r1
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(CONTROL_GPIO_Port, &GPIO_InitStruct);
 80008b4:	187b      	adds	r3, r7, r1
 80008b6:	4a09      	ldr	r2, [pc, #36]	; (80008dc <MX_GPIO_Init+0xf4>)
 80008b8:	0019      	movs	r1, r3
 80008ba:	0010      	movs	r0, r2
 80008bc:	f000 fc92 	bl	80011e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 3, 0);
 80008c0:	2200      	movs	r2, #0
 80008c2:	2103      	movs	r1, #3
 80008c4:	2007      	movs	r0, #7
 80008c6:	f000 fb8f 	bl	8000fe8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80008ca:	2007      	movs	r0, #7
 80008cc:	f000 fba1 	bl	8001012 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008d0:	46c0      	nop			; (mov r8, r8)
 80008d2:	46bd      	mov	sp, r7
 80008d4:	b009      	add	sp, #36	; 0x24
 80008d6:	bd90      	pop	{r4, r7, pc}
 80008d8:	40021000 	.word	0x40021000
 80008dc:	50000400 	.word	0x50000400

080008e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e4:	b672      	cpsid	i
}
 80008e6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e8:	e7fe      	b.n	80008e8 <Error_Handler+0x8>
	...

080008ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008f2:	4b11      	ldr	r3, [pc, #68]	; (8000938 <HAL_MspInit+0x4c>)
 80008f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008f6:	4b10      	ldr	r3, [pc, #64]	; (8000938 <HAL_MspInit+0x4c>)
 80008f8:	2101      	movs	r1, #1
 80008fa:	430a      	orrs	r2, r1
 80008fc:	641a      	str	r2, [r3, #64]	; 0x40
 80008fe:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <HAL_MspInit+0x4c>)
 8000900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000902:	2201      	movs	r2, #1
 8000904:	4013      	ands	r3, r2
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800090a:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <HAL_MspInit+0x4c>)
 800090c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800090e:	4b0a      	ldr	r3, [pc, #40]	; (8000938 <HAL_MspInit+0x4c>)
 8000910:	2180      	movs	r1, #128	; 0x80
 8000912:	0549      	lsls	r1, r1, #21
 8000914:	430a      	orrs	r2, r1
 8000916:	63da      	str	r2, [r3, #60]	; 0x3c
 8000918:	4b07      	ldr	r3, [pc, #28]	; (8000938 <HAL_MspInit+0x4c>)
 800091a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800091c:	2380      	movs	r3, #128	; 0x80
 800091e:	055b      	lsls	r3, r3, #21
 8000920:	4013      	ands	r3, r2
 8000922:	603b      	str	r3, [r7, #0]
 8000924:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE);
 8000926:	2380      	movs	r3, #128	; 0x80
 8000928:	009b      	lsls	r3, r3, #2
 800092a:	0018      	movs	r0, r3
 800092c:	f000 fa9a 	bl	8000e64 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000930:	46c0      	nop			; (mov r8, r8)
 8000932:	46bd      	mov	sp, r7
 8000934:	b002      	add	sp, #8
 8000936:	bd80      	pop	{r7, pc}
 8000938:	40021000 	.word	0x40021000

0800093c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800093c:	b590      	push	{r4, r7, lr}
 800093e:	b097      	sub	sp, #92	; 0x5c
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000944:	2344      	movs	r3, #68	; 0x44
 8000946:	18fb      	adds	r3, r7, r3
 8000948:	0018      	movs	r0, r3
 800094a:	2314      	movs	r3, #20
 800094c:	001a      	movs	r2, r3
 800094e:	2100      	movs	r1, #0
 8000950:	f003 ff68 	bl	8004824 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000954:	2410      	movs	r4, #16
 8000956:	193b      	adds	r3, r7, r4
 8000958:	0018      	movs	r0, r3
 800095a:	2334      	movs	r3, #52	; 0x34
 800095c:	001a      	movs	r2, r3
 800095e:	2100      	movs	r1, #0
 8000960:	f003 ff60 	bl	8004824 <memset>
  if(huart->Instance==USART2)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a32      	ldr	r2, [pc, #200]	; (8000a34 <HAL_UART_MspInit+0xf8>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d15d      	bne.n	8000a2a <HAL_UART_MspInit+0xee>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800096e:	193b      	adds	r3, r7, r4
 8000970:	2202      	movs	r2, #2
 8000972:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000974:	193b      	adds	r3, r7, r4
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800097a:	193b      	adds	r3, r7, r4
 800097c:	0018      	movs	r0, r3
 800097e:	f001 fb73 	bl	8002068 <HAL_RCCEx_PeriphCLKConfig>
 8000982:	1e03      	subs	r3, r0, #0
 8000984:	d001      	beq.n	800098a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000986:	f7ff ffab 	bl	80008e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800098a:	4b2b      	ldr	r3, [pc, #172]	; (8000a38 <HAL_UART_MspInit+0xfc>)
 800098c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800098e:	4b2a      	ldr	r3, [pc, #168]	; (8000a38 <HAL_UART_MspInit+0xfc>)
 8000990:	2180      	movs	r1, #128	; 0x80
 8000992:	0289      	lsls	r1, r1, #10
 8000994:	430a      	orrs	r2, r1
 8000996:	63da      	str	r2, [r3, #60]	; 0x3c
 8000998:	4b27      	ldr	r3, [pc, #156]	; (8000a38 <HAL_UART_MspInit+0xfc>)
 800099a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800099c:	2380      	movs	r3, #128	; 0x80
 800099e:	029b      	lsls	r3, r3, #10
 80009a0:	4013      	ands	r3, r2
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a6:	4b24      	ldr	r3, [pc, #144]	; (8000a38 <HAL_UART_MspInit+0xfc>)
 80009a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009aa:	4b23      	ldr	r3, [pc, #140]	; (8000a38 <HAL_UART_MspInit+0xfc>)
 80009ac:	2101      	movs	r1, #1
 80009ae:	430a      	orrs	r2, r1
 80009b0:	635a      	str	r2, [r3, #52]	; 0x34
 80009b2:	4b21      	ldr	r3, [pc, #132]	; (8000a38 <HAL_UART_MspInit+0xfc>)
 80009b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009b6:	2201      	movs	r2, #1
 80009b8:	4013      	ands	r3, r2
 80009ba:	60bb      	str	r3, [r7, #8]
 80009bc:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009be:	2444      	movs	r4, #68	; 0x44
 80009c0:	193b      	adds	r3, r7, r4
 80009c2:	2204      	movs	r2, #4
 80009c4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c6:	193b      	adds	r3, r7, r4
 80009c8:	2202      	movs	r2, #2
 80009ca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	193b      	adds	r3, r7, r4
 80009ce:	2200      	movs	r2, #0
 80009d0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d2:	193b      	adds	r3, r7, r4
 80009d4:	2200      	movs	r2, #0
 80009d6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80009d8:	193b      	adds	r3, r7, r4
 80009da:	2201      	movs	r2, #1
 80009dc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009de:	193a      	adds	r2, r7, r4
 80009e0:	23a0      	movs	r3, #160	; 0xa0
 80009e2:	05db      	lsls	r3, r3, #23
 80009e4:	0011      	movs	r1, r2
 80009e6:	0018      	movs	r0, r3
 80009e8:	f000 fbfc 	bl	80011e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80009ec:	0021      	movs	r1, r4
 80009ee:	187b      	adds	r3, r7, r1
 80009f0:	2208      	movs	r2, #8
 80009f2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f4:	187b      	adds	r3, r7, r1
 80009f6:	2202      	movs	r2, #2
 80009f8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009fa:	187b      	adds	r3, r7, r1
 80009fc:	2201      	movs	r2, #1
 80009fe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a00:	187b      	adds	r3, r7, r1
 8000a02:	2200      	movs	r2, #0
 8000a04:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000a06:	187b      	adds	r3, r7, r1
 8000a08:	2201      	movs	r2, #1
 8000a0a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0c:	187a      	adds	r2, r7, r1
 8000a0e:	23a0      	movs	r3, #160	; 0xa0
 8000a10:	05db      	lsls	r3, r3, #23
 8000a12:	0011      	movs	r1, r2
 8000a14:	0018      	movs	r0, r3
 8000a16:	f000 fbe5 	bl	80011e4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2103      	movs	r1, #3
 8000a1e:	201c      	movs	r0, #28
 8000a20:	f000 fae2 	bl	8000fe8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a24:	201c      	movs	r0, #28
 8000a26:	f000 faf4 	bl	8001012 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a2a:	46c0      	nop			; (mov r8, r8)
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	b017      	add	sp, #92	; 0x5c
 8000a30:	bd90      	pop	{r4, r7, pc}
 8000a32:	46c0      	nop			; (mov r8, r8)
 8000a34:	40004400 	.word	0x40004400
 8000a38:	40021000 	.word	0x40021000

08000a3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a40:	e7fe      	b.n	8000a40 <NMI_Handler+0x4>

08000a42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a42:	b580      	push	{r7, lr}
 8000a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a46:	e7fe      	b.n	8000a46 <HardFault_Handler+0x4>

08000a48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a4c:	46c0      	nop			; (mov r8, r8)
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}

08000a52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a52:	b580      	push	{r7, lr}
 8000a54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a56:	46c0      	nop			; (mov r8, r8)
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a60:	f000 f9e4 	bl	8000e2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a64:	46c0      	nop			; (mov r8, r8)
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}

08000a6a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000a6a:	b580      	push	{r7, lr}
 8000a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CONTROL_Pin);
 8000a6e:	2080      	movs	r0, #128	; 0x80
 8000a70:	f000 fd54 	bl	800151c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000a74:	46c0      	nop			; (mov r8, r8)
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
	...

08000a7c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a80:	4b03      	ldr	r3, [pc, #12]	; (8000a90 <USART2_IRQHandler+0x14>)
 8000a82:	0018      	movs	r0, r3
 8000a84:	f001 fe04 	bl	8002690 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a88:	46c0      	nop			; (mov r8, r8)
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	46c0      	nop			; (mov r8, r8)
 8000a90:	20000038 	.word	0x20000038

08000a94 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a98:	46c0      	nop			; (mov r8, r8)
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
	...

08000aa0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000aa0:	480d      	ldr	r0, [pc, #52]	; (8000ad8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000aa2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000aa4:	f7ff fff6 	bl	8000a94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000aa8:	480c      	ldr	r0, [pc, #48]	; (8000adc <LoopForever+0x6>)
  ldr r1, =_edata
 8000aaa:	490d      	ldr	r1, [pc, #52]	; (8000ae0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000aac:	4a0d      	ldr	r2, [pc, #52]	; (8000ae4 <LoopForever+0xe>)
  movs r3, #0
 8000aae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab0:	e002      	b.n	8000ab8 <LoopCopyDataInit>

08000ab2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ab2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ab4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ab6:	3304      	adds	r3, #4

08000ab8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ab8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000abc:	d3f9      	bcc.n	8000ab2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000abe:	4a0a      	ldr	r2, [pc, #40]	; (8000ae8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ac0:	4c0a      	ldr	r4, [pc, #40]	; (8000aec <LoopForever+0x16>)
  movs r3, #0
 8000ac2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ac4:	e001      	b.n	8000aca <LoopFillZerobss>

08000ac6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ac6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ac8:	3204      	adds	r2, #4

08000aca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000acc:	d3fb      	bcc.n	8000ac6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ace:	f003 fed5 	bl	800487c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000ad2:	f7ff fda3 	bl	800061c <main>

08000ad6 <LoopForever>:

LoopForever:
  b LoopForever
 8000ad6:	e7fe      	b.n	8000ad6 <LoopForever>
  ldr   r0, =_estack
 8000ad8:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000adc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ae0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ae4:	08004b08 	.word	0x08004b08
  ldr r2, =_sbss
 8000ae8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000aec:	200000ec 	.word	0x200000ec

08000af0 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000af0:	e7fe      	b.n	8000af0 <ADC1_COMP_IRQHandler>
	...

08000af4 <loadControlInitialize>:
	LOAD_ERROR
}load_value_en;



void loadControlInitialize(void){
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
	uartIsBusy = 0;
 8000af8:	4b0b      	ldr	r3, [pc, #44]	; (8000b28 <loadControlInitialize+0x34>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	701a      	strb	r2, [r3, #0]
	receivedChar = 0;
 8000afe:	4b0b      	ldr	r3, [pc, #44]	; (8000b2c <loadControlInitialize+0x38>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	701a      	strb	r2, [r3, #0]
	countReceived = 0;
 8000b04:	4b0a      	ldr	r3, [pc, #40]	; (8000b30 <loadControlInitialize+0x3c>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	701a      	strb	r2, [r3, #0]
	memset(receivedBuffer,0x00, sizeof(receivedBuffer));
 8000b0a:	4b0a      	ldr	r3, [pc, #40]	; (8000b34 <loadControlInitialize+0x40>)
 8000b0c:	2214      	movs	r2, #20
 8000b0e:	2100      	movs	r1, #0
 8000b10:	0018      	movs	r0, r3
 8000b12:	f003 fe87 	bl	8004824 <memset>
	HAL_UART_Receive_IT(&huart2, (uint8_t *)&receivedChar, 1);
 8000b16:	4905      	ldr	r1, [pc, #20]	; (8000b2c <loadControlInitialize+0x38>)
 8000b18:	4b07      	ldr	r3, [pc, #28]	; (8000b38 <loadControlInitialize+0x44>)
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	f001 fd59 	bl	80025d4 <HAL_UART_Receive_IT>
}
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	200000cd 	.word	0x200000cd
 8000b2c:	200000cc 	.word	0x200000cc
 8000b30:	200000e4 	.word	0x200000e4
 8000b34:	200000d0 	.word	0x200000d0
 8000b38:	20000038 	.word	0x20000038

08000b3c <loadSetValue>:


void loadSetValue(load_value_en value) {
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	0002      	movs	r2, r0
 8000b44:	1dfb      	adds	r3, r7, #7
 8000b46:	701a      	strb	r2, [r3, #0]
	switch (value) {
 8000b48:	1dfb      	adds	r3, r7, #7
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	2b02      	cmp	r3, #2
 8000b4e:	d02d      	beq.n	8000bac <loadSetValue+0x70>
 8000b50:	dc3f      	bgt.n	8000bd2 <loadSetValue+0x96>
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d002      	beq.n	8000b5c <loadSetValue+0x20>
 8000b56:	2b01      	cmp	r3, #1
 8000b58:	d014      	beq.n	8000b84 <loadSetValue+0x48>
 8000b5a:	e03a      	b.n	8000bd2 <loadSetValue+0x96>
	case LOAD_ON:
		if (!uartIsBusy) {
 8000b5c:	4b26      	ldr	r3, [pc, #152]	; (8000bf8 <loadSetValue+0xbc>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d108      	bne.n	8000b76 <loadSetValue+0x3a>
			uartIsBusy = 1;
 8000b64:	4b24      	ldr	r3, [pc, #144]	; (8000bf8 <loadSetValue+0xbc>)
 8000b66:	2201      	movs	r2, #1
 8000b68:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart2, turn_on_load, sizeof(turn_on_load));
 8000b6a:	4924      	ldr	r1, [pc, #144]	; (8000bfc <loadSetValue+0xc0>)
 8000b6c:	4b24      	ldr	r3, [pc, #144]	; (8000c00 <loadSetValue+0xc4>)
 8000b6e:	2217      	movs	r2, #23
 8000b70:	0018      	movs	r0, r3
 8000b72:	f001 fc87 	bl	8002484 <HAL_UART_Transmit_IT>
		}
		HAL_GPIO_WritePin(GPIO_LOAD_GPIO_Port, GPIO_LOAD_Pin,GPIO_PIN_SET);
 8000b76:	4b23      	ldr	r3, [pc, #140]	; (8000c04 <loadSetValue+0xc8>)
 8000b78:	2201      	movs	r2, #1
 8000b7a:	2120      	movs	r1, #32
 8000b7c:	0018      	movs	r0, r3
 8000b7e:	f000 fc95 	bl	80014ac <HAL_GPIO_WritePin>
		break;
 8000b82:	e034      	b.n	8000bee <loadSetValue+0xb2>
	case LOAD_OFF:
		if (!uartIsBusy) {
 8000b84:	4b1c      	ldr	r3, [pc, #112]	; (8000bf8 <loadSetValue+0xbc>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d108      	bne.n	8000b9e <loadSetValue+0x62>
			uartIsBusy = 1;
 8000b8c:	4b1a      	ldr	r3, [pc, #104]	; (8000bf8 <loadSetValue+0xbc>)
 8000b8e:	2201      	movs	r2, #1
 8000b90:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart2, turn_off_load, sizeof(turn_off_load));
 8000b92:	491d      	ldr	r1, [pc, #116]	; (8000c08 <loadSetValue+0xcc>)
 8000b94:	4b1a      	ldr	r3, [pc, #104]	; (8000c00 <loadSetValue+0xc4>)
 8000b96:	2218      	movs	r2, #24
 8000b98:	0018      	movs	r0, r3
 8000b9a:	f001 fc73 	bl	8002484 <HAL_UART_Transmit_IT>
		}
		HAL_GPIO_WritePin(GPIO_LOAD_GPIO_Port, GPIO_LOAD_Pin,GPIO_PIN_RESET);
 8000b9e:	4b19      	ldr	r3, [pc, #100]	; (8000c04 <loadSetValue+0xc8>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	2120      	movs	r1, #32
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	f000 fc81 	bl	80014ac <HAL_GPIO_WritePin>
		break;
 8000baa:	e020      	b.n	8000bee <loadSetValue+0xb2>
	case LOAD_TOGGLE:
		if (!uartIsBusy) {
 8000bac:	4b12      	ldr	r3, [pc, #72]	; (8000bf8 <loadSetValue+0xbc>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d108      	bne.n	8000bc6 <loadSetValue+0x8a>
			uartIsBusy = 1;
 8000bb4:	4b10      	ldr	r3, [pc, #64]	; (8000bf8 <loadSetValue+0xbc>)
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart2, toggle_load, sizeof(toggle_load));
 8000bba:	4914      	ldr	r1, [pc, #80]	; (8000c0c <loadSetValue+0xd0>)
 8000bbc:	4b10      	ldr	r3, [pc, #64]	; (8000c00 <loadSetValue+0xc4>)
 8000bbe:	2215      	movs	r2, #21
 8000bc0:	0018      	movs	r0, r3
 8000bc2:	f001 fc5f 	bl	8002484 <HAL_UART_Transmit_IT>
		}
		HAL_GPIO_TogglePin(GPIO_LOAD_GPIO_Port, GPIO_LOAD_Pin);
 8000bc6:	4b0f      	ldr	r3, [pc, #60]	; (8000c04 <loadSetValue+0xc8>)
 8000bc8:	2120      	movs	r1, #32
 8000bca:	0018      	movs	r0, r3
 8000bcc:	f000 fc8b 	bl	80014e6 <HAL_GPIO_TogglePin>
		break;
 8000bd0:	e00d      	b.n	8000bee <loadSetValue+0xb2>
	default:
		if (!uartIsBusy) {
 8000bd2:	4b09      	ldr	r3, [pc, #36]	; (8000bf8 <loadSetValue+0xbc>)
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d108      	bne.n	8000bec <loadSetValue+0xb0>
			uartIsBusy = 1;
 8000bda:	4b07      	ldr	r3, [pc, #28]	; (8000bf8 <loadSetValue+0xbc>)
 8000bdc:	2201      	movs	r2, #1
 8000bde:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart2, error_text, sizeof(error_text));
 8000be0:	490b      	ldr	r1, [pc, #44]	; (8000c10 <loadSetValue+0xd4>)
 8000be2:	4b07      	ldr	r3, [pc, #28]	; (8000c00 <loadSetValue+0xc4>)
 8000be4:	2222      	movs	r2, #34	; 0x22
 8000be6:	0018      	movs	r0, r3
 8000be8:	f001 fc4c 	bl	8002484 <HAL_UART_Transmit_IT>
		}
		break;
 8000bec:	46c0      	nop			; (mov r8, r8)
	}
}
 8000bee:	46c0      	nop			; (mov r8, r8)
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	b002      	add	sp, #8
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	46c0      	nop			; (mov r8, r8)
 8000bf8:	200000cd 	.word	0x200000cd
 8000bfc:	08004978 	.word	0x08004978
 8000c00:	20000038 	.word	0x20000038
 8000c04:	50000400 	.word	0x50000400
 8000c08:	08004990 	.word	0x08004990
 8000c0c:	08004960 	.word	0x08004960
 8000c10:	080049a8 	.word	0x080049a8

08000c14 <HAL_GPIO_EXTI_Falling_Callback>:
/**
 * @brief  EXTI line detection callback.
 * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
 * @retval None
 */
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	0002      	movs	r2, r0
 8000c1c:	1dbb      	adds	r3, r7, #6
 8000c1e:	801a      	strh	r2, [r3, #0]
	if (GPIO_Pin == CONTROL_Pin) {
 8000c20:	1dbb      	adds	r3, r7, #6
 8000c22:	881b      	ldrh	r3, [r3, #0]
 8000c24:	2b80      	cmp	r3, #128	; 0x80
 8000c26:	d102      	bne.n	8000c2e <HAL_GPIO_EXTI_Falling_Callback+0x1a>
		loadSetValue(LOAD_TOGGLE);
 8000c28:	2002      	movs	r0, #2
 8000c2a:	f7ff ff87 	bl	8000b3c <loadSetValue>
	}
}
 8000c2e:	46c0      	nop			; (mov r8, r8)
 8000c30:	46bd      	mov	sp, r7
 8000c32:	b002      	add	sp, #8
 8000c34:	bd80      	pop	{r7, pc}
	...

08000c38 <HAL_UART_TxCpltCallback>:
/**
 * @brief Tx Transfer completed callback.
 * @param huart UART handle.
 * @retval None
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
	uartIsBusy = 0;
 8000c40:	4b03      	ldr	r3, [pc, #12]	; (8000c50 <HAL_UART_TxCpltCallback+0x18>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	701a      	strb	r2, [r3, #0]
}
 8000c46:	46c0      	nop			; (mov r8, r8)
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	b002      	add	sp, #8
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	46c0      	nop			; (mov r8, r8)
 8000c50:	200000cd 	.word	0x200000cd

08000c54 <HAL_UART_RxCpltCallback>:
/**
 * @brief  Rx Transfer completed callback.
 * @param  huart UART handle.
 * @retval None
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
	if (countReceived >= sizeof(receivedBuffer)) {
 8000c5c:	4b36      	ldr	r3, [pc, #216]	; (8000d38 <HAL_UART_RxCpltCallback+0xe4>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	2b13      	cmp	r3, #19
 8000c62:	d90b      	bls.n	8000c7c <HAL_UART_RxCpltCallback+0x28>
		countReceived = 0;
 8000c64:	4b34      	ldr	r3, [pc, #208]	; (8000d38 <HAL_UART_RxCpltCallback+0xe4>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	701a      	strb	r2, [r3, #0]
		loadSetValue(LOAD_ERROR);
 8000c6a:	2003      	movs	r0, #3
 8000c6c:	f7ff ff66 	bl	8000b3c <loadSetValue>
		memset(receivedBuffer,0x00, sizeof(receivedBuffer));
 8000c70:	4b32      	ldr	r3, [pc, #200]	; (8000d3c <HAL_UART_RxCpltCallback+0xe8>)
 8000c72:	2214      	movs	r2, #20
 8000c74:	2100      	movs	r1, #0
 8000c76:	0018      	movs	r0, r3
 8000c78:	f003 fdd4 	bl	8004824 <memset>
	}
	receivedBuffer[countReceived++] = receivedChar;
 8000c7c:	4b2e      	ldr	r3, [pc, #184]	; (8000d38 <HAL_UART_RxCpltCallback+0xe4>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	1c5a      	adds	r2, r3, #1
 8000c82:	b2d1      	uxtb	r1, r2
 8000c84:	4a2c      	ldr	r2, [pc, #176]	; (8000d38 <HAL_UART_RxCpltCallback+0xe4>)
 8000c86:	7011      	strb	r1, [r2, #0]
 8000c88:	001a      	movs	r2, r3
 8000c8a:	4b2d      	ldr	r3, [pc, #180]	; (8000d40 <HAL_UART_RxCpltCallback+0xec>)
 8000c8c:	7819      	ldrb	r1, [r3, #0]
 8000c8e:	4b2b      	ldr	r3, [pc, #172]	; (8000d3c <HAL_UART_RxCpltCallback+0xe8>)
 8000c90:	5499      	strb	r1, [r3, r2]

	for (int i = 0; i < sizeof(receivedBuffer); i++){
 8000c92:	2300      	movs	r3, #0
 8000c94:	60fb      	str	r3, [r7, #12]
 8000c96:	e042      	b.n	8000d1e <HAL_UART_RxCpltCallback+0xca>
		if((strncasecmp((const char *)&receivedBuffer[i],"turn on",sizeof("turn on")) == 0) || (strncasecmp((const char *)&receivedBuffer[i],"liga",sizeof("liga")) == 0) ){
 8000c98:	68fa      	ldr	r2, [r7, #12]
 8000c9a:	4b28      	ldr	r3, [pc, #160]	; (8000d3c <HAL_UART_RxCpltCallback+0xe8>)
 8000c9c:	18d3      	adds	r3, r2, r3
 8000c9e:	4929      	ldr	r1, [pc, #164]	; (8000d44 <HAL_UART_RxCpltCallback+0xf0>)
 8000ca0:	2208      	movs	r2, #8
 8000ca2:	0018      	movs	r0, r3
 8000ca4:	f003 fdc6 	bl	8004834 <strncasecmp>
 8000ca8:	1e03      	subs	r3, r0, #0
 8000caa:	d009      	beq.n	8000cc0 <HAL_UART_RxCpltCallback+0x6c>
 8000cac:	68fa      	ldr	r2, [r7, #12]
 8000cae:	4b23      	ldr	r3, [pc, #140]	; (8000d3c <HAL_UART_RxCpltCallback+0xe8>)
 8000cb0:	18d3      	adds	r3, r2, r3
 8000cb2:	4925      	ldr	r1, [pc, #148]	; (8000d48 <HAL_UART_RxCpltCallback+0xf4>)
 8000cb4:	2205      	movs	r2, #5
 8000cb6:	0018      	movs	r0, r3
 8000cb8:	f003 fdbc 	bl	8004834 <strncasecmp>
 8000cbc:	1e03      	subs	r3, r0, #0
 8000cbe:	d10b      	bne.n	8000cd8 <HAL_UART_RxCpltCallback+0x84>
			countReceived = 0;
 8000cc0:	4b1d      	ldr	r3, [pc, #116]	; (8000d38 <HAL_UART_RxCpltCallback+0xe4>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	701a      	strb	r2, [r3, #0]
			loadSetValue(LOAD_ON);
 8000cc6:	2000      	movs	r0, #0
 8000cc8:	f7ff ff38 	bl	8000b3c <loadSetValue>
			memset(receivedBuffer,0x00, sizeof(receivedBuffer));
 8000ccc:	4b1b      	ldr	r3, [pc, #108]	; (8000d3c <HAL_UART_RxCpltCallback+0xe8>)
 8000cce:	2214      	movs	r2, #20
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	0018      	movs	r0, r3
 8000cd4:	f003 fda6 	bl	8004824 <memset>
		}
		if((strncasecmp((const char *)&receivedBuffer[i],"turn off",sizeof("turn off")) == 0) || (strncasecmp((const char *)&receivedBuffer[i],"desliga",sizeof("desliga")) == 0) ){
 8000cd8:	68fa      	ldr	r2, [r7, #12]
 8000cda:	4b18      	ldr	r3, [pc, #96]	; (8000d3c <HAL_UART_RxCpltCallback+0xe8>)
 8000cdc:	18d3      	adds	r3, r2, r3
 8000cde:	491b      	ldr	r1, [pc, #108]	; (8000d4c <HAL_UART_RxCpltCallback+0xf8>)
 8000ce0:	2209      	movs	r2, #9
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	f003 fda6 	bl	8004834 <strncasecmp>
 8000ce8:	1e03      	subs	r3, r0, #0
 8000cea:	d009      	beq.n	8000d00 <HAL_UART_RxCpltCallback+0xac>
 8000cec:	68fa      	ldr	r2, [r7, #12]
 8000cee:	4b13      	ldr	r3, [pc, #76]	; (8000d3c <HAL_UART_RxCpltCallback+0xe8>)
 8000cf0:	18d3      	adds	r3, r2, r3
 8000cf2:	4917      	ldr	r1, [pc, #92]	; (8000d50 <HAL_UART_RxCpltCallback+0xfc>)
 8000cf4:	2208      	movs	r2, #8
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	f003 fd9c 	bl	8004834 <strncasecmp>
 8000cfc:	1e03      	subs	r3, r0, #0
 8000cfe:	d10b      	bne.n	8000d18 <HAL_UART_RxCpltCallback+0xc4>
			countReceived = 0;
 8000d00:	4b0d      	ldr	r3, [pc, #52]	; (8000d38 <HAL_UART_RxCpltCallback+0xe4>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	701a      	strb	r2, [r3, #0]
			loadSetValue(LOAD_OFF);
 8000d06:	2001      	movs	r0, #1
 8000d08:	f7ff ff18 	bl	8000b3c <loadSetValue>
			memset(receivedBuffer,0x00, sizeof(receivedBuffer));
 8000d0c:	4b0b      	ldr	r3, [pc, #44]	; (8000d3c <HAL_UART_RxCpltCallback+0xe8>)
 8000d0e:	2214      	movs	r2, #20
 8000d10:	2100      	movs	r1, #0
 8000d12:	0018      	movs	r0, r3
 8000d14:	f003 fd86 	bl	8004824 <memset>
	for (int i = 0; i < sizeof(receivedBuffer); i++){
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	60fb      	str	r3, [r7, #12]
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	2b13      	cmp	r3, #19
 8000d22:	d9b9      	bls.n	8000c98 <HAL_UART_RxCpltCallback+0x44>
		}
	}

	HAL_UART_Receive_IT(&huart2, (uint8_t *)&receivedChar, 1);
 8000d24:	4906      	ldr	r1, [pc, #24]	; (8000d40 <HAL_UART_RxCpltCallback+0xec>)
 8000d26:	4b0b      	ldr	r3, [pc, #44]	; (8000d54 <HAL_UART_RxCpltCallback+0x100>)
 8000d28:	2201      	movs	r2, #1
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	f001 fc52 	bl	80025d4 <HAL_UART_Receive_IT>
}
 8000d30:	46c0      	nop			; (mov r8, r8)
 8000d32:	46bd      	mov	sp, r7
 8000d34:	b004      	add	sp, #16
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	200000e4 	.word	0x200000e4
 8000d3c:	200000d0 	.word	0x200000d0
 8000d40:	200000cc 	.word	0x200000cc
 8000d44:	080048dc 	.word	0x080048dc
 8000d48:	080048e4 	.word	0x080048e4
 8000d4c:	080048ec 	.word	0x080048ec
 8000d50:	080048f8 	.word	0x080048f8
 8000d54:	20000038 	.word	0x20000038

08000d58 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d5e:	1dfb      	adds	r3, r7, #7
 8000d60:	2200      	movs	r2, #0
 8000d62:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d64:	4b0b      	ldr	r3, [pc, #44]	; (8000d94 <HAL_Init+0x3c>)
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	4b0a      	ldr	r3, [pc, #40]	; (8000d94 <HAL_Init+0x3c>)
 8000d6a:	2180      	movs	r1, #128	; 0x80
 8000d6c:	0049      	lsls	r1, r1, #1
 8000d6e:	430a      	orrs	r2, r1
 8000d70:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d72:	2000      	movs	r0, #0
 8000d74:	f000 f810 	bl	8000d98 <HAL_InitTick>
 8000d78:	1e03      	subs	r3, r0, #0
 8000d7a:	d003      	beq.n	8000d84 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000d7c:	1dfb      	adds	r3, r7, #7
 8000d7e:	2201      	movs	r2, #1
 8000d80:	701a      	strb	r2, [r3, #0]
 8000d82:	e001      	b.n	8000d88 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000d84:	f7ff fdb2 	bl	80008ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d88:	1dfb      	adds	r3, r7, #7
 8000d8a:	781b      	ldrb	r3, [r3, #0]
}
 8000d8c:	0018      	movs	r0, r3
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	b002      	add	sp, #8
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	40022000 	.word	0x40022000

08000d98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d98:	b590      	push	{r4, r7, lr}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000da0:	230f      	movs	r3, #15
 8000da2:	18fb      	adds	r3, r7, r3
 8000da4:	2200      	movs	r2, #0
 8000da6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000da8:	4b1d      	ldr	r3, [pc, #116]	; (8000e20 <HAL_InitTick+0x88>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d02b      	beq.n	8000e08 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000db0:	4b1c      	ldr	r3, [pc, #112]	; (8000e24 <HAL_InitTick+0x8c>)
 8000db2:	681c      	ldr	r4, [r3, #0]
 8000db4:	4b1a      	ldr	r3, [pc, #104]	; (8000e20 <HAL_InitTick+0x88>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	0019      	movs	r1, r3
 8000dba:	23fa      	movs	r3, #250	; 0xfa
 8000dbc:	0098      	lsls	r0, r3, #2
 8000dbe:	f7ff f9a1 	bl	8000104 <__udivsi3>
 8000dc2:	0003      	movs	r3, r0
 8000dc4:	0019      	movs	r1, r3
 8000dc6:	0020      	movs	r0, r4
 8000dc8:	f7ff f99c 	bl	8000104 <__udivsi3>
 8000dcc:	0003      	movs	r3, r0
 8000dce:	0018      	movs	r0, r3
 8000dd0:	f000 f92f 	bl	8001032 <HAL_SYSTICK_Config>
 8000dd4:	1e03      	subs	r3, r0, #0
 8000dd6:	d112      	bne.n	8000dfe <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2b03      	cmp	r3, #3
 8000ddc:	d80a      	bhi.n	8000df4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dde:	6879      	ldr	r1, [r7, #4]
 8000de0:	2301      	movs	r3, #1
 8000de2:	425b      	negs	r3, r3
 8000de4:	2200      	movs	r2, #0
 8000de6:	0018      	movs	r0, r3
 8000de8:	f000 f8fe 	bl	8000fe8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dec:	4b0e      	ldr	r3, [pc, #56]	; (8000e28 <HAL_InitTick+0x90>)
 8000dee:	687a      	ldr	r2, [r7, #4]
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	e00d      	b.n	8000e10 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000df4:	230f      	movs	r3, #15
 8000df6:	18fb      	adds	r3, r7, r3
 8000df8:	2201      	movs	r2, #1
 8000dfa:	701a      	strb	r2, [r3, #0]
 8000dfc:	e008      	b.n	8000e10 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000dfe:	230f      	movs	r3, #15
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	2201      	movs	r2, #1
 8000e04:	701a      	strb	r2, [r3, #0]
 8000e06:	e003      	b.n	8000e10 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e08:	230f      	movs	r3, #15
 8000e0a:	18fb      	adds	r3, r7, r3
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000e10:	230f      	movs	r3, #15
 8000e12:	18fb      	adds	r3, r7, r3
 8000e14:	781b      	ldrb	r3, [r3, #0]
}
 8000e16:	0018      	movs	r0, r3
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	b005      	add	sp, #20
 8000e1c:	bd90      	pop	{r4, r7, pc}
 8000e1e:	46c0      	nop			; (mov r8, r8)
 8000e20:	20000008 	.word	0x20000008
 8000e24:	20000000 	.word	0x20000000
 8000e28:	20000004 	.word	0x20000004

08000e2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e30:	4b05      	ldr	r3, [pc, #20]	; (8000e48 <HAL_IncTick+0x1c>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	001a      	movs	r2, r3
 8000e36:	4b05      	ldr	r3, [pc, #20]	; (8000e4c <HAL_IncTick+0x20>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	18d2      	adds	r2, r2, r3
 8000e3c:	4b03      	ldr	r3, [pc, #12]	; (8000e4c <HAL_IncTick+0x20>)
 8000e3e:	601a      	str	r2, [r3, #0]
}
 8000e40:	46c0      	nop			; (mov r8, r8)
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	46c0      	nop			; (mov r8, r8)
 8000e48:	20000008 	.word	0x20000008
 8000e4c:	200000e8 	.word	0x200000e8

08000e50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  return uwTick;
 8000e54:	4b02      	ldr	r3, [pc, #8]	; (8000e60 <HAL_GetTick+0x10>)
 8000e56:	681b      	ldr	r3, [r3, #0]
}
 8000e58:	0018      	movs	r0, r3
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	46c0      	nop			; (mov r8, r8)
 8000e60:	200000e8 	.word	0x200000e8

08000e64 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000e6c:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a06      	ldr	r2, [pc, #24]	; (8000e8c <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000e72:	4013      	ands	r3, r2
 8000e74:	0019      	movs	r1, r3
 8000e76:	4b04      	ldr	r3, [pc, #16]	; (8000e88 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000e78:	687a      	ldr	r2, [r7, #4]
 8000e7a:	430a      	orrs	r2, r1
 8000e7c:	601a      	str	r2, [r3, #0]
}
 8000e7e:	46c0      	nop			; (mov r8, r8)
 8000e80:	46bd      	mov	sp, r7
 8000e82:	b002      	add	sp, #8
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	46c0      	nop			; (mov r8, r8)
 8000e88:	40010000 	.word	0x40010000
 8000e8c:	fffff9ff 	.word	0xfffff9ff

08000e90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	0002      	movs	r2, r0
 8000e98:	1dfb      	adds	r3, r7, #7
 8000e9a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e9c:	1dfb      	adds	r3, r7, #7
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	2b7f      	cmp	r3, #127	; 0x7f
 8000ea2:	d809      	bhi.n	8000eb8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ea4:	1dfb      	adds	r3, r7, #7
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	001a      	movs	r2, r3
 8000eaa:	231f      	movs	r3, #31
 8000eac:	401a      	ands	r2, r3
 8000eae:	4b04      	ldr	r3, [pc, #16]	; (8000ec0 <__NVIC_EnableIRQ+0x30>)
 8000eb0:	2101      	movs	r1, #1
 8000eb2:	4091      	lsls	r1, r2
 8000eb4:	000a      	movs	r2, r1
 8000eb6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000eb8:	46c0      	nop			; (mov r8, r8)
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	b002      	add	sp, #8
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	e000e100 	.word	0xe000e100

08000ec4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ec4:	b590      	push	{r4, r7, lr}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	0002      	movs	r2, r0
 8000ecc:	6039      	str	r1, [r7, #0]
 8000ece:	1dfb      	adds	r3, r7, #7
 8000ed0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ed2:	1dfb      	adds	r3, r7, #7
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	2b7f      	cmp	r3, #127	; 0x7f
 8000ed8:	d828      	bhi.n	8000f2c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000eda:	4a2f      	ldr	r2, [pc, #188]	; (8000f98 <__NVIC_SetPriority+0xd4>)
 8000edc:	1dfb      	adds	r3, r7, #7
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	b25b      	sxtb	r3, r3
 8000ee2:	089b      	lsrs	r3, r3, #2
 8000ee4:	33c0      	adds	r3, #192	; 0xc0
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	589b      	ldr	r3, [r3, r2]
 8000eea:	1dfa      	adds	r2, r7, #7
 8000eec:	7812      	ldrb	r2, [r2, #0]
 8000eee:	0011      	movs	r1, r2
 8000ef0:	2203      	movs	r2, #3
 8000ef2:	400a      	ands	r2, r1
 8000ef4:	00d2      	lsls	r2, r2, #3
 8000ef6:	21ff      	movs	r1, #255	; 0xff
 8000ef8:	4091      	lsls	r1, r2
 8000efa:	000a      	movs	r2, r1
 8000efc:	43d2      	mvns	r2, r2
 8000efe:	401a      	ands	r2, r3
 8000f00:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	019b      	lsls	r3, r3, #6
 8000f06:	22ff      	movs	r2, #255	; 0xff
 8000f08:	401a      	ands	r2, r3
 8000f0a:	1dfb      	adds	r3, r7, #7
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	0018      	movs	r0, r3
 8000f10:	2303      	movs	r3, #3
 8000f12:	4003      	ands	r3, r0
 8000f14:	00db      	lsls	r3, r3, #3
 8000f16:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f18:	481f      	ldr	r0, [pc, #124]	; (8000f98 <__NVIC_SetPriority+0xd4>)
 8000f1a:	1dfb      	adds	r3, r7, #7
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	b25b      	sxtb	r3, r3
 8000f20:	089b      	lsrs	r3, r3, #2
 8000f22:	430a      	orrs	r2, r1
 8000f24:	33c0      	adds	r3, #192	; 0xc0
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f2a:	e031      	b.n	8000f90 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f2c:	4a1b      	ldr	r2, [pc, #108]	; (8000f9c <__NVIC_SetPriority+0xd8>)
 8000f2e:	1dfb      	adds	r3, r7, #7
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	0019      	movs	r1, r3
 8000f34:	230f      	movs	r3, #15
 8000f36:	400b      	ands	r3, r1
 8000f38:	3b08      	subs	r3, #8
 8000f3a:	089b      	lsrs	r3, r3, #2
 8000f3c:	3306      	adds	r3, #6
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	18d3      	adds	r3, r2, r3
 8000f42:	3304      	adds	r3, #4
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	1dfa      	adds	r2, r7, #7
 8000f48:	7812      	ldrb	r2, [r2, #0]
 8000f4a:	0011      	movs	r1, r2
 8000f4c:	2203      	movs	r2, #3
 8000f4e:	400a      	ands	r2, r1
 8000f50:	00d2      	lsls	r2, r2, #3
 8000f52:	21ff      	movs	r1, #255	; 0xff
 8000f54:	4091      	lsls	r1, r2
 8000f56:	000a      	movs	r2, r1
 8000f58:	43d2      	mvns	r2, r2
 8000f5a:	401a      	ands	r2, r3
 8000f5c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	019b      	lsls	r3, r3, #6
 8000f62:	22ff      	movs	r2, #255	; 0xff
 8000f64:	401a      	ands	r2, r3
 8000f66:	1dfb      	adds	r3, r7, #7
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	0018      	movs	r0, r3
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	4003      	ands	r3, r0
 8000f70:	00db      	lsls	r3, r3, #3
 8000f72:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f74:	4809      	ldr	r0, [pc, #36]	; (8000f9c <__NVIC_SetPriority+0xd8>)
 8000f76:	1dfb      	adds	r3, r7, #7
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	001c      	movs	r4, r3
 8000f7c:	230f      	movs	r3, #15
 8000f7e:	4023      	ands	r3, r4
 8000f80:	3b08      	subs	r3, #8
 8000f82:	089b      	lsrs	r3, r3, #2
 8000f84:	430a      	orrs	r2, r1
 8000f86:	3306      	adds	r3, #6
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	18c3      	adds	r3, r0, r3
 8000f8c:	3304      	adds	r3, #4
 8000f8e:	601a      	str	r2, [r3, #0]
}
 8000f90:	46c0      	nop			; (mov r8, r8)
 8000f92:	46bd      	mov	sp, r7
 8000f94:	b003      	add	sp, #12
 8000f96:	bd90      	pop	{r4, r7, pc}
 8000f98:	e000e100 	.word	0xe000e100
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	1e5a      	subs	r2, r3, #1
 8000fac:	2380      	movs	r3, #128	; 0x80
 8000fae:	045b      	lsls	r3, r3, #17
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d301      	bcc.n	8000fb8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	e010      	b.n	8000fda <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fb8:	4b0a      	ldr	r3, [pc, #40]	; (8000fe4 <SysTick_Config+0x44>)
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	3a01      	subs	r2, #1
 8000fbe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	425b      	negs	r3, r3
 8000fc4:	2103      	movs	r1, #3
 8000fc6:	0018      	movs	r0, r3
 8000fc8:	f7ff ff7c 	bl	8000ec4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fcc:	4b05      	ldr	r3, [pc, #20]	; (8000fe4 <SysTick_Config+0x44>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fd2:	4b04      	ldr	r3, [pc, #16]	; (8000fe4 <SysTick_Config+0x44>)
 8000fd4:	2207      	movs	r2, #7
 8000fd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	0018      	movs	r0, r3
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	b002      	add	sp, #8
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	46c0      	nop			; (mov r8, r8)
 8000fe4:	e000e010 	.word	0xe000e010

08000fe8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	60b9      	str	r1, [r7, #8]
 8000ff0:	607a      	str	r2, [r7, #4]
 8000ff2:	210f      	movs	r1, #15
 8000ff4:	187b      	adds	r3, r7, r1
 8000ff6:	1c02      	adds	r2, r0, #0
 8000ff8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000ffa:	68ba      	ldr	r2, [r7, #8]
 8000ffc:	187b      	adds	r3, r7, r1
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	b25b      	sxtb	r3, r3
 8001002:	0011      	movs	r1, r2
 8001004:	0018      	movs	r0, r3
 8001006:	f7ff ff5d 	bl	8000ec4 <__NVIC_SetPriority>
}
 800100a:	46c0      	nop			; (mov r8, r8)
 800100c:	46bd      	mov	sp, r7
 800100e:	b004      	add	sp, #16
 8001010:	bd80      	pop	{r7, pc}

08001012 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b082      	sub	sp, #8
 8001016:	af00      	add	r7, sp, #0
 8001018:	0002      	movs	r2, r0
 800101a:	1dfb      	adds	r3, r7, #7
 800101c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800101e:	1dfb      	adds	r3, r7, #7
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	b25b      	sxtb	r3, r3
 8001024:	0018      	movs	r0, r3
 8001026:	f7ff ff33 	bl	8000e90 <__NVIC_EnableIRQ>
}
 800102a:	46c0      	nop			; (mov r8, r8)
 800102c:	46bd      	mov	sp, r7
 800102e:	b002      	add	sp, #8
 8001030:	bd80      	pop	{r7, pc}

08001032 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b082      	sub	sp, #8
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	0018      	movs	r0, r3
 800103e:	f7ff ffaf 	bl	8000fa0 <SysTick_Config>
 8001042:	0003      	movs	r3, r0
}
 8001044:	0018      	movs	r0, r3
 8001046:	46bd      	mov	sp, r7
 8001048:	b002      	add	sp, #8
 800104a:	bd80      	pop	{r7, pc}

0800104c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d101      	bne.n	800105e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	e050      	b.n	8001100 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2225      	movs	r2, #37	; 0x25
 8001062:	5c9b      	ldrb	r3, [r3, r2]
 8001064:	b2db      	uxtb	r3, r3
 8001066:	2b02      	cmp	r3, #2
 8001068:	d008      	beq.n	800107c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2204      	movs	r2, #4
 800106e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2224      	movs	r2, #36	; 0x24
 8001074:	2100      	movs	r1, #0
 8001076:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001078:	2301      	movs	r3, #1
 800107a:	e041      	b.n	8001100 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	210e      	movs	r1, #14
 8001088:	438a      	bics	r2, r1
 800108a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001096:	491c      	ldr	r1, [pc, #112]	; (8001108 <HAL_DMA_Abort+0xbc>)
 8001098:	400a      	ands	r2, r1
 800109a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	2101      	movs	r1, #1
 80010a8:	438a      	bics	r2, r1
 80010aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80010ac:	4b17      	ldr	r3, [pc, #92]	; (800110c <HAL_DMA_Abort+0xc0>)
 80010ae:	6859      	ldr	r1, [r3, #4]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b4:	221c      	movs	r2, #28
 80010b6:	4013      	ands	r3, r2
 80010b8:	2201      	movs	r2, #1
 80010ba:	409a      	lsls	r2, r3
 80010bc:	4b13      	ldr	r3, [pc, #76]	; (800110c <HAL_DMA_Abort+0xc0>)
 80010be:	430a      	orrs	r2, r1
 80010c0:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80010ca:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d00c      	beq.n	80010ee <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010de:	490a      	ldr	r1, [pc, #40]	; (8001108 <HAL_DMA_Abort+0xbc>)
 80010e0:	400a      	ands	r2, r1
 80010e2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010e8:	687a      	ldr	r2, [r7, #4]
 80010ea:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80010ec:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2225      	movs	r2, #37	; 0x25
 80010f2:	2101      	movs	r1, #1
 80010f4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2224      	movs	r2, #36	; 0x24
 80010fa:	2100      	movs	r1, #0
 80010fc:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80010fe:	2300      	movs	r3, #0
}
 8001100:	0018      	movs	r0, r3
 8001102:	46bd      	mov	sp, r7
 8001104:	b002      	add	sp, #8
 8001106:	bd80      	pop	{r7, pc}
 8001108:	fffffeff 	.word	0xfffffeff
 800110c:	40020000 	.word	0x40020000

08001110 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001118:	210f      	movs	r1, #15
 800111a:	187b      	adds	r3, r7, r1
 800111c:	2200      	movs	r2, #0
 800111e:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2225      	movs	r2, #37	; 0x25
 8001124:	5c9b      	ldrb	r3, [r3, r2]
 8001126:	b2db      	uxtb	r3, r3
 8001128:	2b02      	cmp	r3, #2
 800112a:	d006      	beq.n	800113a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2204      	movs	r2, #4
 8001130:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001132:	187b      	adds	r3, r7, r1
 8001134:	2201      	movs	r2, #1
 8001136:	701a      	strb	r2, [r3, #0]
 8001138:	e049      	b.n	80011ce <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	210e      	movs	r1, #14
 8001146:	438a      	bics	r2, r1
 8001148:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	2101      	movs	r1, #1
 8001156:	438a      	bics	r2, r1
 8001158:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001164:	491d      	ldr	r1, [pc, #116]	; (80011dc <HAL_DMA_Abort_IT+0xcc>)
 8001166:	400a      	ands	r2, r1
 8001168:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800116a:	4b1d      	ldr	r3, [pc, #116]	; (80011e0 <HAL_DMA_Abort_IT+0xd0>)
 800116c:	6859      	ldr	r1, [r3, #4]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001172:	221c      	movs	r2, #28
 8001174:	4013      	ands	r3, r2
 8001176:	2201      	movs	r2, #1
 8001178:	409a      	lsls	r2, r3
 800117a:	4b19      	ldr	r3, [pc, #100]	; (80011e0 <HAL_DMA_Abort_IT+0xd0>)
 800117c:	430a      	orrs	r2, r1
 800117e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001188:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800118e:	2b00      	cmp	r3, #0
 8001190:	d00c      	beq.n	80011ac <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800119c:	490f      	ldr	r1, [pc, #60]	; (80011dc <HAL_DMA_Abort_IT+0xcc>)
 800119e:	400a      	ands	r2, r1
 80011a0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80011aa:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2225      	movs	r2, #37	; 0x25
 80011b0:	2101      	movs	r1, #1
 80011b2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2224      	movs	r2, #36	; 0x24
 80011b8:	2100      	movs	r1, #0
 80011ba:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d004      	beq.n	80011ce <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011c8:	687a      	ldr	r2, [r7, #4]
 80011ca:	0010      	movs	r0, r2
 80011cc:	4798      	blx	r3
    }
  }
  return status;
 80011ce:	230f      	movs	r3, #15
 80011d0:	18fb      	adds	r3, r7, r3
 80011d2:	781b      	ldrb	r3, [r3, #0]
}
 80011d4:	0018      	movs	r0, r3
 80011d6:	46bd      	mov	sp, r7
 80011d8:	b004      	add	sp, #16
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	fffffeff 	.word	0xfffffeff
 80011e0:	40020000 	.word	0x40020000

080011e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b086      	sub	sp, #24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011ee:	2300      	movs	r3, #0
 80011f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011f2:	e147      	b.n	8001484 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2101      	movs	r1, #1
 80011fa:	697a      	ldr	r2, [r7, #20]
 80011fc:	4091      	lsls	r1, r2
 80011fe:	000a      	movs	r2, r1
 8001200:	4013      	ands	r3, r2
 8001202:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d100      	bne.n	800120c <HAL_GPIO_Init+0x28>
 800120a:	e138      	b.n	800147e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	2203      	movs	r2, #3
 8001212:	4013      	ands	r3, r2
 8001214:	2b01      	cmp	r3, #1
 8001216:	d005      	beq.n	8001224 <HAL_GPIO_Init+0x40>
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	2203      	movs	r2, #3
 800121e:	4013      	ands	r3, r2
 8001220:	2b02      	cmp	r3, #2
 8001222:	d130      	bne.n	8001286 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	2203      	movs	r2, #3
 8001230:	409a      	lsls	r2, r3
 8001232:	0013      	movs	r3, r2
 8001234:	43da      	mvns	r2, r3
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	4013      	ands	r3, r2
 800123a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	68da      	ldr	r2, [r3, #12]
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	409a      	lsls	r2, r3
 8001246:	0013      	movs	r3, r2
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	4313      	orrs	r3, r2
 800124c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	693a      	ldr	r2, [r7, #16]
 8001252:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800125a:	2201      	movs	r2, #1
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	409a      	lsls	r2, r3
 8001260:	0013      	movs	r3, r2
 8001262:	43da      	mvns	r2, r3
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	4013      	ands	r3, r2
 8001268:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	091b      	lsrs	r3, r3, #4
 8001270:	2201      	movs	r2, #1
 8001272:	401a      	ands	r2, r3
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	409a      	lsls	r2, r3
 8001278:	0013      	movs	r3, r2
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	4313      	orrs	r3, r2
 800127e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	2203      	movs	r2, #3
 800128c:	4013      	ands	r3, r2
 800128e:	2b03      	cmp	r3, #3
 8001290:	d017      	beq.n	80012c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	68db      	ldr	r3, [r3, #12]
 8001296:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	2203      	movs	r2, #3
 800129e:	409a      	lsls	r2, r3
 80012a0:	0013      	movs	r3, r2
 80012a2:	43da      	mvns	r2, r3
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	4013      	ands	r3, r2
 80012a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	689a      	ldr	r2, [r3, #8]
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	409a      	lsls	r2, r3
 80012b4:	0013      	movs	r3, r2
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	2203      	movs	r2, #3
 80012c8:	4013      	ands	r3, r2
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d123      	bne.n	8001316 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	08da      	lsrs	r2, r3, #3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	3208      	adds	r2, #8
 80012d6:	0092      	lsls	r2, r2, #2
 80012d8:	58d3      	ldr	r3, [r2, r3]
 80012da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	2207      	movs	r2, #7
 80012e0:	4013      	ands	r3, r2
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	220f      	movs	r2, #15
 80012e6:	409a      	lsls	r2, r3
 80012e8:	0013      	movs	r3, r2
 80012ea:	43da      	mvns	r2, r3
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	4013      	ands	r3, r2
 80012f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	691a      	ldr	r2, [r3, #16]
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	2107      	movs	r1, #7
 80012fa:	400b      	ands	r3, r1
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	409a      	lsls	r2, r3
 8001300:	0013      	movs	r3, r2
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	4313      	orrs	r3, r2
 8001306:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	08da      	lsrs	r2, r3, #3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	3208      	adds	r2, #8
 8001310:	0092      	lsls	r2, r2, #2
 8001312:	6939      	ldr	r1, [r7, #16]
 8001314:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	2203      	movs	r2, #3
 8001322:	409a      	lsls	r2, r3
 8001324:	0013      	movs	r3, r2
 8001326:	43da      	mvns	r2, r3
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	4013      	ands	r3, r2
 800132c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	2203      	movs	r2, #3
 8001334:	401a      	ands	r2, r3
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	409a      	lsls	r2, r3
 800133c:	0013      	movs	r3, r2
 800133e:	693a      	ldr	r2, [r7, #16]
 8001340:	4313      	orrs	r3, r2
 8001342:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685a      	ldr	r2, [r3, #4]
 800134e:	23c0      	movs	r3, #192	; 0xc0
 8001350:	029b      	lsls	r3, r3, #10
 8001352:	4013      	ands	r3, r2
 8001354:	d100      	bne.n	8001358 <HAL_GPIO_Init+0x174>
 8001356:	e092      	b.n	800147e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001358:	4a50      	ldr	r2, [pc, #320]	; (800149c <HAL_GPIO_Init+0x2b8>)
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	089b      	lsrs	r3, r3, #2
 800135e:	3318      	adds	r3, #24
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	589b      	ldr	r3, [r3, r2]
 8001364:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	2203      	movs	r2, #3
 800136a:	4013      	ands	r3, r2
 800136c:	00db      	lsls	r3, r3, #3
 800136e:	220f      	movs	r2, #15
 8001370:	409a      	lsls	r2, r3
 8001372:	0013      	movs	r3, r2
 8001374:	43da      	mvns	r2, r3
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	4013      	ands	r3, r2
 800137a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800137c:	687a      	ldr	r2, [r7, #4]
 800137e:	23a0      	movs	r3, #160	; 0xa0
 8001380:	05db      	lsls	r3, r3, #23
 8001382:	429a      	cmp	r2, r3
 8001384:	d013      	beq.n	80013ae <HAL_GPIO_Init+0x1ca>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a45      	ldr	r2, [pc, #276]	; (80014a0 <HAL_GPIO_Init+0x2bc>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d00d      	beq.n	80013aa <HAL_GPIO_Init+0x1c6>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a44      	ldr	r2, [pc, #272]	; (80014a4 <HAL_GPIO_Init+0x2c0>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d007      	beq.n	80013a6 <HAL_GPIO_Init+0x1c2>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a43      	ldr	r2, [pc, #268]	; (80014a8 <HAL_GPIO_Init+0x2c4>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d101      	bne.n	80013a2 <HAL_GPIO_Init+0x1be>
 800139e:	2303      	movs	r3, #3
 80013a0:	e006      	b.n	80013b0 <HAL_GPIO_Init+0x1cc>
 80013a2:	2305      	movs	r3, #5
 80013a4:	e004      	b.n	80013b0 <HAL_GPIO_Init+0x1cc>
 80013a6:	2302      	movs	r3, #2
 80013a8:	e002      	b.n	80013b0 <HAL_GPIO_Init+0x1cc>
 80013aa:	2301      	movs	r3, #1
 80013ac:	e000      	b.n	80013b0 <HAL_GPIO_Init+0x1cc>
 80013ae:	2300      	movs	r3, #0
 80013b0:	697a      	ldr	r2, [r7, #20]
 80013b2:	2103      	movs	r1, #3
 80013b4:	400a      	ands	r2, r1
 80013b6:	00d2      	lsls	r2, r2, #3
 80013b8:	4093      	lsls	r3, r2
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	4313      	orrs	r3, r2
 80013be:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80013c0:	4936      	ldr	r1, [pc, #216]	; (800149c <HAL_GPIO_Init+0x2b8>)
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	089b      	lsrs	r3, r3, #2
 80013c6:	3318      	adds	r3, #24
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013ce:	4b33      	ldr	r3, [pc, #204]	; (800149c <HAL_GPIO_Init+0x2b8>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	43da      	mvns	r2, r3
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	4013      	ands	r3, r2
 80013dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685a      	ldr	r2, [r3, #4]
 80013e2:	2380      	movs	r3, #128	; 0x80
 80013e4:	035b      	lsls	r3, r3, #13
 80013e6:	4013      	ands	r3, r2
 80013e8:	d003      	beq.n	80013f2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013f2:	4b2a      	ldr	r3, [pc, #168]	; (800149c <HAL_GPIO_Init+0x2b8>)
 80013f4:	693a      	ldr	r2, [r7, #16]
 80013f6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80013f8:	4b28      	ldr	r3, [pc, #160]	; (800149c <HAL_GPIO_Init+0x2b8>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	43da      	mvns	r2, r3
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	4013      	ands	r3, r2
 8001406:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685a      	ldr	r2, [r3, #4]
 800140c:	2380      	movs	r3, #128	; 0x80
 800140e:	039b      	lsls	r3, r3, #14
 8001410:	4013      	ands	r3, r2
 8001412:	d003      	beq.n	800141c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001414:	693a      	ldr	r2, [r7, #16]
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	4313      	orrs	r3, r2
 800141a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800141c:	4b1f      	ldr	r3, [pc, #124]	; (800149c <HAL_GPIO_Init+0x2b8>)
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001422:	4a1e      	ldr	r2, [pc, #120]	; (800149c <HAL_GPIO_Init+0x2b8>)
 8001424:	2384      	movs	r3, #132	; 0x84
 8001426:	58d3      	ldr	r3, [r2, r3]
 8001428:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	43da      	mvns	r2, r3
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	4013      	ands	r3, r2
 8001432:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685a      	ldr	r2, [r3, #4]
 8001438:	2380      	movs	r3, #128	; 0x80
 800143a:	029b      	lsls	r3, r3, #10
 800143c:	4013      	ands	r3, r2
 800143e:	d003      	beq.n	8001448 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001440:	693a      	ldr	r2, [r7, #16]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	4313      	orrs	r3, r2
 8001446:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001448:	4914      	ldr	r1, [pc, #80]	; (800149c <HAL_GPIO_Init+0x2b8>)
 800144a:	2284      	movs	r2, #132	; 0x84
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001450:	4a12      	ldr	r2, [pc, #72]	; (800149c <HAL_GPIO_Init+0x2b8>)
 8001452:	2380      	movs	r3, #128	; 0x80
 8001454:	58d3      	ldr	r3, [r2, r3]
 8001456:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	43da      	mvns	r2, r3
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	4013      	ands	r3, r2
 8001460:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685a      	ldr	r2, [r3, #4]
 8001466:	2380      	movs	r3, #128	; 0x80
 8001468:	025b      	lsls	r3, r3, #9
 800146a:	4013      	ands	r3, r2
 800146c:	d003      	beq.n	8001476 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	4313      	orrs	r3, r2
 8001474:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001476:	4909      	ldr	r1, [pc, #36]	; (800149c <HAL_GPIO_Init+0x2b8>)
 8001478:	2280      	movs	r2, #128	; 0x80
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	3301      	adds	r3, #1
 8001482:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	40da      	lsrs	r2, r3
 800148c:	1e13      	subs	r3, r2, #0
 800148e:	d000      	beq.n	8001492 <HAL_GPIO_Init+0x2ae>
 8001490:	e6b0      	b.n	80011f4 <HAL_GPIO_Init+0x10>
  }
}
 8001492:	46c0      	nop			; (mov r8, r8)
 8001494:	46c0      	nop			; (mov r8, r8)
 8001496:	46bd      	mov	sp, r7
 8001498:	b006      	add	sp, #24
 800149a:	bd80      	pop	{r7, pc}
 800149c:	40021800 	.word	0x40021800
 80014a0:	50000400 	.word	0x50000400
 80014a4:	50000800 	.word	0x50000800
 80014a8:	50000c00 	.word	0x50000c00

080014ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	0008      	movs	r0, r1
 80014b6:	0011      	movs	r1, r2
 80014b8:	1cbb      	adds	r3, r7, #2
 80014ba:	1c02      	adds	r2, r0, #0
 80014bc:	801a      	strh	r2, [r3, #0]
 80014be:	1c7b      	adds	r3, r7, #1
 80014c0:	1c0a      	adds	r2, r1, #0
 80014c2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014c4:	1c7b      	adds	r3, r7, #1
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d004      	beq.n	80014d6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014cc:	1cbb      	adds	r3, r7, #2
 80014ce:	881a      	ldrh	r2, [r3, #0]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014d4:	e003      	b.n	80014de <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014d6:	1cbb      	adds	r3, r7, #2
 80014d8:	881a      	ldrh	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014de:	46c0      	nop			; (mov r8, r8)
 80014e0:	46bd      	mov	sp, r7
 80014e2:	b002      	add	sp, #8
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b084      	sub	sp, #16
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
 80014ee:	000a      	movs	r2, r1
 80014f0:	1cbb      	adds	r3, r7, #2
 80014f2:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	695b      	ldr	r3, [r3, #20]
 80014f8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014fa:	1cbb      	adds	r3, r7, #2
 80014fc:	881b      	ldrh	r3, [r3, #0]
 80014fe:	68fa      	ldr	r2, [r7, #12]
 8001500:	4013      	ands	r3, r2
 8001502:	041a      	lsls	r2, r3, #16
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	43db      	mvns	r3, r3
 8001508:	1cb9      	adds	r1, r7, #2
 800150a:	8809      	ldrh	r1, [r1, #0]
 800150c:	400b      	ands	r3, r1
 800150e:	431a      	orrs	r2, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	619a      	str	r2, [r3, #24]
}
 8001514:	46c0      	nop			; (mov r8, r8)
 8001516:	46bd      	mov	sp, r7
 8001518:	b004      	add	sp, #16
 800151a:	bd80      	pop	{r7, pc}

0800151c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	0002      	movs	r2, r0
 8001524:	1dbb      	adds	r3, r7, #6
 8001526:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8001528:	4b10      	ldr	r3, [pc, #64]	; (800156c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	1dba      	adds	r2, r7, #6
 800152e:	8812      	ldrh	r2, [r2, #0]
 8001530:	4013      	ands	r3, r2
 8001532:	d008      	beq.n	8001546 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8001534:	4b0d      	ldr	r3, [pc, #52]	; (800156c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001536:	1dba      	adds	r2, r7, #6
 8001538:	8812      	ldrh	r2, [r2, #0]
 800153a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800153c:	1dbb      	adds	r3, r7, #6
 800153e:	881b      	ldrh	r3, [r3, #0]
 8001540:	0018      	movs	r0, r3
 8001542:	f000 f815 	bl	8001570 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8001546:	4b09      	ldr	r3, [pc, #36]	; (800156c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001548:	691b      	ldr	r3, [r3, #16]
 800154a:	1dba      	adds	r2, r7, #6
 800154c:	8812      	ldrh	r2, [r2, #0]
 800154e:	4013      	ands	r3, r2
 8001550:	d008      	beq.n	8001564 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8001552:	4b06      	ldr	r3, [pc, #24]	; (800156c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001554:	1dba      	adds	r2, r7, #6
 8001556:	8812      	ldrh	r2, [r2, #0]
 8001558:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800155a:	1dbb      	adds	r3, r7, #6
 800155c:	881b      	ldrh	r3, [r3, #0]
 800155e:	0018      	movs	r0, r3
 8001560:	f7ff fb58 	bl	8000c14 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8001564:	46c0      	nop			; (mov r8, r8)
 8001566:	46bd      	mov	sp, r7
 8001568:	b002      	add	sp, #8
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40021800 	.word	0x40021800

08001570 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	0002      	movs	r2, r0
 8001578:	1dbb      	adds	r3, r7, #6
 800157a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 800157c:	46c0      	nop			; (mov r8, r8)
 800157e:	46bd      	mov	sp, r7
 8001580:	b002      	add	sp, #8
 8001582:	bd80      	pop	{r7, pc}

08001584 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d101      	bne.n	8001596 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e03d      	b.n	8001612 <HAL_IWDG_Init+0x8e>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a20      	ldr	r2, [pc, #128]	; (800161c <HAL_IWDG_Init+0x98>)
 800159c:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a1f      	ldr	r2, [pc, #124]	; (8001620 <HAL_IWDG_Init+0x9c>)
 80015a4:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	6852      	ldr	r2, [r2, #4]
 80015ae:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	6892      	ldr	r2, [r2, #8]
 80015b8:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80015ba:	f7ff fc49 	bl	8000e50 <HAL_GetTick>
 80015be:	0003      	movs	r3, r0
 80015c0:	60fb      	str	r3, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80015c2:	e00e      	b.n	80015e2 <HAL_IWDG_Init+0x5e>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80015c4:	f7ff fc44 	bl	8000e50 <HAL_GetTick>
 80015c8:	0002      	movs	r2, r0
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b31      	cmp	r3, #49	; 0x31
 80015d0:	d907      	bls.n	80015e2 <HAL_IWDG_Init+0x5e>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	2207      	movs	r2, #7
 80015da:	4013      	ands	r3, r2
 80015dc:	d001      	beq.n	80015e2 <HAL_IWDG_Init+0x5e>
      {
        return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e017      	b.n	8001612 <HAL_IWDG_Init+0x8e>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	2207      	movs	r2, #7
 80015ea:	4013      	ands	r3, r2
 80015ec:	d1ea      	bne.n	80015c4 <HAL_IWDG_Init+0x40>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	691a      	ldr	r2, [r3, #16]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d005      	beq.n	8001608 <HAL_IWDG_Init+0x84>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	68d2      	ldr	r2, [r2, #12]
 8001604:	611a      	str	r2, [r3, #16]
 8001606:	e003      	b.n	8001610 <HAL_IWDG_Init+0x8c>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a05      	ldr	r2, [pc, #20]	; (8001624 <HAL_IWDG_Init+0xa0>)
 800160e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001610:	2300      	movs	r3, #0
}
 8001612:	0018      	movs	r0, r3
 8001614:	46bd      	mov	sp, r7
 8001616:	b004      	add	sp, #16
 8001618:	bd80      	pop	{r7, pc}
 800161a:	46c0      	nop			; (mov r8, r8)
 800161c:	0000cccc 	.word	0x0000cccc
 8001620:	00005555 	.word	0x00005555
 8001624:	0000aaaa 	.word	0x0000aaaa

08001628 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a03      	ldr	r2, [pc, #12]	; (8001644 <HAL_IWDG_Refresh+0x1c>)
 8001636:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001638:	2300      	movs	r3, #0
}
 800163a:	0018      	movs	r0, r3
 800163c:	46bd      	mov	sp, r7
 800163e:	b002      	add	sp, #8
 8001640:	bd80      	pop	{r7, pc}
 8001642:	46c0      	nop			; (mov r8, r8)
 8001644:	0000aaaa 	.word	0x0000aaaa

08001648 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001650:	4b19      	ldr	r3, [pc, #100]	; (80016b8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a19      	ldr	r2, [pc, #100]	; (80016bc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001656:	4013      	ands	r3, r2
 8001658:	0019      	movs	r1, r3
 800165a:	4b17      	ldr	r3, [pc, #92]	; (80016b8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	430a      	orrs	r2, r1
 8001660:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	2380      	movs	r3, #128	; 0x80
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	429a      	cmp	r2, r3
 800166a:	d11f      	bne.n	80016ac <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800166c:	4b14      	ldr	r3, [pc, #80]	; (80016c0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	0013      	movs	r3, r2
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	189b      	adds	r3, r3, r2
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	4912      	ldr	r1, [pc, #72]	; (80016c4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800167a:	0018      	movs	r0, r3
 800167c:	f7fe fd42 	bl	8000104 <__udivsi3>
 8001680:	0003      	movs	r3, r0
 8001682:	3301      	adds	r3, #1
 8001684:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001686:	e008      	b.n	800169a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d003      	beq.n	8001696 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	3b01      	subs	r3, #1
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	e001      	b.n	800169a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e009      	b.n	80016ae <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800169a:	4b07      	ldr	r3, [pc, #28]	; (80016b8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800169c:	695a      	ldr	r2, [r3, #20]
 800169e:	2380      	movs	r3, #128	; 0x80
 80016a0:	00db      	lsls	r3, r3, #3
 80016a2:	401a      	ands	r2, r3
 80016a4:	2380      	movs	r3, #128	; 0x80
 80016a6:	00db      	lsls	r3, r3, #3
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d0ed      	beq.n	8001688 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	0018      	movs	r0, r3
 80016b0:	46bd      	mov	sp, r7
 80016b2:	b004      	add	sp, #16
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	46c0      	nop			; (mov r8, r8)
 80016b8:	40007000 	.word	0x40007000
 80016bc:	fffff9ff 	.word	0xfffff9ff
 80016c0:	20000000 	.word	0x20000000
 80016c4:	000f4240 	.word	0x000f4240

080016c8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80016cc:	4b03      	ldr	r3, [pc, #12]	; (80016dc <LL_RCC_GetAPB1Prescaler+0x14>)
 80016ce:	689a      	ldr	r2, [r3, #8]
 80016d0:	23e0      	movs	r3, #224	; 0xe0
 80016d2:	01db      	lsls	r3, r3, #7
 80016d4:	4013      	ands	r3, r2
}
 80016d6:	0018      	movs	r0, r3
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	40021000 	.word	0x40021000

080016e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b088      	sub	sp, #32
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d101      	bne.n	80016f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e2fe      	b.n	8001cf0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2201      	movs	r2, #1
 80016f8:	4013      	ands	r3, r2
 80016fa:	d100      	bne.n	80016fe <HAL_RCC_OscConfig+0x1e>
 80016fc:	e07c      	b.n	80017f8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016fe:	4bc3      	ldr	r3, [pc, #780]	; (8001a0c <HAL_RCC_OscConfig+0x32c>)
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	2238      	movs	r2, #56	; 0x38
 8001704:	4013      	ands	r3, r2
 8001706:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001708:	4bc0      	ldr	r3, [pc, #768]	; (8001a0c <HAL_RCC_OscConfig+0x32c>)
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	2203      	movs	r2, #3
 800170e:	4013      	ands	r3, r2
 8001710:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	2b10      	cmp	r3, #16
 8001716:	d102      	bne.n	800171e <HAL_RCC_OscConfig+0x3e>
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	2b03      	cmp	r3, #3
 800171c:	d002      	beq.n	8001724 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800171e:	69bb      	ldr	r3, [r7, #24]
 8001720:	2b08      	cmp	r3, #8
 8001722:	d10b      	bne.n	800173c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001724:	4bb9      	ldr	r3, [pc, #740]	; (8001a0c <HAL_RCC_OscConfig+0x32c>)
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	2380      	movs	r3, #128	; 0x80
 800172a:	029b      	lsls	r3, r3, #10
 800172c:	4013      	ands	r3, r2
 800172e:	d062      	beq.n	80017f6 <HAL_RCC_OscConfig+0x116>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d15e      	bne.n	80017f6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e2d9      	b.n	8001cf0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	685a      	ldr	r2, [r3, #4]
 8001740:	2380      	movs	r3, #128	; 0x80
 8001742:	025b      	lsls	r3, r3, #9
 8001744:	429a      	cmp	r2, r3
 8001746:	d107      	bne.n	8001758 <HAL_RCC_OscConfig+0x78>
 8001748:	4bb0      	ldr	r3, [pc, #704]	; (8001a0c <HAL_RCC_OscConfig+0x32c>)
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	4baf      	ldr	r3, [pc, #700]	; (8001a0c <HAL_RCC_OscConfig+0x32c>)
 800174e:	2180      	movs	r1, #128	; 0x80
 8001750:	0249      	lsls	r1, r1, #9
 8001752:	430a      	orrs	r2, r1
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	e020      	b.n	800179a <HAL_RCC_OscConfig+0xba>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685a      	ldr	r2, [r3, #4]
 800175c:	23a0      	movs	r3, #160	; 0xa0
 800175e:	02db      	lsls	r3, r3, #11
 8001760:	429a      	cmp	r2, r3
 8001762:	d10e      	bne.n	8001782 <HAL_RCC_OscConfig+0xa2>
 8001764:	4ba9      	ldr	r3, [pc, #676]	; (8001a0c <HAL_RCC_OscConfig+0x32c>)
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	4ba8      	ldr	r3, [pc, #672]	; (8001a0c <HAL_RCC_OscConfig+0x32c>)
 800176a:	2180      	movs	r1, #128	; 0x80
 800176c:	02c9      	lsls	r1, r1, #11
 800176e:	430a      	orrs	r2, r1
 8001770:	601a      	str	r2, [r3, #0]
 8001772:	4ba6      	ldr	r3, [pc, #664]	; (8001a0c <HAL_RCC_OscConfig+0x32c>)
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	4ba5      	ldr	r3, [pc, #660]	; (8001a0c <HAL_RCC_OscConfig+0x32c>)
 8001778:	2180      	movs	r1, #128	; 0x80
 800177a:	0249      	lsls	r1, r1, #9
 800177c:	430a      	orrs	r2, r1
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	e00b      	b.n	800179a <HAL_RCC_OscConfig+0xba>
 8001782:	4ba2      	ldr	r3, [pc, #648]	; (8001a0c <HAL_RCC_OscConfig+0x32c>)
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	4ba1      	ldr	r3, [pc, #644]	; (8001a0c <HAL_RCC_OscConfig+0x32c>)
 8001788:	49a1      	ldr	r1, [pc, #644]	; (8001a10 <HAL_RCC_OscConfig+0x330>)
 800178a:	400a      	ands	r2, r1
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	4b9f      	ldr	r3, [pc, #636]	; (8001a0c <HAL_RCC_OscConfig+0x32c>)
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	4b9e      	ldr	r3, [pc, #632]	; (8001a0c <HAL_RCC_OscConfig+0x32c>)
 8001794:	499f      	ldr	r1, [pc, #636]	; (8001a14 <HAL_RCC_OscConfig+0x334>)
 8001796:	400a      	ands	r2, r1
 8001798:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d014      	beq.n	80017cc <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a2:	f7ff fb55 	bl	8000e50 <HAL_GetTick>
 80017a6:	0003      	movs	r3, r0
 80017a8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017aa:	e008      	b.n	80017be <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017ac:	f7ff fb50 	bl	8000e50 <HAL_GetTick>
 80017b0:	0002      	movs	r2, r0
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b64      	cmp	r3, #100	; 0x64
 80017b8:	d901      	bls.n	80017be <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e298      	b.n	8001cf0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017be:	4b93      	ldr	r3, [pc, #588]	; (8001a0c <HAL_RCC_OscConfig+0x32c>)
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	2380      	movs	r3, #128	; 0x80
 80017c4:	029b      	lsls	r3, r3, #10
 80017c6:	4013      	ands	r3, r2
 80017c8:	d0f0      	beq.n	80017ac <HAL_RCC_OscConfig+0xcc>
 80017ca:	e015      	b.n	80017f8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017cc:	f7ff fb40 	bl	8000e50 <HAL_GetTick>
 80017d0:	0003      	movs	r3, r0
 80017d2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017d4:	e008      	b.n	80017e8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017d6:	f7ff fb3b 	bl	8000e50 <HAL_GetTick>
 80017da:	0002      	movs	r2, r0
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	2b64      	cmp	r3, #100	; 0x64
 80017e2:	d901      	bls.n	80017e8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e283      	b.n	8001cf0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017e8:	4b88      	ldr	r3, [pc, #544]	; (8001a0c <HAL_RCC_OscConfig+0x32c>)
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	2380      	movs	r3, #128	; 0x80
 80017ee:	029b      	lsls	r3, r3, #10
 80017f0:	4013      	ands	r3, r2
 80017f2:	d1f0      	bne.n	80017d6 <HAL_RCC_OscConfig+0xf6>
 80017f4:	e000      	b.n	80017f8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017f6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2202      	movs	r2, #2
 80017fe:	4013      	ands	r3, r2
 8001800:	d100      	bne.n	8001804 <HAL_RCC_OscConfig+0x124>
 8001802:	e099      	b.n	8001938 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001804:	4b81      	ldr	r3, [pc, #516]	; (8001a0c <HAL_RCC_OscConfig+0x32c>)
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	2238      	movs	r2, #56	; 0x38
 800180a:	4013      	ands	r3, r2
 800180c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800180e:	4b7f      	ldr	r3, [pc, #508]	; (8001a0c <HAL_RCC_OscConfig+0x32c>)
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	2203      	movs	r2, #3
 8001814:	4013      	ands	r3, r2
 8001816:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	2b10      	cmp	r3, #16
 800181c:	d102      	bne.n	8001824 <HAL_RCC_OscConfig+0x144>
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	2b02      	cmp	r3, #2
 8001822:	d002      	beq.n	800182a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d135      	bne.n	8001896 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800182a:	4b78      	ldr	r3, [pc, #480]	; (8001a0c <HAL_RCC_OscConfig+0x32c>)
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	2380      	movs	r3, #128	; 0x80
 8001830:	00db      	lsls	r3, r3, #3
 8001832:	4013      	ands	r3, r2
 8001834:	d005      	beq.n	8001842 <HAL_RCC_OscConfig+0x162>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d101      	bne.n	8001842 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e256      	b.n	8001cf0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001842:	4b72      	ldr	r3, [pc, #456]	; (8001a0c <HAL_RCC_OscConfig+0x32c>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	4a74      	ldr	r2, [pc, #464]	; (8001a18 <HAL_RCC_OscConfig+0x338>)
 8001848:	4013      	ands	r3, r2
 800184a:	0019      	movs	r1, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	695b      	ldr	r3, [r3, #20]
 8001850:	021a      	lsls	r2, r3, #8
 8001852:	4b6e      	ldr	r3, [pc, #440]	; (8001a0c <HAL_RCC_OscConfig+0x32c>)
 8001854:	430a      	orrs	r2, r1
 8001856:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d112      	bne.n	8001884 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800185e:	4b6b      	ldr	r3, [pc, #428]	; (8001a0c <HAL_RCC_OscConfig+0x32c>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a6e      	ldr	r2, [pc, #440]	; (8001a1c <HAL_RCC_OscConfig+0x33c>)
 8001864:	4013      	ands	r3, r2
 8001866:	0019      	movs	r1, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	691a      	ldr	r2, [r3, #16]
 800186c:	4b67      	ldr	r3, [pc, #412]	; (8001a0c <HAL_RCC_OscConfig+0x32c>)
 800186e:	430a      	orrs	r2, r1
 8001870:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001872:	4b66      	ldr	r3, [pc, #408]	; (8001a0c <HAL_RCC_OscConfig+0x32c>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	0adb      	lsrs	r3, r3, #11
 8001878:	2207      	movs	r2, #7
 800187a:	4013      	ands	r3, r2
 800187c:	4a68      	ldr	r2, [pc, #416]	; (8001a20 <HAL_RCC_OscConfig+0x340>)
 800187e:	40da      	lsrs	r2, r3
 8001880:	4b68      	ldr	r3, [pc, #416]	; (8001a24 <HAL_RCC_OscConfig+0x344>)
 8001882:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001884:	4b68      	ldr	r3, [pc, #416]	; (8001a28 <HAL_RCC_OscConfig+0x348>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	0018      	movs	r0, r3
 800188a:	f7ff fa85 	bl	8000d98 <HAL_InitTick>
 800188e:	1e03      	subs	r3, r0, #0
 8001890:	d051      	beq.n	8001936 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e22c      	b.n	8001cf0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	68db      	ldr	r3, [r3, #12]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d030      	beq.n	8001900 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800189e:	4b5b      	ldr	r3, [pc, #364]	; (8001a0c <HAL_RCC_OscConfig+0x32c>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a5e      	ldr	r2, [pc, #376]	; (8001a1c <HAL_RCC_OscConfig+0x33c>)
 80018a4:	4013      	ands	r3, r2
 80018a6:	0019      	movs	r1, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	691a      	ldr	r2, [r3, #16]
 80018ac:	4b57      	ldr	r3, [pc, #348]	; (8001a0c <HAL_RCC_OscConfig+0x32c>)
 80018ae:	430a      	orrs	r2, r1
 80018b0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80018b2:	4b56      	ldr	r3, [pc, #344]	; (8001a0c <HAL_RCC_OscConfig+0x32c>)
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	4b55      	ldr	r3, [pc, #340]	; (8001a0c <HAL_RCC_OscConfig+0x32c>)
 80018b8:	2180      	movs	r1, #128	; 0x80
 80018ba:	0049      	lsls	r1, r1, #1
 80018bc:	430a      	orrs	r2, r1
 80018be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c0:	f7ff fac6 	bl	8000e50 <HAL_GetTick>
 80018c4:	0003      	movs	r3, r0
 80018c6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018c8:	e008      	b.n	80018dc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018ca:	f7ff fac1 	bl	8000e50 <HAL_GetTick>
 80018ce:	0002      	movs	r2, r0
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d901      	bls.n	80018dc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e209      	b.n	8001cf0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018dc:	4b4b      	ldr	r3, [pc, #300]	; (8001a0c <HAL_RCC_OscConfig+0x32c>)
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	2380      	movs	r3, #128	; 0x80
 80018e2:	00db      	lsls	r3, r3, #3
 80018e4:	4013      	ands	r3, r2
 80018e6:	d0f0      	beq.n	80018ca <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018e8:	4b48      	ldr	r3, [pc, #288]	; (8001a0c <HAL_RCC_OscConfig+0x32c>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	4a4a      	ldr	r2, [pc, #296]	; (8001a18 <HAL_RCC_OscConfig+0x338>)
 80018ee:	4013      	ands	r3, r2
 80018f0:	0019      	movs	r1, r3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	695b      	ldr	r3, [r3, #20]
 80018f6:	021a      	lsls	r2, r3, #8
 80018f8:	4b44      	ldr	r3, [pc, #272]	; (8001a0c <HAL_RCC_OscConfig+0x32c>)
 80018fa:	430a      	orrs	r2, r1
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	e01b      	b.n	8001938 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001900:	4b42      	ldr	r3, [pc, #264]	; (8001a0c <HAL_RCC_OscConfig+0x32c>)
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	4b41      	ldr	r3, [pc, #260]	; (8001a0c <HAL_RCC_OscConfig+0x32c>)
 8001906:	4949      	ldr	r1, [pc, #292]	; (8001a2c <HAL_RCC_OscConfig+0x34c>)
 8001908:	400a      	ands	r2, r1
 800190a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800190c:	f7ff faa0 	bl	8000e50 <HAL_GetTick>
 8001910:	0003      	movs	r3, r0
 8001912:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001914:	e008      	b.n	8001928 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001916:	f7ff fa9b 	bl	8000e50 <HAL_GetTick>
 800191a:	0002      	movs	r2, r0
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	2b02      	cmp	r3, #2
 8001922:	d901      	bls.n	8001928 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e1e3      	b.n	8001cf0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001928:	4b38      	ldr	r3, [pc, #224]	; (8001a0c <HAL_RCC_OscConfig+0x32c>)
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	2380      	movs	r3, #128	; 0x80
 800192e:	00db      	lsls	r3, r3, #3
 8001930:	4013      	ands	r3, r2
 8001932:	d1f0      	bne.n	8001916 <HAL_RCC_OscConfig+0x236>
 8001934:	e000      	b.n	8001938 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001936:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2208      	movs	r2, #8
 800193e:	4013      	ands	r3, r2
 8001940:	d047      	beq.n	80019d2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001942:	4b32      	ldr	r3, [pc, #200]	; (8001a0c <HAL_RCC_OscConfig+0x32c>)
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	2238      	movs	r2, #56	; 0x38
 8001948:	4013      	ands	r3, r2
 800194a:	2b18      	cmp	r3, #24
 800194c:	d10a      	bne.n	8001964 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800194e:	4b2f      	ldr	r3, [pc, #188]	; (8001a0c <HAL_RCC_OscConfig+0x32c>)
 8001950:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001952:	2202      	movs	r2, #2
 8001954:	4013      	ands	r3, r2
 8001956:	d03c      	beq.n	80019d2 <HAL_RCC_OscConfig+0x2f2>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d138      	bne.n	80019d2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e1c5      	b.n	8001cf0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d019      	beq.n	80019a0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800196c:	4b27      	ldr	r3, [pc, #156]	; (8001a0c <HAL_RCC_OscConfig+0x32c>)
 800196e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001970:	4b26      	ldr	r3, [pc, #152]	; (8001a0c <HAL_RCC_OscConfig+0x32c>)
 8001972:	2101      	movs	r1, #1
 8001974:	430a      	orrs	r2, r1
 8001976:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001978:	f7ff fa6a 	bl	8000e50 <HAL_GetTick>
 800197c:	0003      	movs	r3, r0
 800197e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001980:	e008      	b.n	8001994 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001982:	f7ff fa65 	bl	8000e50 <HAL_GetTick>
 8001986:	0002      	movs	r2, r0
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	2b02      	cmp	r3, #2
 800198e:	d901      	bls.n	8001994 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001990:	2303      	movs	r3, #3
 8001992:	e1ad      	b.n	8001cf0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001994:	4b1d      	ldr	r3, [pc, #116]	; (8001a0c <HAL_RCC_OscConfig+0x32c>)
 8001996:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001998:	2202      	movs	r2, #2
 800199a:	4013      	ands	r3, r2
 800199c:	d0f1      	beq.n	8001982 <HAL_RCC_OscConfig+0x2a2>
 800199e:	e018      	b.n	80019d2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80019a0:	4b1a      	ldr	r3, [pc, #104]	; (8001a0c <HAL_RCC_OscConfig+0x32c>)
 80019a2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80019a4:	4b19      	ldr	r3, [pc, #100]	; (8001a0c <HAL_RCC_OscConfig+0x32c>)
 80019a6:	2101      	movs	r1, #1
 80019a8:	438a      	bics	r2, r1
 80019aa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ac:	f7ff fa50 	bl	8000e50 <HAL_GetTick>
 80019b0:	0003      	movs	r3, r0
 80019b2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019b4:	e008      	b.n	80019c8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019b6:	f7ff fa4b 	bl	8000e50 <HAL_GetTick>
 80019ba:	0002      	movs	r2, r0
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d901      	bls.n	80019c8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e193      	b.n	8001cf0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019c8:	4b10      	ldr	r3, [pc, #64]	; (8001a0c <HAL_RCC_OscConfig+0x32c>)
 80019ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019cc:	2202      	movs	r2, #2
 80019ce:	4013      	ands	r3, r2
 80019d0:	d1f1      	bne.n	80019b6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2204      	movs	r2, #4
 80019d8:	4013      	ands	r3, r2
 80019da:	d100      	bne.n	80019de <HAL_RCC_OscConfig+0x2fe>
 80019dc:	e0c6      	b.n	8001b6c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019de:	231f      	movs	r3, #31
 80019e0:	18fb      	adds	r3, r7, r3
 80019e2:	2200      	movs	r2, #0
 80019e4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80019e6:	4b09      	ldr	r3, [pc, #36]	; (8001a0c <HAL_RCC_OscConfig+0x32c>)
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	2238      	movs	r2, #56	; 0x38
 80019ec:	4013      	ands	r3, r2
 80019ee:	2b20      	cmp	r3, #32
 80019f0:	d11e      	bne.n	8001a30 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80019f2:	4b06      	ldr	r3, [pc, #24]	; (8001a0c <HAL_RCC_OscConfig+0x32c>)
 80019f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019f6:	2202      	movs	r2, #2
 80019f8:	4013      	ands	r3, r2
 80019fa:	d100      	bne.n	80019fe <HAL_RCC_OscConfig+0x31e>
 80019fc:	e0b6      	b.n	8001b6c <HAL_RCC_OscConfig+0x48c>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d000      	beq.n	8001a08 <HAL_RCC_OscConfig+0x328>
 8001a06:	e0b1      	b.n	8001b6c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e171      	b.n	8001cf0 <HAL_RCC_OscConfig+0x610>
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	fffeffff 	.word	0xfffeffff
 8001a14:	fffbffff 	.word	0xfffbffff
 8001a18:	ffff80ff 	.word	0xffff80ff
 8001a1c:	ffffc7ff 	.word	0xffffc7ff
 8001a20:	00f42400 	.word	0x00f42400
 8001a24:	20000000 	.word	0x20000000
 8001a28:	20000004 	.word	0x20000004
 8001a2c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001a30:	4bb1      	ldr	r3, [pc, #708]	; (8001cf8 <HAL_RCC_OscConfig+0x618>)
 8001a32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a34:	2380      	movs	r3, #128	; 0x80
 8001a36:	055b      	lsls	r3, r3, #21
 8001a38:	4013      	ands	r3, r2
 8001a3a:	d101      	bne.n	8001a40 <HAL_RCC_OscConfig+0x360>
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e000      	b.n	8001a42 <HAL_RCC_OscConfig+0x362>
 8001a40:	2300      	movs	r3, #0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d011      	beq.n	8001a6a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001a46:	4bac      	ldr	r3, [pc, #688]	; (8001cf8 <HAL_RCC_OscConfig+0x618>)
 8001a48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a4a:	4bab      	ldr	r3, [pc, #684]	; (8001cf8 <HAL_RCC_OscConfig+0x618>)
 8001a4c:	2180      	movs	r1, #128	; 0x80
 8001a4e:	0549      	lsls	r1, r1, #21
 8001a50:	430a      	orrs	r2, r1
 8001a52:	63da      	str	r2, [r3, #60]	; 0x3c
 8001a54:	4ba8      	ldr	r3, [pc, #672]	; (8001cf8 <HAL_RCC_OscConfig+0x618>)
 8001a56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a58:	2380      	movs	r3, #128	; 0x80
 8001a5a:	055b      	lsls	r3, r3, #21
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001a62:	231f      	movs	r3, #31
 8001a64:	18fb      	adds	r3, r7, r3
 8001a66:	2201      	movs	r2, #1
 8001a68:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a6a:	4ba4      	ldr	r3, [pc, #656]	; (8001cfc <HAL_RCC_OscConfig+0x61c>)
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	2380      	movs	r3, #128	; 0x80
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	4013      	ands	r3, r2
 8001a74:	d11a      	bne.n	8001aac <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a76:	4ba1      	ldr	r3, [pc, #644]	; (8001cfc <HAL_RCC_OscConfig+0x61c>)
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	4ba0      	ldr	r3, [pc, #640]	; (8001cfc <HAL_RCC_OscConfig+0x61c>)
 8001a7c:	2180      	movs	r1, #128	; 0x80
 8001a7e:	0049      	lsls	r1, r1, #1
 8001a80:	430a      	orrs	r2, r1
 8001a82:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001a84:	f7ff f9e4 	bl	8000e50 <HAL_GetTick>
 8001a88:	0003      	movs	r3, r0
 8001a8a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a8c:	e008      	b.n	8001aa0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a8e:	f7ff f9df 	bl	8000e50 <HAL_GetTick>
 8001a92:	0002      	movs	r2, r0
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d901      	bls.n	8001aa0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e127      	b.n	8001cf0 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001aa0:	4b96      	ldr	r3, [pc, #600]	; (8001cfc <HAL_RCC_OscConfig+0x61c>)
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	2380      	movs	r3, #128	; 0x80
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	d0f0      	beq.n	8001a8e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d106      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x3e2>
 8001ab4:	4b90      	ldr	r3, [pc, #576]	; (8001cf8 <HAL_RCC_OscConfig+0x618>)
 8001ab6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ab8:	4b8f      	ldr	r3, [pc, #572]	; (8001cf8 <HAL_RCC_OscConfig+0x618>)
 8001aba:	2101      	movs	r1, #1
 8001abc:	430a      	orrs	r2, r1
 8001abe:	65da      	str	r2, [r3, #92]	; 0x5c
 8001ac0:	e01c      	b.n	8001afc <HAL_RCC_OscConfig+0x41c>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	2b05      	cmp	r3, #5
 8001ac8:	d10c      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x404>
 8001aca:	4b8b      	ldr	r3, [pc, #556]	; (8001cf8 <HAL_RCC_OscConfig+0x618>)
 8001acc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ace:	4b8a      	ldr	r3, [pc, #552]	; (8001cf8 <HAL_RCC_OscConfig+0x618>)
 8001ad0:	2104      	movs	r1, #4
 8001ad2:	430a      	orrs	r2, r1
 8001ad4:	65da      	str	r2, [r3, #92]	; 0x5c
 8001ad6:	4b88      	ldr	r3, [pc, #544]	; (8001cf8 <HAL_RCC_OscConfig+0x618>)
 8001ad8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ada:	4b87      	ldr	r3, [pc, #540]	; (8001cf8 <HAL_RCC_OscConfig+0x618>)
 8001adc:	2101      	movs	r1, #1
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	65da      	str	r2, [r3, #92]	; 0x5c
 8001ae2:	e00b      	b.n	8001afc <HAL_RCC_OscConfig+0x41c>
 8001ae4:	4b84      	ldr	r3, [pc, #528]	; (8001cf8 <HAL_RCC_OscConfig+0x618>)
 8001ae6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ae8:	4b83      	ldr	r3, [pc, #524]	; (8001cf8 <HAL_RCC_OscConfig+0x618>)
 8001aea:	2101      	movs	r1, #1
 8001aec:	438a      	bics	r2, r1
 8001aee:	65da      	str	r2, [r3, #92]	; 0x5c
 8001af0:	4b81      	ldr	r3, [pc, #516]	; (8001cf8 <HAL_RCC_OscConfig+0x618>)
 8001af2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001af4:	4b80      	ldr	r3, [pc, #512]	; (8001cf8 <HAL_RCC_OscConfig+0x618>)
 8001af6:	2104      	movs	r1, #4
 8001af8:	438a      	bics	r2, r1
 8001afa:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d014      	beq.n	8001b2e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b04:	f7ff f9a4 	bl	8000e50 <HAL_GetTick>
 8001b08:	0003      	movs	r3, r0
 8001b0a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b0c:	e009      	b.n	8001b22 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b0e:	f7ff f99f 	bl	8000e50 <HAL_GetTick>
 8001b12:	0002      	movs	r2, r0
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	4a79      	ldr	r2, [pc, #484]	; (8001d00 <HAL_RCC_OscConfig+0x620>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e0e6      	b.n	8001cf0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b22:	4b75      	ldr	r3, [pc, #468]	; (8001cf8 <HAL_RCC_OscConfig+0x618>)
 8001b24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b26:	2202      	movs	r2, #2
 8001b28:	4013      	ands	r3, r2
 8001b2a:	d0f0      	beq.n	8001b0e <HAL_RCC_OscConfig+0x42e>
 8001b2c:	e013      	b.n	8001b56 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b2e:	f7ff f98f 	bl	8000e50 <HAL_GetTick>
 8001b32:	0003      	movs	r3, r0
 8001b34:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b36:	e009      	b.n	8001b4c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b38:	f7ff f98a 	bl	8000e50 <HAL_GetTick>
 8001b3c:	0002      	movs	r2, r0
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	4a6f      	ldr	r2, [pc, #444]	; (8001d00 <HAL_RCC_OscConfig+0x620>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d901      	bls.n	8001b4c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e0d1      	b.n	8001cf0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b4c:	4b6a      	ldr	r3, [pc, #424]	; (8001cf8 <HAL_RCC_OscConfig+0x618>)
 8001b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b50:	2202      	movs	r2, #2
 8001b52:	4013      	ands	r3, r2
 8001b54:	d1f0      	bne.n	8001b38 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001b56:	231f      	movs	r3, #31
 8001b58:	18fb      	adds	r3, r7, r3
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d105      	bne.n	8001b6c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001b60:	4b65      	ldr	r3, [pc, #404]	; (8001cf8 <HAL_RCC_OscConfig+0x618>)
 8001b62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b64:	4b64      	ldr	r3, [pc, #400]	; (8001cf8 <HAL_RCC_OscConfig+0x618>)
 8001b66:	4967      	ldr	r1, [pc, #412]	; (8001d04 <HAL_RCC_OscConfig+0x624>)
 8001b68:	400a      	ands	r2, r1
 8001b6a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	69db      	ldr	r3, [r3, #28]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d100      	bne.n	8001b76 <HAL_RCC_OscConfig+0x496>
 8001b74:	e0bb      	b.n	8001cee <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b76:	4b60      	ldr	r3, [pc, #384]	; (8001cf8 <HAL_RCC_OscConfig+0x618>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	2238      	movs	r2, #56	; 0x38
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	2b10      	cmp	r3, #16
 8001b80:	d100      	bne.n	8001b84 <HAL_RCC_OscConfig+0x4a4>
 8001b82:	e07b      	b.n	8001c7c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	69db      	ldr	r3, [r3, #28]
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d156      	bne.n	8001c3a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b8c:	4b5a      	ldr	r3, [pc, #360]	; (8001cf8 <HAL_RCC_OscConfig+0x618>)
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	4b59      	ldr	r3, [pc, #356]	; (8001cf8 <HAL_RCC_OscConfig+0x618>)
 8001b92:	495d      	ldr	r1, [pc, #372]	; (8001d08 <HAL_RCC_OscConfig+0x628>)
 8001b94:	400a      	ands	r2, r1
 8001b96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b98:	f7ff f95a 	bl	8000e50 <HAL_GetTick>
 8001b9c:	0003      	movs	r3, r0
 8001b9e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ba0:	e008      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ba2:	f7ff f955 	bl	8000e50 <HAL_GetTick>
 8001ba6:	0002      	movs	r2, r0
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d901      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e09d      	b.n	8001cf0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bb4:	4b50      	ldr	r3, [pc, #320]	; (8001cf8 <HAL_RCC_OscConfig+0x618>)
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	2380      	movs	r3, #128	; 0x80
 8001bba:	049b      	lsls	r3, r3, #18
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	d1f0      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bc0:	4b4d      	ldr	r3, [pc, #308]	; (8001cf8 <HAL_RCC_OscConfig+0x618>)
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	4a51      	ldr	r2, [pc, #324]	; (8001d0c <HAL_RCC_OscConfig+0x62c>)
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	0019      	movs	r1, r3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6a1a      	ldr	r2, [r3, #32]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd2:	431a      	orrs	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd8:	021b      	lsls	r3, r3, #8
 8001bda:	431a      	orrs	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be0:	431a      	orrs	r2, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be6:	431a      	orrs	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bec:	431a      	orrs	r2, r3
 8001bee:	4b42      	ldr	r3, [pc, #264]	; (8001cf8 <HAL_RCC_OscConfig+0x618>)
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bf4:	4b40      	ldr	r3, [pc, #256]	; (8001cf8 <HAL_RCC_OscConfig+0x618>)
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	4b3f      	ldr	r3, [pc, #252]	; (8001cf8 <HAL_RCC_OscConfig+0x618>)
 8001bfa:	2180      	movs	r1, #128	; 0x80
 8001bfc:	0449      	lsls	r1, r1, #17
 8001bfe:	430a      	orrs	r2, r1
 8001c00:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001c02:	4b3d      	ldr	r3, [pc, #244]	; (8001cf8 <HAL_RCC_OscConfig+0x618>)
 8001c04:	68da      	ldr	r2, [r3, #12]
 8001c06:	4b3c      	ldr	r3, [pc, #240]	; (8001cf8 <HAL_RCC_OscConfig+0x618>)
 8001c08:	2180      	movs	r1, #128	; 0x80
 8001c0a:	0549      	lsls	r1, r1, #21
 8001c0c:	430a      	orrs	r2, r1
 8001c0e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c10:	f7ff f91e 	bl	8000e50 <HAL_GetTick>
 8001c14:	0003      	movs	r3, r0
 8001c16:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c18:	e008      	b.n	8001c2c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c1a:	f7ff f919 	bl	8000e50 <HAL_GetTick>
 8001c1e:	0002      	movs	r2, r0
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d901      	bls.n	8001c2c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e061      	b.n	8001cf0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c2c:	4b32      	ldr	r3, [pc, #200]	; (8001cf8 <HAL_RCC_OscConfig+0x618>)
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	2380      	movs	r3, #128	; 0x80
 8001c32:	049b      	lsls	r3, r3, #18
 8001c34:	4013      	ands	r3, r2
 8001c36:	d0f0      	beq.n	8001c1a <HAL_RCC_OscConfig+0x53a>
 8001c38:	e059      	b.n	8001cee <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c3a:	4b2f      	ldr	r3, [pc, #188]	; (8001cf8 <HAL_RCC_OscConfig+0x618>)
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	4b2e      	ldr	r3, [pc, #184]	; (8001cf8 <HAL_RCC_OscConfig+0x618>)
 8001c40:	4931      	ldr	r1, [pc, #196]	; (8001d08 <HAL_RCC_OscConfig+0x628>)
 8001c42:	400a      	ands	r2, r1
 8001c44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c46:	f7ff f903 	bl	8000e50 <HAL_GetTick>
 8001c4a:	0003      	movs	r3, r0
 8001c4c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c4e:	e008      	b.n	8001c62 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c50:	f7ff f8fe 	bl	8000e50 <HAL_GetTick>
 8001c54:	0002      	movs	r2, r0
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e046      	b.n	8001cf0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c62:	4b25      	ldr	r3, [pc, #148]	; (8001cf8 <HAL_RCC_OscConfig+0x618>)
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	2380      	movs	r3, #128	; 0x80
 8001c68:	049b      	lsls	r3, r3, #18
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	d1f0      	bne.n	8001c50 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001c6e:	4b22      	ldr	r3, [pc, #136]	; (8001cf8 <HAL_RCC_OscConfig+0x618>)
 8001c70:	68da      	ldr	r2, [r3, #12]
 8001c72:	4b21      	ldr	r3, [pc, #132]	; (8001cf8 <HAL_RCC_OscConfig+0x618>)
 8001c74:	4926      	ldr	r1, [pc, #152]	; (8001d10 <HAL_RCC_OscConfig+0x630>)
 8001c76:	400a      	ands	r2, r1
 8001c78:	60da      	str	r2, [r3, #12]
 8001c7a:	e038      	b.n	8001cee <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	69db      	ldr	r3, [r3, #28]
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d101      	bne.n	8001c88 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e033      	b.n	8001cf0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001c88:	4b1b      	ldr	r3, [pc, #108]	; (8001cf8 <HAL_RCC_OscConfig+0x618>)
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	2203      	movs	r2, #3
 8001c92:	401a      	ands	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6a1b      	ldr	r3, [r3, #32]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d126      	bne.n	8001cea <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	2270      	movs	r2, #112	; 0x70
 8001ca0:	401a      	ands	r2, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d11f      	bne.n	8001cea <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001caa:	697a      	ldr	r2, [r7, #20]
 8001cac:	23fe      	movs	r3, #254	; 0xfe
 8001cae:	01db      	lsls	r3, r3, #7
 8001cb0:	401a      	ands	r2, r3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d116      	bne.n	8001cea <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001cbc:	697a      	ldr	r2, [r7, #20]
 8001cbe:	23f8      	movs	r3, #248	; 0xf8
 8001cc0:	039b      	lsls	r3, r3, #14
 8001cc2:	401a      	ands	r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d10e      	bne.n	8001cea <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001ccc:	697a      	ldr	r2, [r7, #20]
 8001cce:	23e0      	movs	r3, #224	; 0xe0
 8001cd0:	051b      	lsls	r3, r3, #20
 8001cd2:	401a      	ands	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d106      	bne.n	8001cea <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	0f5b      	lsrs	r3, r3, #29
 8001ce0:	075a      	lsls	r2, r3, #29
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d001      	beq.n	8001cee <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e000      	b.n	8001cf0 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8001cee:	2300      	movs	r3, #0
}
 8001cf0:	0018      	movs	r0, r3
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	b008      	add	sp, #32
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	40021000 	.word	0x40021000
 8001cfc:	40007000 	.word	0x40007000
 8001d00:	00001388 	.word	0x00001388
 8001d04:	efffffff 	.word	0xefffffff
 8001d08:	feffffff 	.word	0xfeffffff
 8001d0c:	11c1808c 	.word	0x11c1808c
 8001d10:	eefefffc 	.word	0xeefefffc

08001d14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d101      	bne.n	8001d28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e0e9      	b.n	8001efc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d28:	4b76      	ldr	r3, [pc, #472]	; (8001f04 <HAL_RCC_ClockConfig+0x1f0>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2207      	movs	r2, #7
 8001d2e:	4013      	ands	r3, r2
 8001d30:	683a      	ldr	r2, [r7, #0]
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d91e      	bls.n	8001d74 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d36:	4b73      	ldr	r3, [pc, #460]	; (8001f04 <HAL_RCC_ClockConfig+0x1f0>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2207      	movs	r2, #7
 8001d3c:	4393      	bics	r3, r2
 8001d3e:	0019      	movs	r1, r3
 8001d40:	4b70      	ldr	r3, [pc, #448]	; (8001f04 <HAL_RCC_ClockConfig+0x1f0>)
 8001d42:	683a      	ldr	r2, [r7, #0]
 8001d44:	430a      	orrs	r2, r1
 8001d46:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d48:	f7ff f882 	bl	8000e50 <HAL_GetTick>
 8001d4c:	0003      	movs	r3, r0
 8001d4e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d50:	e009      	b.n	8001d66 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d52:	f7ff f87d 	bl	8000e50 <HAL_GetTick>
 8001d56:	0002      	movs	r2, r0
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	4a6a      	ldr	r2, [pc, #424]	; (8001f08 <HAL_RCC_ClockConfig+0x1f4>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e0ca      	b.n	8001efc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d66:	4b67      	ldr	r3, [pc, #412]	; (8001f04 <HAL_RCC_ClockConfig+0x1f0>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2207      	movs	r2, #7
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	683a      	ldr	r2, [r7, #0]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d1ee      	bne.n	8001d52 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2202      	movs	r2, #2
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	d015      	beq.n	8001daa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2204      	movs	r2, #4
 8001d84:	4013      	ands	r3, r2
 8001d86:	d006      	beq.n	8001d96 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001d88:	4b60      	ldr	r3, [pc, #384]	; (8001f0c <HAL_RCC_ClockConfig+0x1f8>)
 8001d8a:	689a      	ldr	r2, [r3, #8]
 8001d8c:	4b5f      	ldr	r3, [pc, #380]	; (8001f0c <HAL_RCC_ClockConfig+0x1f8>)
 8001d8e:	21e0      	movs	r1, #224	; 0xe0
 8001d90:	01c9      	lsls	r1, r1, #7
 8001d92:	430a      	orrs	r2, r1
 8001d94:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d96:	4b5d      	ldr	r3, [pc, #372]	; (8001f0c <HAL_RCC_ClockConfig+0x1f8>)
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	4a5d      	ldr	r2, [pc, #372]	; (8001f10 <HAL_RCC_ClockConfig+0x1fc>)
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	0019      	movs	r1, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	689a      	ldr	r2, [r3, #8]
 8001da4:	4b59      	ldr	r3, [pc, #356]	; (8001f0c <HAL_RCC_ClockConfig+0x1f8>)
 8001da6:	430a      	orrs	r2, r1
 8001da8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2201      	movs	r2, #1
 8001db0:	4013      	ands	r3, r2
 8001db2:	d057      	beq.n	8001e64 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d107      	bne.n	8001dcc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dbc:	4b53      	ldr	r3, [pc, #332]	; (8001f0c <HAL_RCC_ClockConfig+0x1f8>)
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	2380      	movs	r3, #128	; 0x80
 8001dc2:	029b      	lsls	r3, r3, #10
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	d12b      	bne.n	8001e20 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e097      	b.n	8001efc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d107      	bne.n	8001de4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dd4:	4b4d      	ldr	r3, [pc, #308]	; (8001f0c <HAL_RCC_ClockConfig+0x1f8>)
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	2380      	movs	r3, #128	; 0x80
 8001dda:	049b      	lsls	r3, r3, #18
 8001ddc:	4013      	ands	r3, r2
 8001dde:	d11f      	bne.n	8001e20 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e08b      	b.n	8001efc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d107      	bne.n	8001dfc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dec:	4b47      	ldr	r3, [pc, #284]	; (8001f0c <HAL_RCC_ClockConfig+0x1f8>)
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	2380      	movs	r3, #128	; 0x80
 8001df2:	00db      	lsls	r3, r3, #3
 8001df4:	4013      	ands	r3, r2
 8001df6:	d113      	bne.n	8001e20 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e07f      	b.n	8001efc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	2b03      	cmp	r3, #3
 8001e02:	d106      	bne.n	8001e12 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e04:	4b41      	ldr	r3, [pc, #260]	; (8001f0c <HAL_RCC_ClockConfig+0x1f8>)
 8001e06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e08:	2202      	movs	r2, #2
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	d108      	bne.n	8001e20 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e074      	b.n	8001efc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e12:	4b3e      	ldr	r3, [pc, #248]	; (8001f0c <HAL_RCC_ClockConfig+0x1f8>)
 8001e14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e16:	2202      	movs	r2, #2
 8001e18:	4013      	ands	r3, r2
 8001e1a:	d101      	bne.n	8001e20 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e06d      	b.n	8001efc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e20:	4b3a      	ldr	r3, [pc, #232]	; (8001f0c <HAL_RCC_ClockConfig+0x1f8>)
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	2207      	movs	r2, #7
 8001e26:	4393      	bics	r3, r2
 8001e28:	0019      	movs	r1, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685a      	ldr	r2, [r3, #4]
 8001e2e:	4b37      	ldr	r3, [pc, #220]	; (8001f0c <HAL_RCC_ClockConfig+0x1f8>)
 8001e30:	430a      	orrs	r2, r1
 8001e32:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e34:	f7ff f80c 	bl	8000e50 <HAL_GetTick>
 8001e38:	0003      	movs	r3, r0
 8001e3a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e3c:	e009      	b.n	8001e52 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e3e:	f7ff f807 	bl	8000e50 <HAL_GetTick>
 8001e42:	0002      	movs	r2, r0
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	4a2f      	ldr	r2, [pc, #188]	; (8001f08 <HAL_RCC_ClockConfig+0x1f4>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e054      	b.n	8001efc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e52:	4b2e      	ldr	r3, [pc, #184]	; (8001f0c <HAL_RCC_ClockConfig+0x1f8>)
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	2238      	movs	r2, #56	; 0x38
 8001e58:	401a      	ands	r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	00db      	lsls	r3, r3, #3
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d1ec      	bne.n	8001e3e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e64:	4b27      	ldr	r3, [pc, #156]	; (8001f04 <HAL_RCC_ClockConfig+0x1f0>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2207      	movs	r2, #7
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	683a      	ldr	r2, [r7, #0]
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d21e      	bcs.n	8001eb0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e72:	4b24      	ldr	r3, [pc, #144]	; (8001f04 <HAL_RCC_ClockConfig+0x1f0>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	2207      	movs	r2, #7
 8001e78:	4393      	bics	r3, r2
 8001e7a:	0019      	movs	r1, r3
 8001e7c:	4b21      	ldr	r3, [pc, #132]	; (8001f04 <HAL_RCC_ClockConfig+0x1f0>)
 8001e7e:	683a      	ldr	r2, [r7, #0]
 8001e80:	430a      	orrs	r2, r1
 8001e82:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e84:	f7fe ffe4 	bl	8000e50 <HAL_GetTick>
 8001e88:	0003      	movs	r3, r0
 8001e8a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e8c:	e009      	b.n	8001ea2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e8e:	f7fe ffdf 	bl	8000e50 <HAL_GetTick>
 8001e92:	0002      	movs	r2, r0
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	4a1b      	ldr	r2, [pc, #108]	; (8001f08 <HAL_RCC_ClockConfig+0x1f4>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e02c      	b.n	8001efc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ea2:	4b18      	ldr	r3, [pc, #96]	; (8001f04 <HAL_RCC_ClockConfig+0x1f0>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2207      	movs	r2, #7
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	683a      	ldr	r2, [r7, #0]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d1ee      	bne.n	8001e8e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2204      	movs	r2, #4
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	d009      	beq.n	8001ece <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001eba:	4b14      	ldr	r3, [pc, #80]	; (8001f0c <HAL_RCC_ClockConfig+0x1f8>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	4a15      	ldr	r2, [pc, #84]	; (8001f14 <HAL_RCC_ClockConfig+0x200>)
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	0019      	movs	r1, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	68da      	ldr	r2, [r3, #12]
 8001ec8:	4b10      	ldr	r3, [pc, #64]	; (8001f0c <HAL_RCC_ClockConfig+0x1f8>)
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001ece:	f000 f829 	bl	8001f24 <HAL_RCC_GetSysClockFreq>
 8001ed2:	0001      	movs	r1, r0
 8001ed4:	4b0d      	ldr	r3, [pc, #52]	; (8001f0c <HAL_RCC_ClockConfig+0x1f8>)
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	0a1b      	lsrs	r3, r3, #8
 8001eda:	220f      	movs	r2, #15
 8001edc:	401a      	ands	r2, r3
 8001ede:	4b0e      	ldr	r3, [pc, #56]	; (8001f18 <HAL_RCC_ClockConfig+0x204>)
 8001ee0:	0092      	lsls	r2, r2, #2
 8001ee2:	58d3      	ldr	r3, [r2, r3]
 8001ee4:	221f      	movs	r2, #31
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	000a      	movs	r2, r1
 8001eea:	40da      	lsrs	r2, r3
 8001eec:	4b0b      	ldr	r3, [pc, #44]	; (8001f1c <HAL_RCC_ClockConfig+0x208>)
 8001eee:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001ef0:	4b0b      	ldr	r3, [pc, #44]	; (8001f20 <HAL_RCC_ClockConfig+0x20c>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	0018      	movs	r0, r3
 8001ef6:	f7fe ff4f 	bl	8000d98 <HAL_InitTick>
 8001efa:	0003      	movs	r3, r0
}
 8001efc:	0018      	movs	r0, r3
 8001efe:	46bd      	mov	sp, r7
 8001f00:	b004      	add	sp, #16
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40022000 	.word	0x40022000
 8001f08:	00001388 	.word	0x00001388
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	fffff0ff 	.word	0xfffff0ff
 8001f14:	ffff8fff 	.word	0xffff8fff
 8001f18:	08004900 	.word	0x08004900
 8001f1c:	20000000 	.word	0x20000000
 8001f20:	20000004 	.word	0x20000004

08001f24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b086      	sub	sp, #24
 8001f28:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f2a:	4b3c      	ldr	r3, [pc, #240]	; (800201c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	2238      	movs	r2, #56	; 0x38
 8001f30:	4013      	ands	r3, r2
 8001f32:	d10f      	bne.n	8001f54 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001f34:	4b39      	ldr	r3, [pc, #228]	; (800201c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	0adb      	lsrs	r3, r3, #11
 8001f3a:	2207      	movs	r2, #7
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	2201      	movs	r2, #1
 8001f40:	409a      	lsls	r2, r3
 8001f42:	0013      	movs	r3, r2
 8001f44:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001f46:	6839      	ldr	r1, [r7, #0]
 8001f48:	4835      	ldr	r0, [pc, #212]	; (8002020 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001f4a:	f7fe f8db 	bl	8000104 <__udivsi3>
 8001f4e:	0003      	movs	r3, r0
 8001f50:	613b      	str	r3, [r7, #16]
 8001f52:	e05d      	b.n	8002010 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f54:	4b31      	ldr	r3, [pc, #196]	; (800201c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	2238      	movs	r2, #56	; 0x38
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	2b08      	cmp	r3, #8
 8001f5e:	d102      	bne.n	8001f66 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f60:	4b30      	ldr	r3, [pc, #192]	; (8002024 <HAL_RCC_GetSysClockFreq+0x100>)
 8001f62:	613b      	str	r3, [r7, #16]
 8001f64:	e054      	b.n	8002010 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f66:	4b2d      	ldr	r3, [pc, #180]	; (800201c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	2238      	movs	r2, #56	; 0x38
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	2b10      	cmp	r3, #16
 8001f70:	d138      	bne.n	8001fe4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001f72:	4b2a      	ldr	r3, [pc, #168]	; (800201c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	2203      	movs	r2, #3
 8001f78:	4013      	ands	r3, r2
 8001f7a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f7c:	4b27      	ldr	r3, [pc, #156]	; (800201c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	091b      	lsrs	r3, r3, #4
 8001f82:	2207      	movs	r2, #7
 8001f84:	4013      	ands	r3, r2
 8001f86:	3301      	adds	r3, #1
 8001f88:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2b03      	cmp	r3, #3
 8001f8e:	d10d      	bne.n	8001fac <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f90:	68b9      	ldr	r1, [r7, #8]
 8001f92:	4824      	ldr	r0, [pc, #144]	; (8002024 <HAL_RCC_GetSysClockFreq+0x100>)
 8001f94:	f7fe f8b6 	bl	8000104 <__udivsi3>
 8001f98:	0003      	movs	r3, r0
 8001f9a:	0019      	movs	r1, r3
 8001f9c:	4b1f      	ldr	r3, [pc, #124]	; (800201c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	0a1b      	lsrs	r3, r3, #8
 8001fa2:	227f      	movs	r2, #127	; 0x7f
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	434b      	muls	r3, r1
 8001fa8:	617b      	str	r3, [r7, #20]
        break;
 8001faa:	e00d      	b.n	8001fc8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001fac:	68b9      	ldr	r1, [r7, #8]
 8001fae:	481c      	ldr	r0, [pc, #112]	; (8002020 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001fb0:	f7fe f8a8 	bl	8000104 <__udivsi3>
 8001fb4:	0003      	movs	r3, r0
 8001fb6:	0019      	movs	r1, r3
 8001fb8:	4b18      	ldr	r3, [pc, #96]	; (800201c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	0a1b      	lsrs	r3, r3, #8
 8001fbe:	227f      	movs	r2, #127	; 0x7f
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	434b      	muls	r3, r1
 8001fc4:	617b      	str	r3, [r7, #20]
        break;
 8001fc6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001fc8:	4b14      	ldr	r3, [pc, #80]	; (800201c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	0f5b      	lsrs	r3, r3, #29
 8001fce:	2207      	movs	r2, #7
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001fd6:	6879      	ldr	r1, [r7, #4]
 8001fd8:	6978      	ldr	r0, [r7, #20]
 8001fda:	f7fe f893 	bl	8000104 <__udivsi3>
 8001fde:	0003      	movs	r3, r0
 8001fe0:	613b      	str	r3, [r7, #16]
 8001fe2:	e015      	b.n	8002010 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001fe4:	4b0d      	ldr	r3, [pc, #52]	; (800201c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	2238      	movs	r2, #56	; 0x38
 8001fea:	4013      	ands	r3, r2
 8001fec:	2b20      	cmp	r3, #32
 8001fee:	d103      	bne.n	8001ff8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001ff0:	2380      	movs	r3, #128	; 0x80
 8001ff2:	021b      	lsls	r3, r3, #8
 8001ff4:	613b      	str	r3, [r7, #16]
 8001ff6:	e00b      	b.n	8002010 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001ff8:	4b08      	ldr	r3, [pc, #32]	; (800201c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	2238      	movs	r2, #56	; 0x38
 8001ffe:	4013      	ands	r3, r2
 8002000:	2b18      	cmp	r3, #24
 8002002:	d103      	bne.n	800200c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002004:	23fa      	movs	r3, #250	; 0xfa
 8002006:	01db      	lsls	r3, r3, #7
 8002008:	613b      	str	r3, [r7, #16]
 800200a:	e001      	b.n	8002010 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800200c:	2300      	movs	r3, #0
 800200e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002010:	693b      	ldr	r3, [r7, #16]
}
 8002012:	0018      	movs	r0, r3
 8002014:	46bd      	mov	sp, r7
 8002016:	b006      	add	sp, #24
 8002018:	bd80      	pop	{r7, pc}
 800201a:	46c0      	nop			; (mov r8, r8)
 800201c:	40021000 	.word	0x40021000
 8002020:	00f42400 	.word	0x00f42400
 8002024:	007a1200 	.word	0x007a1200

08002028 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800202c:	4b02      	ldr	r3, [pc, #8]	; (8002038 <HAL_RCC_GetHCLKFreq+0x10>)
 800202e:	681b      	ldr	r3, [r3, #0]
}
 8002030:	0018      	movs	r0, r3
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	46c0      	nop			; (mov r8, r8)
 8002038:	20000000 	.word	0x20000000

0800203c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800203c:	b5b0      	push	{r4, r5, r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002040:	f7ff fff2 	bl	8002028 <HAL_RCC_GetHCLKFreq>
 8002044:	0004      	movs	r4, r0
 8002046:	f7ff fb3f 	bl	80016c8 <LL_RCC_GetAPB1Prescaler>
 800204a:	0003      	movs	r3, r0
 800204c:	0b1a      	lsrs	r2, r3, #12
 800204e:	4b05      	ldr	r3, [pc, #20]	; (8002064 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002050:	0092      	lsls	r2, r2, #2
 8002052:	58d3      	ldr	r3, [r2, r3]
 8002054:	221f      	movs	r2, #31
 8002056:	4013      	ands	r3, r2
 8002058:	40dc      	lsrs	r4, r3
 800205a:	0023      	movs	r3, r4
}
 800205c:	0018      	movs	r0, r3
 800205e:	46bd      	mov	sp, r7
 8002060:	bdb0      	pop	{r4, r5, r7, pc}
 8002062:	46c0      	nop			; (mov r8, r8)
 8002064:	08004940 	.word	0x08004940

08002068 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b086      	sub	sp, #24
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002070:	2313      	movs	r3, #19
 8002072:	18fb      	adds	r3, r7, r3
 8002074:	2200      	movs	r2, #0
 8002076:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002078:	2312      	movs	r3, #18
 800207a:	18fb      	adds	r3, r7, r3
 800207c:	2200      	movs	r2, #0
 800207e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	2380      	movs	r3, #128	; 0x80
 8002086:	029b      	lsls	r3, r3, #10
 8002088:	4013      	ands	r3, r2
 800208a:	d100      	bne.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800208c:	e0a3      	b.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800208e:	2011      	movs	r0, #17
 8002090:	183b      	adds	r3, r7, r0
 8002092:	2200      	movs	r2, #0
 8002094:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002096:	4bc3      	ldr	r3, [pc, #780]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002098:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800209a:	2380      	movs	r3, #128	; 0x80
 800209c:	055b      	lsls	r3, r3, #21
 800209e:	4013      	ands	r3, r2
 80020a0:	d110      	bne.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020a2:	4bc0      	ldr	r3, [pc, #768]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020a6:	4bbf      	ldr	r3, [pc, #764]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020a8:	2180      	movs	r1, #128	; 0x80
 80020aa:	0549      	lsls	r1, r1, #21
 80020ac:	430a      	orrs	r2, r1
 80020ae:	63da      	str	r2, [r3, #60]	; 0x3c
 80020b0:	4bbc      	ldr	r3, [pc, #752]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020b4:	2380      	movs	r3, #128	; 0x80
 80020b6:	055b      	lsls	r3, r3, #21
 80020b8:	4013      	ands	r3, r2
 80020ba:	60bb      	str	r3, [r7, #8]
 80020bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020be:	183b      	adds	r3, r7, r0
 80020c0:	2201      	movs	r2, #1
 80020c2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020c4:	4bb8      	ldr	r3, [pc, #736]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	4bb7      	ldr	r3, [pc, #732]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80020ca:	2180      	movs	r1, #128	; 0x80
 80020cc:	0049      	lsls	r1, r1, #1
 80020ce:	430a      	orrs	r2, r1
 80020d0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80020d2:	f7fe febd 	bl	8000e50 <HAL_GetTick>
 80020d6:	0003      	movs	r3, r0
 80020d8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80020da:	e00b      	b.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020dc:	f7fe feb8 	bl	8000e50 <HAL_GetTick>
 80020e0:	0002      	movs	r2, r0
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d904      	bls.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80020ea:	2313      	movs	r3, #19
 80020ec:	18fb      	adds	r3, r7, r3
 80020ee:	2203      	movs	r2, #3
 80020f0:	701a      	strb	r2, [r3, #0]
        break;
 80020f2:	e005      	b.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80020f4:	4bac      	ldr	r3, [pc, #688]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	2380      	movs	r3, #128	; 0x80
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	4013      	ands	r3, r2
 80020fe:	d0ed      	beq.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002100:	2313      	movs	r3, #19
 8002102:	18fb      	adds	r3, r7, r3
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d154      	bne.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800210a:	4ba6      	ldr	r3, [pc, #664]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800210c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800210e:	23c0      	movs	r3, #192	; 0xc0
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	4013      	ands	r3, r2
 8002114:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d019      	beq.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002120:	697a      	ldr	r2, [r7, #20]
 8002122:	429a      	cmp	r2, r3
 8002124:	d014      	beq.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002126:	4b9f      	ldr	r3, [pc, #636]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002128:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800212a:	4aa0      	ldr	r2, [pc, #640]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800212c:	4013      	ands	r3, r2
 800212e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002130:	4b9c      	ldr	r3, [pc, #624]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002132:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002134:	4b9b      	ldr	r3, [pc, #620]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002136:	2180      	movs	r1, #128	; 0x80
 8002138:	0249      	lsls	r1, r1, #9
 800213a:	430a      	orrs	r2, r1
 800213c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800213e:	4b99      	ldr	r3, [pc, #612]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002140:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002142:	4b98      	ldr	r3, [pc, #608]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002144:	499a      	ldr	r1, [pc, #616]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8002146:	400a      	ands	r2, r1
 8002148:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800214a:	4b96      	ldr	r3, [pc, #600]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800214c:	697a      	ldr	r2, [r7, #20]
 800214e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	2201      	movs	r2, #1
 8002154:	4013      	ands	r3, r2
 8002156:	d016      	beq.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002158:	f7fe fe7a 	bl	8000e50 <HAL_GetTick>
 800215c:	0003      	movs	r3, r0
 800215e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002160:	e00c      	b.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002162:	f7fe fe75 	bl	8000e50 <HAL_GetTick>
 8002166:	0002      	movs	r2, r0
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	4a91      	ldr	r2, [pc, #580]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d904      	bls.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002172:	2313      	movs	r3, #19
 8002174:	18fb      	adds	r3, r7, r3
 8002176:	2203      	movs	r2, #3
 8002178:	701a      	strb	r2, [r3, #0]
            break;
 800217a:	e004      	b.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800217c:	4b89      	ldr	r3, [pc, #548]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800217e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002180:	2202      	movs	r2, #2
 8002182:	4013      	ands	r3, r2
 8002184:	d0ed      	beq.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002186:	2313      	movs	r3, #19
 8002188:	18fb      	adds	r3, r7, r3
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d10a      	bne.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002190:	4b84      	ldr	r3, [pc, #528]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002194:	4a85      	ldr	r2, [pc, #532]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002196:	4013      	ands	r3, r2
 8002198:	0019      	movs	r1, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800219e:	4b81      	ldr	r3, [pc, #516]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021a0:	430a      	orrs	r2, r1
 80021a2:	65da      	str	r2, [r3, #92]	; 0x5c
 80021a4:	e00c      	b.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80021a6:	2312      	movs	r3, #18
 80021a8:	18fb      	adds	r3, r7, r3
 80021aa:	2213      	movs	r2, #19
 80021ac:	18ba      	adds	r2, r7, r2
 80021ae:	7812      	ldrb	r2, [r2, #0]
 80021b0:	701a      	strb	r2, [r3, #0]
 80021b2:	e005      	b.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021b4:	2312      	movs	r3, #18
 80021b6:	18fb      	adds	r3, r7, r3
 80021b8:	2213      	movs	r2, #19
 80021ba:	18ba      	adds	r2, r7, r2
 80021bc:	7812      	ldrb	r2, [r2, #0]
 80021be:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80021c0:	2311      	movs	r3, #17
 80021c2:	18fb      	adds	r3, r7, r3
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d105      	bne.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021ca:	4b76      	ldr	r3, [pc, #472]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80021ce:	4b75      	ldr	r3, [pc, #468]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021d0:	4979      	ldr	r1, [pc, #484]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80021d2:	400a      	ands	r2, r1
 80021d4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	2201      	movs	r2, #1
 80021dc:	4013      	ands	r3, r2
 80021de:	d009      	beq.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021e0:	4b70      	ldr	r3, [pc, #448]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021e4:	2203      	movs	r2, #3
 80021e6:	4393      	bics	r3, r2
 80021e8:	0019      	movs	r1, r3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685a      	ldr	r2, [r3, #4]
 80021ee:	4b6d      	ldr	r3, [pc, #436]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021f0:	430a      	orrs	r2, r1
 80021f2:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2202      	movs	r2, #2
 80021fa:	4013      	ands	r3, r2
 80021fc:	d009      	beq.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021fe:	4b69      	ldr	r3, [pc, #420]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002202:	220c      	movs	r2, #12
 8002204:	4393      	bics	r3, r2
 8002206:	0019      	movs	r1, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	689a      	ldr	r2, [r3, #8]
 800220c:	4b65      	ldr	r3, [pc, #404]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800220e:	430a      	orrs	r2, r1
 8002210:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2210      	movs	r2, #16
 8002218:	4013      	ands	r3, r2
 800221a:	d009      	beq.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800221c:	4b61      	ldr	r3, [pc, #388]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800221e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002220:	4a66      	ldr	r2, [pc, #408]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8002222:	4013      	ands	r3, r2
 8002224:	0019      	movs	r1, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	68da      	ldr	r2, [r3, #12]
 800222a:	4b5e      	ldr	r3, [pc, #376]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800222c:	430a      	orrs	r2, r1
 800222e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	2380      	movs	r3, #128	; 0x80
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	4013      	ands	r3, r2
 800223a:	d009      	beq.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800223c:	4b59      	ldr	r3, [pc, #356]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800223e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002240:	4a5f      	ldr	r2, [pc, #380]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002242:	4013      	ands	r3, r2
 8002244:	0019      	movs	r1, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	699a      	ldr	r2, [r3, #24]
 800224a:	4b56      	ldr	r3, [pc, #344]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800224c:	430a      	orrs	r2, r1
 800224e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	2380      	movs	r3, #128	; 0x80
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	4013      	ands	r3, r2
 800225a:	d009      	beq.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800225c:	4b51      	ldr	r3, [pc, #324]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800225e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002260:	4a58      	ldr	r2, [pc, #352]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002262:	4013      	ands	r3, r2
 8002264:	0019      	movs	r1, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	69da      	ldr	r2, [r3, #28]
 800226a:	4b4e      	ldr	r3, [pc, #312]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800226c:	430a      	orrs	r2, r1
 800226e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2220      	movs	r2, #32
 8002276:	4013      	ands	r3, r2
 8002278:	d009      	beq.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800227a:	4b4a      	ldr	r3, [pc, #296]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800227c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800227e:	4a52      	ldr	r2, [pc, #328]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8002280:	4013      	ands	r3, r2
 8002282:	0019      	movs	r1, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	691a      	ldr	r2, [r3, #16]
 8002288:	4b46      	ldr	r3, [pc, #280]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800228a:	430a      	orrs	r2, r1
 800228c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	2380      	movs	r3, #128	; 0x80
 8002294:	01db      	lsls	r3, r3, #7
 8002296:	4013      	ands	r3, r2
 8002298:	d015      	beq.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800229a:	4b42      	ldr	r3, [pc, #264]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800229c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	0899      	lsrs	r1, r3, #2
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a1a      	ldr	r2, [r3, #32]
 80022a6:	4b3f      	ldr	r3, [pc, #252]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022a8:	430a      	orrs	r2, r1
 80022aa:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a1a      	ldr	r2, [r3, #32]
 80022b0:	2380      	movs	r3, #128	; 0x80
 80022b2:	05db      	lsls	r3, r3, #23
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d106      	bne.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80022b8:	4b3a      	ldr	r3, [pc, #232]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022ba:	68da      	ldr	r2, [r3, #12]
 80022bc:	4b39      	ldr	r3, [pc, #228]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022be:	2180      	movs	r1, #128	; 0x80
 80022c0:	0249      	lsls	r1, r1, #9
 80022c2:	430a      	orrs	r2, r1
 80022c4:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	2380      	movs	r3, #128	; 0x80
 80022cc:	031b      	lsls	r3, r3, #12
 80022ce:	4013      	ands	r3, r2
 80022d0:	d009      	beq.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80022d2:	4b34      	ldr	r3, [pc, #208]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022d6:	2240      	movs	r2, #64	; 0x40
 80022d8:	4393      	bics	r3, r2
 80022da:	0019      	movs	r1, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022e0:	4b30      	ldr	r3, [pc, #192]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022e2:	430a      	orrs	r2, r1
 80022e4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	2380      	movs	r3, #128	; 0x80
 80022ec:	039b      	lsls	r3, r3, #14
 80022ee:	4013      	ands	r3, r2
 80022f0:	d016      	beq.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80022f2:	4b2c      	ldr	r3, [pc, #176]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022f6:	4a35      	ldr	r2, [pc, #212]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80022f8:	4013      	ands	r3, r2
 80022fa:	0019      	movs	r1, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002300:	4b28      	ldr	r3, [pc, #160]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002302:	430a      	orrs	r2, r1
 8002304:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800230a:	2380      	movs	r3, #128	; 0x80
 800230c:	03db      	lsls	r3, r3, #15
 800230e:	429a      	cmp	r2, r3
 8002310:	d106      	bne.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002312:	4b24      	ldr	r3, [pc, #144]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002314:	68da      	ldr	r2, [r3, #12]
 8002316:	4b23      	ldr	r3, [pc, #140]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002318:	2180      	movs	r1, #128	; 0x80
 800231a:	0449      	lsls	r1, r1, #17
 800231c:	430a      	orrs	r2, r1
 800231e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	2380      	movs	r3, #128	; 0x80
 8002326:	03db      	lsls	r3, r3, #15
 8002328:	4013      	ands	r3, r2
 800232a:	d016      	beq.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800232c:	4b1d      	ldr	r3, [pc, #116]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800232e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002330:	4a27      	ldr	r2, [pc, #156]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8002332:	4013      	ands	r3, r2
 8002334:	0019      	movs	r1, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800233a:	4b1a      	ldr	r3, [pc, #104]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800233c:	430a      	orrs	r2, r1
 800233e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002344:	2380      	movs	r3, #128	; 0x80
 8002346:	045b      	lsls	r3, r3, #17
 8002348:	429a      	cmp	r2, r3
 800234a:	d106      	bne.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800234c:	4b15      	ldr	r3, [pc, #84]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800234e:	68da      	ldr	r2, [r3, #12]
 8002350:	4b14      	ldr	r3, [pc, #80]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002352:	2180      	movs	r1, #128	; 0x80
 8002354:	0449      	lsls	r1, r1, #17
 8002356:	430a      	orrs	r2, r1
 8002358:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	2380      	movs	r3, #128	; 0x80
 8002360:	011b      	lsls	r3, r3, #4
 8002362:	4013      	ands	r3, r2
 8002364:	d016      	beq.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002366:	4b0f      	ldr	r3, [pc, #60]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800236a:	4a1a      	ldr	r2, [pc, #104]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 800236c:	4013      	ands	r3, r2
 800236e:	0019      	movs	r1, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	695a      	ldr	r2, [r3, #20]
 8002374:	4b0b      	ldr	r3, [pc, #44]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002376:	430a      	orrs	r2, r1
 8002378:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	695a      	ldr	r2, [r3, #20]
 800237e:	2380      	movs	r3, #128	; 0x80
 8002380:	01db      	lsls	r3, r3, #7
 8002382:	429a      	cmp	r2, r3
 8002384:	d106      	bne.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002386:	4b07      	ldr	r3, [pc, #28]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002388:	68da      	ldr	r2, [r3, #12]
 800238a:	4b06      	ldr	r3, [pc, #24]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800238c:	2180      	movs	r1, #128	; 0x80
 800238e:	0249      	lsls	r1, r1, #9
 8002390:	430a      	orrs	r2, r1
 8002392:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002394:	2312      	movs	r3, #18
 8002396:	18fb      	adds	r3, r7, r3
 8002398:	781b      	ldrb	r3, [r3, #0]
}
 800239a:	0018      	movs	r0, r3
 800239c:	46bd      	mov	sp, r7
 800239e:	b006      	add	sp, #24
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	46c0      	nop			; (mov r8, r8)
 80023a4:	40021000 	.word	0x40021000
 80023a8:	40007000 	.word	0x40007000
 80023ac:	fffffcff 	.word	0xfffffcff
 80023b0:	fffeffff 	.word	0xfffeffff
 80023b4:	00001388 	.word	0x00001388
 80023b8:	efffffff 	.word	0xefffffff
 80023bc:	fffff3ff 	.word	0xfffff3ff
 80023c0:	fff3ffff 	.word	0xfff3ffff
 80023c4:	ffcfffff 	.word	0xffcfffff
 80023c8:	ffffcfff 	.word	0xffffcfff
 80023cc:	ffbfffff 	.word	0xffbfffff
 80023d0:	feffffff 	.word	0xfeffffff
 80023d4:	ffff3fff 	.word	0xffff3fff

080023d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e046      	b.n	8002478 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2288      	movs	r2, #136	; 0x88
 80023ee:	589b      	ldr	r3, [r3, r2]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d107      	bne.n	8002404 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2284      	movs	r2, #132	; 0x84
 80023f8:	2100      	movs	r1, #0
 80023fa:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	0018      	movs	r0, r3
 8002400:	f7fe fa9c 	bl	800093c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2288      	movs	r2, #136	; 0x88
 8002408:	2124      	movs	r1, #36	; 0x24
 800240a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2101      	movs	r1, #1
 8002418:	438a      	bics	r2, r1
 800241a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	0018      	movs	r0, r3
 8002420:	f000 fc70 	bl	8002d04 <UART_SetConfig>
 8002424:	0003      	movs	r3, r0
 8002426:	2b01      	cmp	r3, #1
 8002428:	d101      	bne.n	800242e <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e024      	b.n	8002478 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002432:	2b00      	cmp	r3, #0
 8002434:	d003      	beq.n	800243e <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	0018      	movs	r0, r3
 800243a:	f000 ff21 	bl	8003280 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	685a      	ldr	r2, [r3, #4]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	490d      	ldr	r1, [pc, #52]	; (8002480 <HAL_UART_Init+0xa8>)
 800244a:	400a      	ands	r2, r1
 800244c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	689a      	ldr	r2, [r3, #8]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	212a      	movs	r1, #42	; 0x2a
 800245a:	438a      	bics	r2, r1
 800245c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2101      	movs	r1, #1
 800246a:	430a      	orrs	r2, r1
 800246c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	0018      	movs	r0, r3
 8002472:	f000 ffb9 	bl	80033e8 <UART_CheckIdleState>
 8002476:	0003      	movs	r3, r0
}
 8002478:	0018      	movs	r0, r3
 800247a:	46bd      	mov	sp, r7
 800247c:	b002      	add	sp, #8
 800247e:	bd80      	pop	{r7, pc}
 8002480:	ffffb7ff 	.word	0xffffb7ff

08002484 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b08c      	sub	sp, #48	; 0x30
 8002488:	af00      	add	r7, sp, #0
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	1dbb      	adds	r3, r7, #6
 8002490:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2288      	movs	r2, #136	; 0x88
 8002496:	589b      	ldr	r3, [r3, r2]
 8002498:	2b20      	cmp	r3, #32
 800249a:	d000      	beq.n	800249e <HAL_UART_Transmit_IT+0x1a>
 800249c:	e08d      	b.n	80025ba <HAL_UART_Transmit_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d003      	beq.n	80024ac <HAL_UART_Transmit_IT+0x28>
 80024a4:	1dbb      	adds	r3, r7, #6
 80024a6:	881b      	ldrh	r3, [r3, #0]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d101      	bne.n	80024b0 <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e085      	b.n	80025bc <HAL_UART_Transmit_IT+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	689a      	ldr	r2, [r3, #8]
 80024b4:	2380      	movs	r3, #128	; 0x80
 80024b6:	015b      	lsls	r3, r3, #5
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d109      	bne.n	80024d0 <HAL_UART_Transmit_IT+0x4c>
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	691b      	ldr	r3, [r3, #16]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d105      	bne.n	80024d0 <HAL_UART_Transmit_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	2201      	movs	r2, #1
 80024c8:	4013      	ands	r3, r2
 80024ca:	d001      	beq.n	80024d0 <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e075      	b.n	80025bc <HAL_UART_Transmit_IT+0x138>
      }
    }

    huart->pTxBuffPtr  = pData;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	68ba      	ldr	r2, [r7, #8]
 80024d4:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	1dba      	adds	r2, r7, #6
 80024da:	2154      	movs	r1, #84	; 0x54
 80024dc:	8812      	ldrh	r2, [r2, #0]
 80024de:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	1dba      	adds	r2, r7, #6
 80024e4:	2156      	movs	r1, #86	; 0x56
 80024e6:	8812      	ldrh	r2, [r2, #0]
 80024e8:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2200      	movs	r2, #0
 80024ee:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2290      	movs	r2, #144	; 0x90
 80024f4:	2100      	movs	r1, #0
 80024f6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2288      	movs	r2, #136	; 0x88
 80024fc:	2121      	movs	r1, #33	; 0x21
 80024fe:	5099      	str	r1, [r3, r2]

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002504:	2380      	movs	r3, #128	; 0x80
 8002506:	059b      	lsls	r3, r3, #22
 8002508:	429a      	cmp	r2, r3
 800250a:	d12a      	bne.n	8002562 <HAL_UART_Transmit_IT+0xde>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	689a      	ldr	r2, [r3, #8]
 8002510:	2380      	movs	r3, #128	; 0x80
 8002512:	015b      	lsls	r3, r3, #5
 8002514:	429a      	cmp	r2, r3
 8002516:	d107      	bne.n	8002528 <HAL_UART_Transmit_IT+0xa4>
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	691b      	ldr	r3, [r3, #16]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d103      	bne.n	8002528 <HAL_UART_Transmit_IT+0xa4>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	4a28      	ldr	r2, [pc, #160]	; (80025c4 <HAL_UART_Transmit_IT+0x140>)
 8002524:	679a      	str	r2, [r3, #120]	; 0x78
 8002526:	e002      	b.n	800252e <HAL_UART_Transmit_IT+0xaa>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	4a27      	ldr	r2, [pc, #156]	; (80025c8 <HAL_UART_Transmit_IT+0x144>)
 800252c:	679a      	str	r2, [r3, #120]	; 0x78
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800252e:	f3ef 8310 	mrs	r3, PRIMASK
 8002532:	61fb      	str	r3, [r7, #28]
  return(result);
 8002534:	69fb      	ldr	r3, [r7, #28]
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8002536:	62bb      	str	r3, [r7, #40]	; 0x28
 8002538:	2301      	movs	r3, #1
 800253a:	623b      	str	r3, [r7, #32]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800253c:	6a3b      	ldr	r3, [r7, #32]
 800253e:	f383 8810 	msr	PRIMASK, r3
}
 8002542:	46c0      	nop			; (mov r8, r8)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	689a      	ldr	r2, [r3, #8]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	2180      	movs	r1, #128	; 0x80
 8002550:	0409      	lsls	r1, r1, #16
 8002552:	430a      	orrs	r2, r1
 8002554:	609a      	str	r2, [r3, #8]
 8002556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002558:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800255a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255c:	f383 8810 	msr	PRIMASK, r3
}
 8002560:	e029      	b.n	80025b6 <HAL_UART_Transmit_IT+0x132>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	689a      	ldr	r2, [r3, #8]
 8002566:	2380      	movs	r3, #128	; 0x80
 8002568:	015b      	lsls	r3, r3, #5
 800256a:	429a      	cmp	r2, r3
 800256c:	d107      	bne.n	800257e <HAL_UART_Transmit_IT+0xfa>
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d103      	bne.n	800257e <HAL_UART_Transmit_IT+0xfa>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	4a14      	ldr	r2, [pc, #80]	; (80025cc <HAL_UART_Transmit_IT+0x148>)
 800257a:	679a      	str	r2, [r3, #120]	; 0x78
 800257c:	e002      	b.n	8002584 <HAL_UART_Transmit_IT+0x100>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	4a13      	ldr	r2, [pc, #76]	; (80025d0 <HAL_UART_Transmit_IT+0x14c>)
 8002582:	679a      	str	r2, [r3, #120]	; 0x78
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002584:	f3ef 8310 	mrs	r3, PRIMASK
 8002588:	613b      	str	r3, [r7, #16]
  return(result);
 800258a:	693b      	ldr	r3, [r7, #16]
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800258c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800258e:	2301      	movs	r3, #1
 8002590:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	f383 8810 	msr	PRIMASK, r3
}
 8002598:	46c0      	nop			; (mov r8, r8)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2180      	movs	r1, #128	; 0x80
 80025a6:	430a      	orrs	r2, r1
 80025a8:	601a      	str	r2, [r3, #0]
 80025aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ac:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	f383 8810 	msr	PRIMASK, r3
}
 80025b4:	46c0      	nop			; (mov r8, r8)
    }

    return HAL_OK;
 80025b6:	2300      	movs	r3, #0
 80025b8:	e000      	b.n	80025bc <HAL_UART_Transmit_IT+0x138>
  }
  else
  {
    return HAL_BUSY;
 80025ba:	2302      	movs	r3, #2
  }
}
 80025bc:	0018      	movs	r0, r3
 80025be:	46bd      	mov	sp, r7
 80025c0:	b00c      	add	sp, #48	; 0x30
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	08003bb5 	.word	0x08003bb5
 80025c8:	08003ac9 	.word	0x08003ac9
 80025cc:	08003a0b 	.word	0x08003a0b
 80025d0:	08003957 	.word	0x08003957

080025d4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b088      	sub	sp, #32
 80025d8:	af00      	add	r7, sp, #0
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	60b9      	str	r1, [r7, #8]
 80025de:	1dbb      	adds	r3, r7, #6
 80025e0:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	228c      	movs	r2, #140	; 0x8c
 80025e6:	589b      	ldr	r3, [r3, r2]
 80025e8:	2b20      	cmp	r3, #32
 80025ea:	d14a      	bne.n	8002682 <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d003      	beq.n	80025fa <HAL_UART_Receive_IT+0x26>
 80025f2:	1dbb      	adds	r3, r7, #6
 80025f4:	881b      	ldrh	r3, [r3, #0]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d101      	bne.n	80025fe <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e042      	b.n	8002684 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	689a      	ldr	r2, [r3, #8]
 8002602:	2380      	movs	r3, #128	; 0x80
 8002604:	015b      	lsls	r3, r3, #5
 8002606:	429a      	cmp	r2, r3
 8002608:	d109      	bne.n	800261e <HAL_UART_Receive_IT+0x4a>
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d105      	bne.n	800261e <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	2201      	movs	r2, #1
 8002616:	4013      	ands	r3, r2
 8002618:	d001      	beq.n	800261e <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e032      	b.n	8002684 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2200      	movs	r2, #0
 8002622:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a18      	ldr	r2, [pc, #96]	; (800268c <HAL_UART_Receive_IT+0xb8>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d020      	beq.n	8002670 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	685a      	ldr	r2, [r3, #4]
 8002634:	2380      	movs	r3, #128	; 0x80
 8002636:	041b      	lsls	r3, r3, #16
 8002638:	4013      	ands	r3, r2
 800263a:	d019      	beq.n	8002670 <HAL_UART_Receive_IT+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800263c:	f3ef 8310 	mrs	r3, PRIMASK
 8002640:	613b      	str	r3, [r7, #16]
  return(result);
 8002642:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002644:	61fb      	str	r3, [r7, #28]
 8002646:	2301      	movs	r3, #1
 8002648:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	f383 8810 	msr	PRIMASK, r3
}
 8002650:	46c0      	nop			; (mov r8, r8)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	2180      	movs	r1, #128	; 0x80
 800265e:	04c9      	lsls	r1, r1, #19
 8002660:	430a      	orrs	r2, r1
 8002662:	601a      	str	r2, [r3, #0]
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	f383 8810 	msr	PRIMASK, r3
}
 800266e:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002670:	1dbb      	adds	r3, r7, #6
 8002672:	881a      	ldrh	r2, [r3, #0]
 8002674:	68b9      	ldr	r1, [r7, #8]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	0018      	movs	r0, r3
 800267a:	f000 ffcb 	bl	8003614 <UART_Start_Receive_IT>
 800267e:	0003      	movs	r3, r0
 8002680:	e000      	b.n	8002684 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8002682:	2302      	movs	r3, #2
  }
}
 8002684:	0018      	movs	r0, r3
 8002686:	46bd      	mov	sp, r7
 8002688:	b008      	add	sp, #32
 800268a:	bd80      	pop	{r7, pc}
 800268c:	40008000 	.word	0x40008000

08002690 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002690:	b5b0      	push	{r4, r5, r7, lr}
 8002692:	b0aa      	sub	sp, #168	; 0xa8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	69db      	ldr	r3, [r3, #28]
 800269e:	22a4      	movs	r2, #164	; 0xa4
 80026a0:	18b9      	adds	r1, r7, r2
 80026a2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	20a0      	movs	r0, #160	; 0xa0
 80026ac:	1839      	adds	r1, r7, r0
 80026ae:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	249c      	movs	r4, #156	; 0x9c
 80026b8:	1939      	adds	r1, r7, r4
 80026ba:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80026bc:	0011      	movs	r1, r2
 80026be:	18bb      	adds	r3, r7, r2
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4aa2      	ldr	r2, [pc, #648]	; (800294c <HAL_UART_IRQHandler+0x2bc>)
 80026c4:	4013      	ands	r3, r2
 80026c6:	2298      	movs	r2, #152	; 0x98
 80026c8:	18bd      	adds	r5, r7, r2
 80026ca:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 80026cc:	18bb      	adds	r3, r7, r2
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d11a      	bne.n	800270a <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80026d4:	187b      	adds	r3, r7, r1
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2220      	movs	r2, #32
 80026da:	4013      	ands	r3, r2
 80026dc:	d015      	beq.n	800270a <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80026de:	183b      	adds	r3, r7, r0
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2220      	movs	r2, #32
 80026e4:	4013      	ands	r3, r2
 80026e6:	d105      	bne.n	80026f4 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80026e8:	193b      	adds	r3, r7, r4
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	2380      	movs	r3, #128	; 0x80
 80026ee:	055b      	lsls	r3, r3, #21
 80026f0:	4013      	ands	r3, r2
 80026f2:	d00a      	beq.n	800270a <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d100      	bne.n	80026fe <HAL_UART_IRQHandler+0x6e>
 80026fc:	e2dc      	b.n	8002cb8 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	0010      	movs	r0, r2
 8002706:	4798      	blx	r3
      }
      return;
 8002708:	e2d6      	b.n	8002cb8 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800270a:	2398      	movs	r3, #152	; 0x98
 800270c:	18fb      	adds	r3, r7, r3
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d100      	bne.n	8002716 <HAL_UART_IRQHandler+0x86>
 8002714:	e122      	b.n	800295c <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002716:	239c      	movs	r3, #156	; 0x9c
 8002718:	18fb      	adds	r3, r7, r3
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a8c      	ldr	r2, [pc, #560]	; (8002950 <HAL_UART_IRQHandler+0x2c0>)
 800271e:	4013      	ands	r3, r2
 8002720:	d106      	bne.n	8002730 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002722:	23a0      	movs	r3, #160	; 0xa0
 8002724:	18fb      	adds	r3, r7, r3
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a8a      	ldr	r2, [pc, #552]	; (8002954 <HAL_UART_IRQHandler+0x2c4>)
 800272a:	4013      	ands	r3, r2
 800272c:	d100      	bne.n	8002730 <HAL_UART_IRQHandler+0xa0>
 800272e:	e115      	b.n	800295c <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002730:	23a4      	movs	r3, #164	; 0xa4
 8002732:	18fb      	adds	r3, r7, r3
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2201      	movs	r2, #1
 8002738:	4013      	ands	r3, r2
 800273a:	d012      	beq.n	8002762 <HAL_UART_IRQHandler+0xd2>
 800273c:	23a0      	movs	r3, #160	; 0xa0
 800273e:	18fb      	adds	r3, r7, r3
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	2380      	movs	r3, #128	; 0x80
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	4013      	ands	r3, r2
 8002748:	d00b      	beq.n	8002762 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2201      	movs	r2, #1
 8002750:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2290      	movs	r2, #144	; 0x90
 8002756:	589b      	ldr	r3, [r3, r2]
 8002758:	2201      	movs	r2, #1
 800275a:	431a      	orrs	r2, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2190      	movs	r1, #144	; 0x90
 8002760:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002762:	23a4      	movs	r3, #164	; 0xa4
 8002764:	18fb      	adds	r3, r7, r3
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2202      	movs	r2, #2
 800276a:	4013      	ands	r3, r2
 800276c:	d011      	beq.n	8002792 <HAL_UART_IRQHandler+0x102>
 800276e:	239c      	movs	r3, #156	; 0x9c
 8002770:	18fb      	adds	r3, r7, r3
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2201      	movs	r2, #1
 8002776:	4013      	ands	r3, r2
 8002778:	d00b      	beq.n	8002792 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2202      	movs	r2, #2
 8002780:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2290      	movs	r2, #144	; 0x90
 8002786:	589b      	ldr	r3, [r3, r2]
 8002788:	2204      	movs	r2, #4
 800278a:	431a      	orrs	r2, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2190      	movs	r1, #144	; 0x90
 8002790:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002792:	23a4      	movs	r3, #164	; 0xa4
 8002794:	18fb      	adds	r3, r7, r3
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2204      	movs	r2, #4
 800279a:	4013      	ands	r3, r2
 800279c:	d011      	beq.n	80027c2 <HAL_UART_IRQHandler+0x132>
 800279e:	239c      	movs	r3, #156	; 0x9c
 80027a0:	18fb      	adds	r3, r7, r3
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2201      	movs	r2, #1
 80027a6:	4013      	ands	r3, r2
 80027a8:	d00b      	beq.n	80027c2 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2204      	movs	r2, #4
 80027b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2290      	movs	r2, #144	; 0x90
 80027b6:	589b      	ldr	r3, [r3, r2]
 80027b8:	2202      	movs	r2, #2
 80027ba:	431a      	orrs	r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2190      	movs	r1, #144	; 0x90
 80027c0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80027c2:	23a4      	movs	r3, #164	; 0xa4
 80027c4:	18fb      	adds	r3, r7, r3
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2208      	movs	r2, #8
 80027ca:	4013      	ands	r3, r2
 80027cc:	d017      	beq.n	80027fe <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80027ce:	23a0      	movs	r3, #160	; 0xa0
 80027d0:	18fb      	adds	r3, r7, r3
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2220      	movs	r2, #32
 80027d6:	4013      	ands	r3, r2
 80027d8:	d105      	bne.n	80027e6 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80027da:	239c      	movs	r3, #156	; 0x9c
 80027dc:	18fb      	adds	r3, r7, r3
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a5b      	ldr	r2, [pc, #364]	; (8002950 <HAL_UART_IRQHandler+0x2c0>)
 80027e2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80027e4:	d00b      	beq.n	80027fe <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2208      	movs	r2, #8
 80027ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2290      	movs	r2, #144	; 0x90
 80027f2:	589b      	ldr	r3, [r3, r2]
 80027f4:	2208      	movs	r2, #8
 80027f6:	431a      	orrs	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2190      	movs	r1, #144	; 0x90
 80027fc:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80027fe:	23a4      	movs	r3, #164	; 0xa4
 8002800:	18fb      	adds	r3, r7, r3
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	2380      	movs	r3, #128	; 0x80
 8002806:	011b      	lsls	r3, r3, #4
 8002808:	4013      	ands	r3, r2
 800280a:	d013      	beq.n	8002834 <HAL_UART_IRQHandler+0x1a4>
 800280c:	23a0      	movs	r3, #160	; 0xa0
 800280e:	18fb      	adds	r3, r7, r3
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	2380      	movs	r3, #128	; 0x80
 8002814:	04db      	lsls	r3, r3, #19
 8002816:	4013      	ands	r3, r2
 8002818:	d00c      	beq.n	8002834 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2280      	movs	r2, #128	; 0x80
 8002820:	0112      	lsls	r2, r2, #4
 8002822:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2290      	movs	r2, #144	; 0x90
 8002828:	589b      	ldr	r3, [r3, r2]
 800282a:	2220      	movs	r2, #32
 800282c:	431a      	orrs	r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2190      	movs	r1, #144	; 0x90
 8002832:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2290      	movs	r2, #144	; 0x90
 8002838:	589b      	ldr	r3, [r3, r2]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d100      	bne.n	8002840 <HAL_UART_IRQHandler+0x1b0>
 800283e:	e23d      	b.n	8002cbc <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002840:	23a4      	movs	r3, #164	; 0xa4
 8002842:	18fb      	adds	r3, r7, r3
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2220      	movs	r2, #32
 8002848:	4013      	ands	r3, r2
 800284a:	d015      	beq.n	8002878 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800284c:	23a0      	movs	r3, #160	; 0xa0
 800284e:	18fb      	adds	r3, r7, r3
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2220      	movs	r2, #32
 8002854:	4013      	ands	r3, r2
 8002856:	d106      	bne.n	8002866 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002858:	239c      	movs	r3, #156	; 0x9c
 800285a:	18fb      	adds	r3, r7, r3
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	2380      	movs	r3, #128	; 0x80
 8002860:	055b      	lsls	r3, r3, #21
 8002862:	4013      	ands	r3, r2
 8002864:	d008      	beq.n	8002878 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800286a:	2b00      	cmp	r3, #0
 800286c:	d004      	beq.n	8002878 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	0010      	movs	r0, r2
 8002876:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2290      	movs	r2, #144	; 0x90
 800287c:	589b      	ldr	r3, [r3, r2]
 800287e:	2194      	movs	r1, #148	; 0x94
 8002880:	187a      	adds	r2, r7, r1
 8002882:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	2240      	movs	r2, #64	; 0x40
 800288c:	4013      	ands	r3, r2
 800288e:	2b40      	cmp	r3, #64	; 0x40
 8002890:	d004      	beq.n	800289c <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002892:	187b      	adds	r3, r7, r1
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2228      	movs	r2, #40	; 0x28
 8002898:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800289a:	d04c      	beq.n	8002936 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	0018      	movs	r0, r3
 80028a0:	f000 ffdc 	bl	800385c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	2240      	movs	r2, #64	; 0x40
 80028ac:	4013      	ands	r3, r2
 80028ae:	2b40      	cmp	r3, #64	; 0x40
 80028b0:	d13c      	bne.n	800292c <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028b2:	f3ef 8310 	mrs	r3, PRIMASK
 80028b6:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80028b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028ba:	2090      	movs	r0, #144	; 0x90
 80028bc:	183a      	adds	r2, r7, r0
 80028be:	6013      	str	r3, [r2, #0]
 80028c0:	2301      	movs	r3, #1
 80028c2:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80028c6:	f383 8810 	msr	PRIMASK, r3
}
 80028ca:	46c0      	nop			; (mov r8, r8)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	689a      	ldr	r2, [r3, #8]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2140      	movs	r1, #64	; 0x40
 80028d8:	438a      	bics	r2, r1
 80028da:	609a      	str	r2, [r3, #8]
 80028dc:	183b      	adds	r3, r7, r0
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028e4:	f383 8810 	msr	PRIMASK, r3
}
 80028e8:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2280      	movs	r2, #128	; 0x80
 80028ee:	589b      	ldr	r3, [r3, r2]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d016      	beq.n	8002922 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2280      	movs	r2, #128	; 0x80
 80028f8:	589b      	ldr	r3, [r3, r2]
 80028fa:	4a17      	ldr	r2, [pc, #92]	; (8002958 <HAL_UART_IRQHandler+0x2c8>)
 80028fc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2280      	movs	r2, #128	; 0x80
 8002902:	589b      	ldr	r3, [r3, r2]
 8002904:	0018      	movs	r0, r3
 8002906:	f7fe fc03 	bl	8001110 <HAL_DMA_Abort_IT>
 800290a:	1e03      	subs	r3, r0, #0
 800290c:	d01c      	beq.n	8002948 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2280      	movs	r2, #128	; 0x80
 8002912:	589b      	ldr	r3, [r3, r2]
 8002914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	2180      	movs	r1, #128	; 0x80
 800291a:	5852      	ldr	r2, [r2, r1]
 800291c:	0010      	movs	r0, r2
 800291e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002920:	e012      	b.n	8002948 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	0018      	movs	r0, r3
 8002926:	f000 f9d9 	bl	8002cdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800292a:	e00d      	b.n	8002948 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	0018      	movs	r0, r3
 8002930:	f000 f9d4 	bl	8002cdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002934:	e008      	b.n	8002948 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	0018      	movs	r0, r3
 800293a:	f000 f9cf 	bl	8002cdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2290      	movs	r2, #144	; 0x90
 8002942:	2100      	movs	r1, #0
 8002944:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002946:	e1b9      	b.n	8002cbc <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002948:	46c0      	nop			; (mov r8, r8)
    return;
 800294a:	e1b7      	b.n	8002cbc <HAL_UART_IRQHandler+0x62c>
 800294c:	0000080f 	.word	0x0000080f
 8002950:	10000001 	.word	0x10000001
 8002954:	04000120 	.word	0x04000120
 8002958:	08003929 	.word	0x08003929

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002960:	2b01      	cmp	r3, #1
 8002962:	d000      	beq.n	8002966 <HAL_UART_IRQHandler+0x2d6>
 8002964:	e13e      	b.n	8002be4 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002966:	23a4      	movs	r3, #164	; 0xa4
 8002968:	18fb      	adds	r3, r7, r3
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2210      	movs	r2, #16
 800296e:	4013      	ands	r3, r2
 8002970:	d100      	bne.n	8002974 <HAL_UART_IRQHandler+0x2e4>
 8002972:	e137      	b.n	8002be4 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002974:	23a0      	movs	r3, #160	; 0xa0
 8002976:	18fb      	adds	r3, r7, r3
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2210      	movs	r2, #16
 800297c:	4013      	ands	r3, r2
 800297e:	d100      	bne.n	8002982 <HAL_UART_IRQHandler+0x2f2>
 8002980:	e130      	b.n	8002be4 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2210      	movs	r2, #16
 8002988:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	2240      	movs	r2, #64	; 0x40
 8002992:	4013      	ands	r3, r2
 8002994:	2b40      	cmp	r3, #64	; 0x40
 8002996:	d000      	beq.n	800299a <HAL_UART_IRQHandler+0x30a>
 8002998:	e0a4      	b.n	8002ae4 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2280      	movs	r2, #128	; 0x80
 800299e:	589b      	ldr	r3, [r3, r2]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	685a      	ldr	r2, [r3, #4]
 80029a4:	217e      	movs	r1, #126	; 0x7e
 80029a6:	187b      	adds	r3, r7, r1
 80029a8:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80029aa:	187b      	adds	r3, r7, r1
 80029ac:	881b      	ldrh	r3, [r3, #0]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d100      	bne.n	80029b4 <HAL_UART_IRQHandler+0x324>
 80029b2:	e185      	b.n	8002cc0 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	225c      	movs	r2, #92	; 0x5c
 80029b8:	5a9b      	ldrh	r3, [r3, r2]
 80029ba:	187a      	adds	r2, r7, r1
 80029bc:	8812      	ldrh	r2, [r2, #0]
 80029be:	429a      	cmp	r2, r3
 80029c0:	d300      	bcc.n	80029c4 <HAL_UART_IRQHandler+0x334>
 80029c2:	e17d      	b.n	8002cc0 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	187a      	adds	r2, r7, r1
 80029c8:	215e      	movs	r1, #94	; 0x5e
 80029ca:	8812      	ldrh	r2, [r2, #0]
 80029cc:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2280      	movs	r2, #128	; 0x80
 80029d2:	589b      	ldr	r3, [r3, r2]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2220      	movs	r2, #32
 80029da:	4013      	ands	r3, r2
 80029dc:	d170      	bne.n	8002ac0 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029de:	f3ef 8310 	mrs	r3, PRIMASK
 80029e2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80029e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80029e6:	67bb      	str	r3, [r7, #120]	; 0x78
 80029e8:	2301      	movs	r3, #1
 80029ea:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029ee:	f383 8810 	msr	PRIMASK, r3
}
 80029f2:	46c0      	nop			; (mov r8, r8)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	49b4      	ldr	r1, [pc, #720]	; (8002cd0 <HAL_UART_IRQHandler+0x640>)
 8002a00:	400a      	ands	r2, r1
 8002a02:	601a      	str	r2, [r3, #0]
 8002a04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a06:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a0a:	f383 8810 	msr	PRIMASK, r3
}
 8002a0e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a10:	f3ef 8310 	mrs	r3, PRIMASK
 8002a14:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8002a16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a18:	677b      	str	r3, [r7, #116]	; 0x74
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a20:	f383 8810 	msr	PRIMASK, r3
}
 8002a24:	46c0      	nop			; (mov r8, r8)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	689a      	ldr	r2, [r3, #8]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2101      	movs	r1, #1
 8002a32:	438a      	bics	r2, r1
 8002a34:	609a      	str	r2, [r3, #8]
 8002a36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a38:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a3c:	f383 8810 	msr	PRIMASK, r3
}
 8002a40:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a42:	f3ef 8310 	mrs	r3, PRIMASK
 8002a46:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002a48:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a4a:	673b      	str	r3, [r7, #112]	; 0x70
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a52:	f383 8810 	msr	PRIMASK, r3
}
 8002a56:	46c0      	nop			; (mov r8, r8)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	689a      	ldr	r2, [r3, #8]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2140      	movs	r1, #64	; 0x40
 8002a64:	438a      	bics	r2, r1
 8002a66:	609a      	str	r2, [r3, #8]
 8002a68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a6a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a6e:	f383 8810 	msr	PRIMASK, r3
}
 8002a72:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	228c      	movs	r2, #140	; 0x8c
 8002a78:	2120      	movs	r1, #32
 8002a7a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a82:	f3ef 8310 	mrs	r3, PRIMASK
 8002a86:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8002a88:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a8a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a92:	f383 8810 	msr	PRIMASK, r3
}
 8002a96:	46c0      	nop			; (mov r8, r8)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2110      	movs	r1, #16
 8002aa4:	438a      	bics	r2, r1
 8002aa6:	601a      	str	r2, [r3, #0]
 8002aa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002aaa:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002aac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002aae:	f383 8810 	msr	PRIMASK, r3
}
 8002ab2:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2280      	movs	r2, #128	; 0x80
 8002ab8:	589b      	ldr	r3, [r3, r2]
 8002aba:	0018      	movs	r0, r3
 8002abc:	f7fe fac6 	bl	800104c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2202      	movs	r2, #2
 8002ac4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	225c      	movs	r2, #92	; 0x5c
 8002aca:	5a9a      	ldrh	r2, [r3, r2]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	215e      	movs	r1, #94	; 0x5e
 8002ad0:	5a5b      	ldrh	r3, [r3, r1]
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	0011      	movs	r1, r2
 8002adc:	0018      	movs	r0, r3
 8002ade:	f000 f905 	bl	8002cec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002ae2:	e0ed      	b.n	8002cc0 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	225c      	movs	r2, #92	; 0x5c
 8002ae8:	5a99      	ldrh	r1, [r3, r2]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	225e      	movs	r2, #94	; 0x5e
 8002aee:	5a9b      	ldrh	r3, [r3, r2]
 8002af0:	b29a      	uxth	r2, r3
 8002af2:	208e      	movs	r0, #142	; 0x8e
 8002af4:	183b      	adds	r3, r7, r0
 8002af6:	1a8a      	subs	r2, r1, r2
 8002af8:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	225e      	movs	r2, #94	; 0x5e
 8002afe:	5a9b      	ldrh	r3, [r3, r2]
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d100      	bne.n	8002b08 <HAL_UART_IRQHandler+0x478>
 8002b06:	e0dd      	b.n	8002cc4 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8002b08:	183b      	adds	r3, r7, r0
 8002b0a:	881b      	ldrh	r3, [r3, #0]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d100      	bne.n	8002b12 <HAL_UART_IRQHandler+0x482>
 8002b10:	e0d8      	b.n	8002cc4 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b12:	f3ef 8310 	mrs	r3, PRIMASK
 8002b16:	60fb      	str	r3, [r7, #12]
  return(result);
 8002b18:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002b1a:	2488      	movs	r4, #136	; 0x88
 8002b1c:	193a      	adds	r2, r7, r4
 8002b1e:	6013      	str	r3, [r2, #0]
 8002b20:	2301      	movs	r3, #1
 8002b22:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	f383 8810 	msr	PRIMASK, r3
}
 8002b2a:	46c0      	nop			; (mov r8, r8)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4967      	ldr	r1, [pc, #412]	; (8002cd4 <HAL_UART_IRQHandler+0x644>)
 8002b38:	400a      	ands	r2, r1
 8002b3a:	601a      	str	r2, [r3, #0]
 8002b3c:	193b      	adds	r3, r7, r4
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	f383 8810 	msr	PRIMASK, r3
}
 8002b48:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b4a:	f3ef 8310 	mrs	r3, PRIMASK
 8002b4e:	61bb      	str	r3, [r7, #24]
  return(result);
 8002b50:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002b52:	2484      	movs	r4, #132	; 0x84
 8002b54:	193a      	adds	r2, r7, r4
 8002b56:	6013      	str	r3, [r2, #0]
 8002b58:	2301      	movs	r3, #1
 8002b5a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	f383 8810 	msr	PRIMASK, r3
}
 8002b62:	46c0      	nop			; (mov r8, r8)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	689a      	ldr	r2, [r3, #8]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	495a      	ldr	r1, [pc, #360]	; (8002cd8 <HAL_UART_IRQHandler+0x648>)
 8002b70:	400a      	ands	r2, r1
 8002b72:	609a      	str	r2, [r3, #8]
 8002b74:	193b      	adds	r3, r7, r4
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b7a:	6a3b      	ldr	r3, [r7, #32]
 8002b7c:	f383 8810 	msr	PRIMASK, r3
}
 8002b80:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	228c      	movs	r2, #140	; 0x8c
 8002b86:	2120      	movs	r1, #32
 8002b88:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b96:	f3ef 8310 	mrs	r3, PRIMASK
 8002b9a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b9e:	2480      	movs	r4, #128	; 0x80
 8002ba0:	193a      	adds	r2, r7, r4
 8002ba2:	6013      	str	r3, [r2, #0]
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002baa:	f383 8810 	msr	PRIMASK, r3
}
 8002bae:	46c0      	nop			; (mov r8, r8)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2110      	movs	r1, #16
 8002bbc:	438a      	bics	r2, r1
 8002bbe:	601a      	str	r2, [r3, #0]
 8002bc0:	193b      	adds	r3, r7, r4
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bc8:	f383 8810 	msr	PRIMASK, r3
}
 8002bcc:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2202      	movs	r2, #2
 8002bd2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002bd4:	183b      	adds	r3, r7, r0
 8002bd6:	881a      	ldrh	r2, [r3, #0]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	0011      	movs	r1, r2
 8002bdc:	0018      	movs	r0, r3
 8002bde:	f000 f885 	bl	8002cec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002be2:	e06f      	b.n	8002cc4 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002be4:	23a4      	movs	r3, #164	; 0xa4
 8002be6:	18fb      	adds	r3, r7, r3
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	2380      	movs	r3, #128	; 0x80
 8002bec:	035b      	lsls	r3, r3, #13
 8002bee:	4013      	ands	r3, r2
 8002bf0:	d010      	beq.n	8002c14 <HAL_UART_IRQHandler+0x584>
 8002bf2:	239c      	movs	r3, #156	; 0x9c
 8002bf4:	18fb      	adds	r3, r7, r3
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	2380      	movs	r3, #128	; 0x80
 8002bfa:	03db      	lsls	r3, r3, #15
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	d009      	beq.n	8002c14 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2280      	movs	r2, #128	; 0x80
 8002c06:	0352      	lsls	r2, r2, #13
 8002c08:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	0018      	movs	r0, r3
 8002c0e:	f001 fcd7 	bl	80045c0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002c12:	e05a      	b.n	8002cca <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002c14:	23a4      	movs	r3, #164	; 0xa4
 8002c16:	18fb      	adds	r3, r7, r3
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2280      	movs	r2, #128	; 0x80
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	d016      	beq.n	8002c4e <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002c20:	23a0      	movs	r3, #160	; 0xa0
 8002c22:	18fb      	adds	r3, r7, r3
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2280      	movs	r2, #128	; 0x80
 8002c28:	4013      	ands	r3, r2
 8002c2a:	d106      	bne.n	8002c3a <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002c2c:	239c      	movs	r3, #156	; 0x9c
 8002c2e:	18fb      	adds	r3, r7, r3
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	2380      	movs	r3, #128	; 0x80
 8002c34:	041b      	lsls	r3, r3, #16
 8002c36:	4013      	ands	r3, r2
 8002c38:	d009      	beq.n	8002c4e <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d042      	beq.n	8002cc8 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	0010      	movs	r0, r2
 8002c4a:	4798      	blx	r3
    }
    return;
 8002c4c:	e03c      	b.n	8002cc8 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002c4e:	23a4      	movs	r3, #164	; 0xa4
 8002c50:	18fb      	adds	r3, r7, r3
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2240      	movs	r2, #64	; 0x40
 8002c56:	4013      	ands	r3, r2
 8002c58:	d00a      	beq.n	8002c70 <HAL_UART_IRQHandler+0x5e0>
 8002c5a:	23a0      	movs	r3, #160	; 0xa0
 8002c5c:	18fb      	adds	r3, r7, r3
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2240      	movs	r2, #64	; 0x40
 8002c62:	4013      	ands	r3, r2
 8002c64:	d004      	beq.n	8002c70 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	0018      	movs	r0, r3
 8002c6a:	f001 f81d 	bl	8003ca8 <UART_EndTransmit_IT>
    return;
 8002c6e:	e02c      	b.n	8002cca <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002c70:	23a4      	movs	r3, #164	; 0xa4
 8002c72:	18fb      	adds	r3, r7, r3
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	2380      	movs	r3, #128	; 0x80
 8002c78:	041b      	lsls	r3, r3, #16
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	d00b      	beq.n	8002c96 <HAL_UART_IRQHandler+0x606>
 8002c7e:	23a0      	movs	r3, #160	; 0xa0
 8002c80:	18fb      	adds	r3, r7, r3
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	2380      	movs	r3, #128	; 0x80
 8002c86:	05db      	lsls	r3, r3, #23
 8002c88:	4013      	ands	r3, r2
 8002c8a:	d004      	beq.n	8002c96 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	0018      	movs	r0, r3
 8002c90:	f001 fca6 	bl	80045e0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002c94:	e019      	b.n	8002cca <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002c96:	23a4      	movs	r3, #164	; 0xa4
 8002c98:	18fb      	adds	r3, r7, r3
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	2380      	movs	r3, #128	; 0x80
 8002c9e:	045b      	lsls	r3, r3, #17
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	d012      	beq.n	8002cca <HAL_UART_IRQHandler+0x63a>
 8002ca4:	23a0      	movs	r3, #160	; 0xa0
 8002ca6:	18fb      	adds	r3, r7, r3
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	da0d      	bge.n	8002cca <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	0018      	movs	r0, r3
 8002cb2:	f001 fc8d 	bl	80045d0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002cb6:	e008      	b.n	8002cca <HAL_UART_IRQHandler+0x63a>
      return;
 8002cb8:	46c0      	nop			; (mov r8, r8)
 8002cba:	e006      	b.n	8002cca <HAL_UART_IRQHandler+0x63a>
    return;
 8002cbc:	46c0      	nop			; (mov r8, r8)
 8002cbe:	e004      	b.n	8002cca <HAL_UART_IRQHandler+0x63a>
      return;
 8002cc0:	46c0      	nop			; (mov r8, r8)
 8002cc2:	e002      	b.n	8002cca <HAL_UART_IRQHandler+0x63a>
      return;
 8002cc4:	46c0      	nop			; (mov r8, r8)
 8002cc6:	e000      	b.n	8002cca <HAL_UART_IRQHandler+0x63a>
    return;
 8002cc8:	46c0      	nop			; (mov r8, r8)
  }
}
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	b02a      	add	sp, #168	; 0xa8
 8002cce:	bdb0      	pop	{r4, r5, r7, pc}
 8002cd0:	fffffeff 	.word	0xfffffeff
 8002cd4:	fffffedf 	.word	0xfffffedf
 8002cd8:	effffffe 	.word	0xeffffffe

08002cdc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002ce4:	46c0      	nop			; (mov r8, r8)
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	b002      	add	sp, #8
 8002cea:	bd80      	pop	{r7, pc}

08002cec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	000a      	movs	r2, r1
 8002cf6:	1cbb      	adds	r3, r7, #2
 8002cf8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002cfa:	46c0      	nop			; (mov r8, r8)
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	b002      	add	sp, #8
 8002d00:	bd80      	pop	{r7, pc}
	...

08002d04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d04:	b5b0      	push	{r4, r5, r7, lr}
 8002d06:	b090      	sub	sp, #64	; 0x40
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d0c:	231a      	movs	r3, #26
 8002d0e:	2220      	movs	r2, #32
 8002d10:	189b      	adds	r3, r3, r2
 8002d12:	19db      	adds	r3, r3, r7
 8002d14:	2200      	movs	r2, #0
 8002d16:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1a:	689a      	ldr	r2, [r3, #8]
 8002d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1e:	691b      	ldr	r3, [r3, #16]
 8002d20:	431a      	orrs	r2, r3
 8002d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	431a      	orrs	r2, r3
 8002d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2a:	69db      	ldr	r3, [r3, #28]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4aaf      	ldr	r2, [pc, #700]	; (8002ff4 <UART_SetConfig+0x2f0>)
 8002d38:	4013      	ands	r3, r2
 8002d3a:	0019      	movs	r1, r3
 8002d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d42:	430b      	orrs	r3, r1
 8002d44:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	4aaa      	ldr	r2, [pc, #680]	; (8002ff8 <UART_SetConfig+0x2f4>)
 8002d4e:	4013      	ands	r3, r2
 8002d50:	0018      	movs	r0, r3
 8002d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d54:	68d9      	ldr	r1, [r3, #12]
 8002d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	0003      	movs	r3, r0
 8002d5c:	430b      	orrs	r3, r1
 8002d5e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d62:	699b      	ldr	r3, [r3, #24]
 8002d64:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4aa4      	ldr	r2, [pc, #656]	; (8002ffc <UART_SetConfig+0x2f8>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d004      	beq.n	8002d7a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d72:	6a1b      	ldr	r3, [r3, #32]
 8002d74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d76:	4313      	orrs	r3, r2
 8002d78:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	4a9f      	ldr	r2, [pc, #636]	; (8003000 <UART_SetConfig+0x2fc>)
 8002d82:	4013      	ands	r3, r2
 8002d84:	0019      	movs	r1, r3
 8002d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d8c:	430b      	orrs	r3, r1
 8002d8e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d96:	220f      	movs	r2, #15
 8002d98:	4393      	bics	r3, r2
 8002d9a:	0018      	movs	r0, r3
 8002d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	0003      	movs	r3, r0
 8002da6:	430b      	orrs	r3, r1
 8002da8:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a95      	ldr	r2, [pc, #596]	; (8003004 <UART_SetConfig+0x300>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d131      	bne.n	8002e18 <UART_SetConfig+0x114>
 8002db4:	4b94      	ldr	r3, [pc, #592]	; (8003008 <UART_SetConfig+0x304>)
 8002db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002db8:	2203      	movs	r2, #3
 8002dba:	4013      	ands	r3, r2
 8002dbc:	2b03      	cmp	r3, #3
 8002dbe:	d01d      	beq.n	8002dfc <UART_SetConfig+0xf8>
 8002dc0:	d823      	bhi.n	8002e0a <UART_SetConfig+0x106>
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d00c      	beq.n	8002de0 <UART_SetConfig+0xdc>
 8002dc6:	d820      	bhi.n	8002e0a <UART_SetConfig+0x106>
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d002      	beq.n	8002dd2 <UART_SetConfig+0xce>
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d00e      	beq.n	8002dee <UART_SetConfig+0xea>
 8002dd0:	e01b      	b.n	8002e0a <UART_SetConfig+0x106>
 8002dd2:	231b      	movs	r3, #27
 8002dd4:	2220      	movs	r2, #32
 8002dd6:	189b      	adds	r3, r3, r2
 8002dd8:	19db      	adds	r3, r3, r7
 8002dda:	2200      	movs	r2, #0
 8002ddc:	701a      	strb	r2, [r3, #0]
 8002dde:	e0b4      	b.n	8002f4a <UART_SetConfig+0x246>
 8002de0:	231b      	movs	r3, #27
 8002de2:	2220      	movs	r2, #32
 8002de4:	189b      	adds	r3, r3, r2
 8002de6:	19db      	adds	r3, r3, r7
 8002de8:	2202      	movs	r2, #2
 8002dea:	701a      	strb	r2, [r3, #0]
 8002dec:	e0ad      	b.n	8002f4a <UART_SetConfig+0x246>
 8002dee:	231b      	movs	r3, #27
 8002df0:	2220      	movs	r2, #32
 8002df2:	189b      	adds	r3, r3, r2
 8002df4:	19db      	adds	r3, r3, r7
 8002df6:	2204      	movs	r2, #4
 8002df8:	701a      	strb	r2, [r3, #0]
 8002dfa:	e0a6      	b.n	8002f4a <UART_SetConfig+0x246>
 8002dfc:	231b      	movs	r3, #27
 8002dfe:	2220      	movs	r2, #32
 8002e00:	189b      	adds	r3, r3, r2
 8002e02:	19db      	adds	r3, r3, r7
 8002e04:	2208      	movs	r2, #8
 8002e06:	701a      	strb	r2, [r3, #0]
 8002e08:	e09f      	b.n	8002f4a <UART_SetConfig+0x246>
 8002e0a:	231b      	movs	r3, #27
 8002e0c:	2220      	movs	r2, #32
 8002e0e:	189b      	adds	r3, r3, r2
 8002e10:	19db      	adds	r3, r3, r7
 8002e12:	2210      	movs	r2, #16
 8002e14:	701a      	strb	r2, [r3, #0]
 8002e16:	e098      	b.n	8002f4a <UART_SetConfig+0x246>
 8002e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a7b      	ldr	r2, [pc, #492]	; (800300c <UART_SetConfig+0x308>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d131      	bne.n	8002e86 <UART_SetConfig+0x182>
 8002e22:	4b79      	ldr	r3, [pc, #484]	; (8003008 <UART_SetConfig+0x304>)
 8002e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e26:	220c      	movs	r2, #12
 8002e28:	4013      	ands	r3, r2
 8002e2a:	2b0c      	cmp	r3, #12
 8002e2c:	d01d      	beq.n	8002e6a <UART_SetConfig+0x166>
 8002e2e:	d823      	bhi.n	8002e78 <UART_SetConfig+0x174>
 8002e30:	2b08      	cmp	r3, #8
 8002e32:	d00c      	beq.n	8002e4e <UART_SetConfig+0x14a>
 8002e34:	d820      	bhi.n	8002e78 <UART_SetConfig+0x174>
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d002      	beq.n	8002e40 <UART_SetConfig+0x13c>
 8002e3a:	2b04      	cmp	r3, #4
 8002e3c:	d00e      	beq.n	8002e5c <UART_SetConfig+0x158>
 8002e3e:	e01b      	b.n	8002e78 <UART_SetConfig+0x174>
 8002e40:	231b      	movs	r3, #27
 8002e42:	2220      	movs	r2, #32
 8002e44:	189b      	adds	r3, r3, r2
 8002e46:	19db      	adds	r3, r3, r7
 8002e48:	2200      	movs	r2, #0
 8002e4a:	701a      	strb	r2, [r3, #0]
 8002e4c:	e07d      	b.n	8002f4a <UART_SetConfig+0x246>
 8002e4e:	231b      	movs	r3, #27
 8002e50:	2220      	movs	r2, #32
 8002e52:	189b      	adds	r3, r3, r2
 8002e54:	19db      	adds	r3, r3, r7
 8002e56:	2202      	movs	r2, #2
 8002e58:	701a      	strb	r2, [r3, #0]
 8002e5a:	e076      	b.n	8002f4a <UART_SetConfig+0x246>
 8002e5c:	231b      	movs	r3, #27
 8002e5e:	2220      	movs	r2, #32
 8002e60:	189b      	adds	r3, r3, r2
 8002e62:	19db      	adds	r3, r3, r7
 8002e64:	2204      	movs	r2, #4
 8002e66:	701a      	strb	r2, [r3, #0]
 8002e68:	e06f      	b.n	8002f4a <UART_SetConfig+0x246>
 8002e6a:	231b      	movs	r3, #27
 8002e6c:	2220      	movs	r2, #32
 8002e6e:	189b      	adds	r3, r3, r2
 8002e70:	19db      	adds	r3, r3, r7
 8002e72:	2208      	movs	r2, #8
 8002e74:	701a      	strb	r2, [r3, #0]
 8002e76:	e068      	b.n	8002f4a <UART_SetConfig+0x246>
 8002e78:	231b      	movs	r3, #27
 8002e7a:	2220      	movs	r2, #32
 8002e7c:	189b      	adds	r3, r3, r2
 8002e7e:	19db      	adds	r3, r3, r7
 8002e80:	2210      	movs	r2, #16
 8002e82:	701a      	strb	r2, [r3, #0]
 8002e84:	e061      	b.n	8002f4a <UART_SetConfig+0x246>
 8002e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a61      	ldr	r2, [pc, #388]	; (8003010 <UART_SetConfig+0x30c>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d106      	bne.n	8002e9e <UART_SetConfig+0x19a>
 8002e90:	231b      	movs	r3, #27
 8002e92:	2220      	movs	r2, #32
 8002e94:	189b      	adds	r3, r3, r2
 8002e96:	19db      	adds	r3, r3, r7
 8002e98:	2200      	movs	r2, #0
 8002e9a:	701a      	strb	r2, [r3, #0]
 8002e9c:	e055      	b.n	8002f4a <UART_SetConfig+0x246>
 8002e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a5c      	ldr	r2, [pc, #368]	; (8003014 <UART_SetConfig+0x310>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d106      	bne.n	8002eb6 <UART_SetConfig+0x1b2>
 8002ea8:	231b      	movs	r3, #27
 8002eaa:	2220      	movs	r2, #32
 8002eac:	189b      	adds	r3, r3, r2
 8002eae:	19db      	adds	r3, r3, r7
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	701a      	strb	r2, [r3, #0]
 8002eb4:	e049      	b.n	8002f4a <UART_SetConfig+0x246>
 8002eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a50      	ldr	r2, [pc, #320]	; (8002ffc <UART_SetConfig+0x2f8>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d13e      	bne.n	8002f3e <UART_SetConfig+0x23a>
 8002ec0:	4b51      	ldr	r3, [pc, #324]	; (8003008 <UART_SetConfig+0x304>)
 8002ec2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002ec4:	23c0      	movs	r3, #192	; 0xc0
 8002ec6:	011b      	lsls	r3, r3, #4
 8002ec8:	4013      	ands	r3, r2
 8002eca:	22c0      	movs	r2, #192	; 0xc0
 8002ecc:	0112      	lsls	r2, r2, #4
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d027      	beq.n	8002f22 <UART_SetConfig+0x21e>
 8002ed2:	22c0      	movs	r2, #192	; 0xc0
 8002ed4:	0112      	lsls	r2, r2, #4
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d82a      	bhi.n	8002f30 <UART_SetConfig+0x22c>
 8002eda:	2280      	movs	r2, #128	; 0x80
 8002edc:	0112      	lsls	r2, r2, #4
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d011      	beq.n	8002f06 <UART_SetConfig+0x202>
 8002ee2:	2280      	movs	r2, #128	; 0x80
 8002ee4:	0112      	lsls	r2, r2, #4
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d822      	bhi.n	8002f30 <UART_SetConfig+0x22c>
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d004      	beq.n	8002ef8 <UART_SetConfig+0x1f4>
 8002eee:	2280      	movs	r2, #128	; 0x80
 8002ef0:	00d2      	lsls	r2, r2, #3
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d00e      	beq.n	8002f14 <UART_SetConfig+0x210>
 8002ef6:	e01b      	b.n	8002f30 <UART_SetConfig+0x22c>
 8002ef8:	231b      	movs	r3, #27
 8002efa:	2220      	movs	r2, #32
 8002efc:	189b      	adds	r3, r3, r2
 8002efe:	19db      	adds	r3, r3, r7
 8002f00:	2200      	movs	r2, #0
 8002f02:	701a      	strb	r2, [r3, #0]
 8002f04:	e021      	b.n	8002f4a <UART_SetConfig+0x246>
 8002f06:	231b      	movs	r3, #27
 8002f08:	2220      	movs	r2, #32
 8002f0a:	189b      	adds	r3, r3, r2
 8002f0c:	19db      	adds	r3, r3, r7
 8002f0e:	2202      	movs	r2, #2
 8002f10:	701a      	strb	r2, [r3, #0]
 8002f12:	e01a      	b.n	8002f4a <UART_SetConfig+0x246>
 8002f14:	231b      	movs	r3, #27
 8002f16:	2220      	movs	r2, #32
 8002f18:	189b      	adds	r3, r3, r2
 8002f1a:	19db      	adds	r3, r3, r7
 8002f1c:	2204      	movs	r2, #4
 8002f1e:	701a      	strb	r2, [r3, #0]
 8002f20:	e013      	b.n	8002f4a <UART_SetConfig+0x246>
 8002f22:	231b      	movs	r3, #27
 8002f24:	2220      	movs	r2, #32
 8002f26:	189b      	adds	r3, r3, r2
 8002f28:	19db      	adds	r3, r3, r7
 8002f2a:	2208      	movs	r2, #8
 8002f2c:	701a      	strb	r2, [r3, #0]
 8002f2e:	e00c      	b.n	8002f4a <UART_SetConfig+0x246>
 8002f30:	231b      	movs	r3, #27
 8002f32:	2220      	movs	r2, #32
 8002f34:	189b      	adds	r3, r3, r2
 8002f36:	19db      	adds	r3, r3, r7
 8002f38:	2210      	movs	r2, #16
 8002f3a:	701a      	strb	r2, [r3, #0]
 8002f3c:	e005      	b.n	8002f4a <UART_SetConfig+0x246>
 8002f3e:	231b      	movs	r3, #27
 8002f40:	2220      	movs	r2, #32
 8002f42:	189b      	adds	r3, r3, r2
 8002f44:	19db      	adds	r3, r3, r7
 8002f46:	2210      	movs	r2, #16
 8002f48:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a2b      	ldr	r2, [pc, #172]	; (8002ffc <UART_SetConfig+0x2f8>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d000      	beq.n	8002f56 <UART_SetConfig+0x252>
 8002f54:	e0a9      	b.n	80030aa <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002f56:	231b      	movs	r3, #27
 8002f58:	2220      	movs	r2, #32
 8002f5a:	189b      	adds	r3, r3, r2
 8002f5c:	19db      	adds	r3, r3, r7
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	2b08      	cmp	r3, #8
 8002f62:	d015      	beq.n	8002f90 <UART_SetConfig+0x28c>
 8002f64:	dc18      	bgt.n	8002f98 <UART_SetConfig+0x294>
 8002f66:	2b04      	cmp	r3, #4
 8002f68:	d00d      	beq.n	8002f86 <UART_SetConfig+0x282>
 8002f6a:	dc15      	bgt.n	8002f98 <UART_SetConfig+0x294>
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d002      	beq.n	8002f76 <UART_SetConfig+0x272>
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d005      	beq.n	8002f80 <UART_SetConfig+0x27c>
 8002f74:	e010      	b.n	8002f98 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f76:	f7ff f861 	bl	800203c <HAL_RCC_GetPCLK1Freq>
 8002f7a:	0003      	movs	r3, r0
 8002f7c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002f7e:	e014      	b.n	8002faa <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f80:	4b25      	ldr	r3, [pc, #148]	; (8003018 <UART_SetConfig+0x314>)
 8002f82:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002f84:	e011      	b.n	8002faa <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f86:	f7fe ffcd 	bl	8001f24 <HAL_RCC_GetSysClockFreq>
 8002f8a:	0003      	movs	r3, r0
 8002f8c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002f8e:	e00c      	b.n	8002faa <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f90:	2380      	movs	r3, #128	; 0x80
 8002f92:	021b      	lsls	r3, r3, #8
 8002f94:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002f96:	e008      	b.n	8002faa <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002f9c:	231a      	movs	r3, #26
 8002f9e:	2220      	movs	r2, #32
 8002fa0:	189b      	adds	r3, r3, r2
 8002fa2:	19db      	adds	r3, r3, r7
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	701a      	strb	r2, [r3, #0]
        break;
 8002fa8:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d100      	bne.n	8002fb2 <UART_SetConfig+0x2ae>
 8002fb0:	e14b      	b.n	800324a <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fb6:	4b19      	ldr	r3, [pc, #100]	; (800301c <UART_SetConfig+0x318>)
 8002fb8:	0052      	lsls	r2, r2, #1
 8002fba:	5ad3      	ldrh	r3, [r2, r3]
 8002fbc:	0019      	movs	r1, r3
 8002fbe:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002fc0:	f7fd f8a0 	bl	8000104 <__udivsi3>
 8002fc4:	0003      	movs	r3, r0
 8002fc6:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fca:	685a      	ldr	r2, [r3, #4]
 8002fcc:	0013      	movs	r3, r2
 8002fce:	005b      	lsls	r3, r3, #1
 8002fd0:	189b      	adds	r3, r3, r2
 8002fd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d305      	bcc.n	8002fe4 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002fde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d91d      	bls.n	8003020 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8002fe4:	231a      	movs	r3, #26
 8002fe6:	2220      	movs	r2, #32
 8002fe8:	189b      	adds	r3, r3, r2
 8002fea:	19db      	adds	r3, r3, r7
 8002fec:	2201      	movs	r2, #1
 8002fee:	701a      	strb	r2, [r3, #0]
 8002ff0:	e12b      	b.n	800324a <UART_SetConfig+0x546>
 8002ff2:	46c0      	nop			; (mov r8, r8)
 8002ff4:	cfff69f3 	.word	0xcfff69f3
 8002ff8:	ffffcfff 	.word	0xffffcfff
 8002ffc:	40008000 	.word	0x40008000
 8003000:	11fff4ff 	.word	0x11fff4ff
 8003004:	40013800 	.word	0x40013800
 8003008:	40021000 	.word	0x40021000
 800300c:	40004400 	.word	0x40004400
 8003010:	40004800 	.word	0x40004800
 8003014:	40004c00 	.word	0x40004c00
 8003018:	00f42400 	.word	0x00f42400
 800301c:	080049cc 	.word	0x080049cc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003022:	61bb      	str	r3, [r7, #24]
 8003024:	2300      	movs	r3, #0
 8003026:	61fb      	str	r3, [r7, #28]
 8003028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800302c:	4b92      	ldr	r3, [pc, #584]	; (8003278 <UART_SetConfig+0x574>)
 800302e:	0052      	lsls	r2, r2, #1
 8003030:	5ad3      	ldrh	r3, [r2, r3]
 8003032:	613b      	str	r3, [r7, #16]
 8003034:	2300      	movs	r3, #0
 8003036:	617b      	str	r3, [r7, #20]
 8003038:	693a      	ldr	r2, [r7, #16]
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	69b8      	ldr	r0, [r7, #24]
 800303e:	69f9      	ldr	r1, [r7, #28]
 8003040:	f7fd f9d6 	bl	80003f0 <__aeabi_uldivmod>
 8003044:	0002      	movs	r2, r0
 8003046:	000b      	movs	r3, r1
 8003048:	0e11      	lsrs	r1, r2, #24
 800304a:	021d      	lsls	r5, r3, #8
 800304c:	430d      	orrs	r5, r1
 800304e:	0214      	lsls	r4, r2, #8
 8003050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	085b      	lsrs	r3, r3, #1
 8003056:	60bb      	str	r3, [r7, #8]
 8003058:	2300      	movs	r3, #0
 800305a:	60fb      	str	r3, [r7, #12]
 800305c:	68b8      	ldr	r0, [r7, #8]
 800305e:	68f9      	ldr	r1, [r7, #12]
 8003060:	1900      	adds	r0, r0, r4
 8003062:	4169      	adcs	r1, r5
 8003064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	603b      	str	r3, [r7, #0]
 800306a:	2300      	movs	r3, #0
 800306c:	607b      	str	r3, [r7, #4]
 800306e:	683a      	ldr	r2, [r7, #0]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f7fd f9bd 	bl	80003f0 <__aeabi_uldivmod>
 8003076:	0002      	movs	r2, r0
 8003078:	000b      	movs	r3, r1
 800307a:	0013      	movs	r3, r2
 800307c:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800307e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003080:	23c0      	movs	r3, #192	; 0xc0
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	429a      	cmp	r2, r3
 8003086:	d309      	bcc.n	800309c <UART_SetConfig+0x398>
 8003088:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800308a:	2380      	movs	r3, #128	; 0x80
 800308c:	035b      	lsls	r3, r3, #13
 800308e:	429a      	cmp	r2, r3
 8003090:	d204      	bcs.n	800309c <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8003092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003098:	60da      	str	r2, [r3, #12]
 800309a:	e0d6      	b.n	800324a <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 800309c:	231a      	movs	r3, #26
 800309e:	2220      	movs	r2, #32
 80030a0:	189b      	adds	r3, r3, r2
 80030a2:	19db      	adds	r3, r3, r7
 80030a4:	2201      	movs	r2, #1
 80030a6:	701a      	strb	r2, [r3, #0]
 80030a8:	e0cf      	b.n	800324a <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ac:	69da      	ldr	r2, [r3, #28]
 80030ae:	2380      	movs	r3, #128	; 0x80
 80030b0:	021b      	lsls	r3, r3, #8
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d000      	beq.n	80030b8 <UART_SetConfig+0x3b4>
 80030b6:	e070      	b.n	800319a <UART_SetConfig+0x496>
  {
    switch (clocksource)
 80030b8:	231b      	movs	r3, #27
 80030ba:	2220      	movs	r2, #32
 80030bc:	189b      	adds	r3, r3, r2
 80030be:	19db      	adds	r3, r3, r7
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	2b08      	cmp	r3, #8
 80030c4:	d015      	beq.n	80030f2 <UART_SetConfig+0x3ee>
 80030c6:	dc18      	bgt.n	80030fa <UART_SetConfig+0x3f6>
 80030c8:	2b04      	cmp	r3, #4
 80030ca:	d00d      	beq.n	80030e8 <UART_SetConfig+0x3e4>
 80030cc:	dc15      	bgt.n	80030fa <UART_SetConfig+0x3f6>
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d002      	beq.n	80030d8 <UART_SetConfig+0x3d4>
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d005      	beq.n	80030e2 <UART_SetConfig+0x3de>
 80030d6:	e010      	b.n	80030fa <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030d8:	f7fe ffb0 	bl	800203c <HAL_RCC_GetPCLK1Freq>
 80030dc:	0003      	movs	r3, r0
 80030de:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80030e0:	e014      	b.n	800310c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030e2:	4b66      	ldr	r3, [pc, #408]	; (800327c <UART_SetConfig+0x578>)
 80030e4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80030e6:	e011      	b.n	800310c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030e8:	f7fe ff1c 	bl	8001f24 <HAL_RCC_GetSysClockFreq>
 80030ec:	0003      	movs	r3, r0
 80030ee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80030f0:	e00c      	b.n	800310c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030f2:	2380      	movs	r3, #128	; 0x80
 80030f4:	021b      	lsls	r3, r3, #8
 80030f6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80030f8:	e008      	b.n	800310c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80030fa:	2300      	movs	r3, #0
 80030fc:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80030fe:	231a      	movs	r3, #26
 8003100:	2220      	movs	r2, #32
 8003102:	189b      	adds	r3, r3, r2
 8003104:	19db      	adds	r3, r3, r7
 8003106:	2201      	movs	r2, #1
 8003108:	701a      	strb	r2, [r3, #0]
        break;
 800310a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800310c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800310e:	2b00      	cmp	r3, #0
 8003110:	d100      	bne.n	8003114 <UART_SetConfig+0x410>
 8003112:	e09a      	b.n	800324a <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003116:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003118:	4b57      	ldr	r3, [pc, #348]	; (8003278 <UART_SetConfig+0x574>)
 800311a:	0052      	lsls	r2, r2, #1
 800311c:	5ad3      	ldrh	r3, [r2, r3]
 800311e:	0019      	movs	r1, r3
 8003120:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003122:	f7fc ffef 	bl	8000104 <__udivsi3>
 8003126:	0003      	movs	r3, r0
 8003128:	005a      	lsls	r2, r3, #1
 800312a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	085b      	lsrs	r3, r3, #1
 8003130:	18d2      	adds	r2, r2, r3
 8003132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	0019      	movs	r1, r3
 8003138:	0010      	movs	r0, r2
 800313a:	f7fc ffe3 	bl	8000104 <__udivsi3>
 800313e:	0003      	movs	r3, r0
 8003140:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003144:	2b0f      	cmp	r3, #15
 8003146:	d921      	bls.n	800318c <UART_SetConfig+0x488>
 8003148:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800314a:	2380      	movs	r3, #128	; 0x80
 800314c:	025b      	lsls	r3, r3, #9
 800314e:	429a      	cmp	r2, r3
 8003150:	d21c      	bcs.n	800318c <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003154:	b29a      	uxth	r2, r3
 8003156:	200e      	movs	r0, #14
 8003158:	2420      	movs	r4, #32
 800315a:	1903      	adds	r3, r0, r4
 800315c:	19db      	adds	r3, r3, r7
 800315e:	210f      	movs	r1, #15
 8003160:	438a      	bics	r2, r1
 8003162:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003166:	085b      	lsrs	r3, r3, #1
 8003168:	b29b      	uxth	r3, r3
 800316a:	2207      	movs	r2, #7
 800316c:	4013      	ands	r3, r2
 800316e:	b299      	uxth	r1, r3
 8003170:	1903      	adds	r3, r0, r4
 8003172:	19db      	adds	r3, r3, r7
 8003174:	1902      	adds	r2, r0, r4
 8003176:	19d2      	adds	r2, r2, r7
 8003178:	8812      	ldrh	r2, [r2, #0]
 800317a:	430a      	orrs	r2, r1
 800317c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800317e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	1902      	adds	r2, r0, r4
 8003184:	19d2      	adds	r2, r2, r7
 8003186:	8812      	ldrh	r2, [r2, #0]
 8003188:	60da      	str	r2, [r3, #12]
 800318a:	e05e      	b.n	800324a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800318c:	231a      	movs	r3, #26
 800318e:	2220      	movs	r2, #32
 8003190:	189b      	adds	r3, r3, r2
 8003192:	19db      	adds	r3, r3, r7
 8003194:	2201      	movs	r2, #1
 8003196:	701a      	strb	r2, [r3, #0]
 8003198:	e057      	b.n	800324a <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 800319a:	231b      	movs	r3, #27
 800319c:	2220      	movs	r2, #32
 800319e:	189b      	adds	r3, r3, r2
 80031a0:	19db      	adds	r3, r3, r7
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	2b08      	cmp	r3, #8
 80031a6:	d015      	beq.n	80031d4 <UART_SetConfig+0x4d0>
 80031a8:	dc18      	bgt.n	80031dc <UART_SetConfig+0x4d8>
 80031aa:	2b04      	cmp	r3, #4
 80031ac:	d00d      	beq.n	80031ca <UART_SetConfig+0x4c6>
 80031ae:	dc15      	bgt.n	80031dc <UART_SetConfig+0x4d8>
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d002      	beq.n	80031ba <UART_SetConfig+0x4b6>
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d005      	beq.n	80031c4 <UART_SetConfig+0x4c0>
 80031b8:	e010      	b.n	80031dc <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031ba:	f7fe ff3f 	bl	800203c <HAL_RCC_GetPCLK1Freq>
 80031be:	0003      	movs	r3, r0
 80031c0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80031c2:	e014      	b.n	80031ee <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031c4:	4b2d      	ldr	r3, [pc, #180]	; (800327c <UART_SetConfig+0x578>)
 80031c6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80031c8:	e011      	b.n	80031ee <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031ca:	f7fe feab 	bl	8001f24 <HAL_RCC_GetSysClockFreq>
 80031ce:	0003      	movs	r3, r0
 80031d0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80031d2:	e00c      	b.n	80031ee <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031d4:	2380      	movs	r3, #128	; 0x80
 80031d6:	021b      	lsls	r3, r3, #8
 80031d8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80031da:	e008      	b.n	80031ee <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 80031dc:	2300      	movs	r3, #0
 80031de:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80031e0:	231a      	movs	r3, #26
 80031e2:	2220      	movs	r2, #32
 80031e4:	189b      	adds	r3, r3, r2
 80031e6:	19db      	adds	r3, r3, r7
 80031e8:	2201      	movs	r2, #1
 80031ea:	701a      	strb	r2, [r3, #0]
        break;
 80031ec:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80031ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d02a      	beq.n	800324a <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80031f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031f8:	4b1f      	ldr	r3, [pc, #124]	; (8003278 <UART_SetConfig+0x574>)
 80031fa:	0052      	lsls	r2, r2, #1
 80031fc:	5ad3      	ldrh	r3, [r2, r3]
 80031fe:	0019      	movs	r1, r3
 8003200:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003202:	f7fc ff7f 	bl	8000104 <__udivsi3>
 8003206:	0003      	movs	r3, r0
 8003208:	001a      	movs	r2, r3
 800320a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	085b      	lsrs	r3, r3, #1
 8003210:	18d2      	adds	r2, r2, r3
 8003212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	0019      	movs	r1, r3
 8003218:	0010      	movs	r0, r2
 800321a:	f7fc ff73 	bl	8000104 <__udivsi3>
 800321e:	0003      	movs	r3, r0
 8003220:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003224:	2b0f      	cmp	r3, #15
 8003226:	d90a      	bls.n	800323e <UART_SetConfig+0x53a>
 8003228:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800322a:	2380      	movs	r3, #128	; 0x80
 800322c:	025b      	lsls	r3, r3, #9
 800322e:	429a      	cmp	r2, r3
 8003230:	d205      	bcs.n	800323e <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003234:	b29a      	uxth	r2, r3
 8003236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	60da      	str	r2, [r3, #12]
 800323c:	e005      	b.n	800324a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800323e:	231a      	movs	r3, #26
 8003240:	2220      	movs	r2, #32
 8003242:	189b      	adds	r3, r3, r2
 8003244:	19db      	adds	r3, r3, r7
 8003246:	2201      	movs	r2, #1
 8003248:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800324a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324c:	226a      	movs	r2, #106	; 0x6a
 800324e:	2101      	movs	r1, #1
 8003250:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003254:	2268      	movs	r2, #104	; 0x68
 8003256:	2101      	movs	r1, #1
 8003258:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800325a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325c:	2200      	movs	r2, #0
 800325e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003262:	2200      	movs	r2, #0
 8003264:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003266:	231a      	movs	r3, #26
 8003268:	2220      	movs	r2, #32
 800326a:	189b      	adds	r3, r3, r2
 800326c:	19db      	adds	r3, r3, r7
 800326e:	781b      	ldrb	r3, [r3, #0]
}
 8003270:	0018      	movs	r0, r3
 8003272:	46bd      	mov	sp, r7
 8003274:	b010      	add	sp, #64	; 0x40
 8003276:	bdb0      	pop	{r4, r5, r7, pc}
 8003278:	080049cc 	.word	0x080049cc
 800327c:	00f42400 	.word	0x00f42400

08003280 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328c:	2201      	movs	r2, #1
 800328e:	4013      	ands	r3, r2
 8003290:	d00b      	beq.n	80032aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	4a4a      	ldr	r2, [pc, #296]	; (80033c4 <UART_AdvFeatureConfig+0x144>)
 800329a:	4013      	ands	r3, r2
 800329c:	0019      	movs	r1, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	430a      	orrs	r2, r1
 80032a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ae:	2202      	movs	r2, #2
 80032b0:	4013      	ands	r3, r2
 80032b2:	d00b      	beq.n	80032cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	4a43      	ldr	r2, [pc, #268]	; (80033c8 <UART_AdvFeatureConfig+0x148>)
 80032bc:	4013      	ands	r3, r2
 80032be:	0019      	movs	r1, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	430a      	orrs	r2, r1
 80032ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d0:	2204      	movs	r2, #4
 80032d2:	4013      	ands	r3, r2
 80032d4:	d00b      	beq.n	80032ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	4a3b      	ldr	r2, [pc, #236]	; (80033cc <UART_AdvFeatureConfig+0x14c>)
 80032de:	4013      	ands	r3, r2
 80032e0:	0019      	movs	r1, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	430a      	orrs	r2, r1
 80032ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f2:	2208      	movs	r2, #8
 80032f4:	4013      	ands	r3, r2
 80032f6:	d00b      	beq.n	8003310 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	4a34      	ldr	r2, [pc, #208]	; (80033d0 <UART_AdvFeatureConfig+0x150>)
 8003300:	4013      	ands	r3, r2
 8003302:	0019      	movs	r1, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	430a      	orrs	r2, r1
 800330e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003314:	2210      	movs	r2, #16
 8003316:	4013      	ands	r3, r2
 8003318:	d00b      	beq.n	8003332 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	4a2c      	ldr	r2, [pc, #176]	; (80033d4 <UART_AdvFeatureConfig+0x154>)
 8003322:	4013      	ands	r3, r2
 8003324:	0019      	movs	r1, r3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	430a      	orrs	r2, r1
 8003330:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003336:	2220      	movs	r2, #32
 8003338:	4013      	ands	r3, r2
 800333a:	d00b      	beq.n	8003354 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	4a25      	ldr	r2, [pc, #148]	; (80033d8 <UART_AdvFeatureConfig+0x158>)
 8003344:	4013      	ands	r3, r2
 8003346:	0019      	movs	r1, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	430a      	orrs	r2, r1
 8003352:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003358:	2240      	movs	r2, #64	; 0x40
 800335a:	4013      	ands	r3, r2
 800335c:	d01d      	beq.n	800339a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	4a1d      	ldr	r2, [pc, #116]	; (80033dc <UART_AdvFeatureConfig+0x15c>)
 8003366:	4013      	ands	r3, r2
 8003368:	0019      	movs	r1, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	430a      	orrs	r2, r1
 8003374:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800337a:	2380      	movs	r3, #128	; 0x80
 800337c:	035b      	lsls	r3, r3, #13
 800337e:	429a      	cmp	r2, r3
 8003380:	d10b      	bne.n	800339a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	4a15      	ldr	r2, [pc, #84]	; (80033e0 <UART_AdvFeatureConfig+0x160>)
 800338a:	4013      	ands	r3, r2
 800338c:	0019      	movs	r1, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	430a      	orrs	r2, r1
 8003398:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339e:	2280      	movs	r2, #128	; 0x80
 80033a0:	4013      	ands	r3, r2
 80033a2:	d00b      	beq.n	80033bc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	4a0e      	ldr	r2, [pc, #56]	; (80033e4 <UART_AdvFeatureConfig+0x164>)
 80033ac:	4013      	ands	r3, r2
 80033ae:	0019      	movs	r1, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	430a      	orrs	r2, r1
 80033ba:	605a      	str	r2, [r3, #4]
  }
}
 80033bc:	46c0      	nop			; (mov r8, r8)
 80033be:	46bd      	mov	sp, r7
 80033c0:	b002      	add	sp, #8
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	fffdffff 	.word	0xfffdffff
 80033c8:	fffeffff 	.word	0xfffeffff
 80033cc:	fffbffff 	.word	0xfffbffff
 80033d0:	ffff7fff 	.word	0xffff7fff
 80033d4:	ffffefff 	.word	0xffffefff
 80033d8:	ffffdfff 	.word	0xffffdfff
 80033dc:	ffefffff 	.word	0xffefffff
 80033e0:	ff9fffff 	.word	0xff9fffff
 80033e4:	fff7ffff 	.word	0xfff7ffff

080033e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b086      	sub	sp, #24
 80033ec:	af02      	add	r7, sp, #8
 80033ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2290      	movs	r2, #144	; 0x90
 80033f4:	2100      	movs	r1, #0
 80033f6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80033f8:	f7fd fd2a 	bl	8000e50 <HAL_GetTick>
 80033fc:	0003      	movs	r3, r0
 80033fe:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2208      	movs	r2, #8
 8003408:	4013      	ands	r3, r2
 800340a:	2b08      	cmp	r3, #8
 800340c:	d10c      	bne.n	8003428 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2280      	movs	r2, #128	; 0x80
 8003412:	0391      	lsls	r1, r2, #14
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	4a1a      	ldr	r2, [pc, #104]	; (8003480 <UART_CheckIdleState+0x98>)
 8003418:	9200      	str	r2, [sp, #0]
 800341a:	2200      	movs	r2, #0
 800341c:	f000 f832 	bl	8003484 <UART_WaitOnFlagUntilTimeout>
 8003420:	1e03      	subs	r3, r0, #0
 8003422:	d001      	beq.n	8003428 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	e026      	b.n	8003476 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2204      	movs	r2, #4
 8003430:	4013      	ands	r3, r2
 8003432:	2b04      	cmp	r3, #4
 8003434:	d10c      	bne.n	8003450 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2280      	movs	r2, #128	; 0x80
 800343a:	03d1      	lsls	r1, r2, #15
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	4a10      	ldr	r2, [pc, #64]	; (8003480 <UART_CheckIdleState+0x98>)
 8003440:	9200      	str	r2, [sp, #0]
 8003442:	2200      	movs	r2, #0
 8003444:	f000 f81e 	bl	8003484 <UART_WaitOnFlagUntilTimeout>
 8003448:	1e03      	subs	r3, r0, #0
 800344a:	d001      	beq.n	8003450 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e012      	b.n	8003476 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2288      	movs	r2, #136	; 0x88
 8003454:	2120      	movs	r1, #32
 8003456:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	228c      	movs	r2, #140	; 0x8c
 800345c:	2120      	movs	r1, #32
 800345e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2284      	movs	r2, #132	; 0x84
 8003470:	2100      	movs	r1, #0
 8003472:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003474:	2300      	movs	r3, #0
}
 8003476:	0018      	movs	r0, r3
 8003478:	46bd      	mov	sp, r7
 800347a:	b004      	add	sp, #16
 800347c:	bd80      	pop	{r7, pc}
 800347e:	46c0      	nop			; (mov r8, r8)
 8003480:	01ffffff 	.word	0x01ffffff

08003484 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b094      	sub	sp, #80	; 0x50
 8003488:	af00      	add	r7, sp, #0
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	603b      	str	r3, [r7, #0]
 8003490:	1dfb      	adds	r3, r7, #7
 8003492:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003494:	e0a7      	b.n	80035e6 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003496:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003498:	3301      	adds	r3, #1
 800349a:	d100      	bne.n	800349e <UART_WaitOnFlagUntilTimeout+0x1a>
 800349c:	e0a3      	b.n	80035e6 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800349e:	f7fd fcd7 	bl	8000e50 <HAL_GetTick>
 80034a2:	0002      	movs	r2, r0
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d302      	bcc.n	80034b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80034ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d13f      	bne.n	8003534 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034b4:	f3ef 8310 	mrs	r3, PRIMASK
 80034b8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80034ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80034bc:	647b      	str	r3, [r7, #68]	; 0x44
 80034be:	2301      	movs	r3, #1
 80034c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034c4:	f383 8810 	msr	PRIMASK, r3
}
 80034c8:	46c0      	nop			; (mov r8, r8)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	494e      	ldr	r1, [pc, #312]	; (8003610 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80034d6:	400a      	ands	r2, r1
 80034d8:	601a      	str	r2, [r3, #0]
 80034da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034dc:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e0:	f383 8810 	msr	PRIMASK, r3
}
 80034e4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034e6:	f3ef 8310 	mrs	r3, PRIMASK
 80034ea:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80034ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034ee:	643b      	str	r3, [r7, #64]	; 0x40
 80034f0:	2301      	movs	r3, #1
 80034f2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034f6:	f383 8810 	msr	PRIMASK, r3
}
 80034fa:	46c0      	nop			; (mov r8, r8)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	689a      	ldr	r2, [r3, #8]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2101      	movs	r1, #1
 8003508:	438a      	bics	r2, r1
 800350a:	609a      	str	r2, [r3, #8]
 800350c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800350e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003510:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003512:	f383 8810 	msr	PRIMASK, r3
}
 8003516:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2288      	movs	r2, #136	; 0x88
 800351c:	2120      	movs	r1, #32
 800351e:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	228c      	movs	r2, #140	; 0x8c
 8003524:	2120      	movs	r1, #32
 8003526:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2284      	movs	r2, #132	; 0x84
 800352c:	2100      	movs	r1, #0
 800352e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003530:	2303      	movs	r3, #3
 8003532:	e069      	b.n	8003608 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2204      	movs	r2, #4
 800353c:	4013      	ands	r3, r2
 800353e:	d052      	beq.n	80035e6 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	69da      	ldr	r2, [r3, #28]
 8003546:	2380      	movs	r3, #128	; 0x80
 8003548:	011b      	lsls	r3, r3, #4
 800354a:	401a      	ands	r2, r3
 800354c:	2380      	movs	r3, #128	; 0x80
 800354e:	011b      	lsls	r3, r3, #4
 8003550:	429a      	cmp	r2, r3
 8003552:	d148      	bne.n	80035e6 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2280      	movs	r2, #128	; 0x80
 800355a:	0112      	lsls	r2, r2, #4
 800355c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800355e:	f3ef 8310 	mrs	r3, PRIMASK
 8003562:	613b      	str	r3, [r7, #16]
  return(result);
 8003564:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003566:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003568:	2301      	movs	r3, #1
 800356a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	f383 8810 	msr	PRIMASK, r3
}
 8003572:	46c0      	nop			; (mov r8, r8)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4924      	ldr	r1, [pc, #144]	; (8003610 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003580:	400a      	ands	r2, r1
 8003582:	601a      	str	r2, [r3, #0]
 8003584:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003586:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	f383 8810 	msr	PRIMASK, r3
}
 800358e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003590:	f3ef 8310 	mrs	r3, PRIMASK
 8003594:	61fb      	str	r3, [r7, #28]
  return(result);
 8003596:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003598:	64bb      	str	r3, [r7, #72]	; 0x48
 800359a:	2301      	movs	r3, #1
 800359c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800359e:	6a3b      	ldr	r3, [r7, #32]
 80035a0:	f383 8810 	msr	PRIMASK, r3
}
 80035a4:	46c0      	nop			; (mov r8, r8)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	689a      	ldr	r2, [r3, #8]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2101      	movs	r1, #1
 80035b2:	438a      	bics	r2, r1
 80035b4:	609a      	str	r2, [r3, #8]
 80035b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035b8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035bc:	f383 8810 	msr	PRIMASK, r3
}
 80035c0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2288      	movs	r2, #136	; 0x88
 80035c6:	2120      	movs	r1, #32
 80035c8:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	228c      	movs	r2, #140	; 0x8c
 80035ce:	2120      	movs	r1, #32
 80035d0:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2290      	movs	r2, #144	; 0x90
 80035d6:	2120      	movs	r1, #32
 80035d8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2284      	movs	r2, #132	; 0x84
 80035de:	2100      	movs	r1, #0
 80035e0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e010      	b.n	8003608 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	69db      	ldr	r3, [r3, #28]
 80035ec:	68ba      	ldr	r2, [r7, #8]
 80035ee:	4013      	ands	r3, r2
 80035f0:	68ba      	ldr	r2, [r7, #8]
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	425a      	negs	r2, r3
 80035f6:	4153      	adcs	r3, r2
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	001a      	movs	r2, r3
 80035fc:	1dfb      	adds	r3, r7, #7
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	429a      	cmp	r2, r3
 8003602:	d100      	bne.n	8003606 <UART_WaitOnFlagUntilTimeout+0x182>
 8003604:	e747      	b.n	8003496 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003606:	2300      	movs	r3, #0
}
 8003608:	0018      	movs	r0, r3
 800360a:	46bd      	mov	sp, r7
 800360c:	b014      	add	sp, #80	; 0x50
 800360e:	bd80      	pop	{r7, pc}
 8003610:	fffffe5f 	.word	0xfffffe5f

08003614 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b098      	sub	sp, #96	; 0x60
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	1dbb      	adds	r3, r7, #6
 8003620:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	68ba      	ldr	r2, [r7, #8]
 8003626:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	1dba      	adds	r2, r7, #6
 800362c:	215c      	movs	r1, #92	; 0x5c
 800362e:	8812      	ldrh	r2, [r2, #0]
 8003630:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	1dba      	adds	r2, r7, #6
 8003636:	215e      	movs	r1, #94	; 0x5e
 8003638:	8812      	ldrh	r2, [r2, #0]
 800363a:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2200      	movs	r2, #0
 8003640:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	689a      	ldr	r2, [r3, #8]
 8003646:	2380      	movs	r3, #128	; 0x80
 8003648:	015b      	lsls	r3, r3, #5
 800364a:	429a      	cmp	r2, r3
 800364c:	d10d      	bne.n	800366a <UART_Start_Receive_IT+0x56>
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d104      	bne.n	8003660 <UART_Start_Receive_IT+0x4c>
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2260      	movs	r2, #96	; 0x60
 800365a:	497b      	ldr	r1, [pc, #492]	; (8003848 <UART_Start_Receive_IT+0x234>)
 800365c:	5299      	strh	r1, [r3, r2]
 800365e:	e02e      	b.n	80036be <UART_Start_Receive_IT+0xaa>
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2260      	movs	r2, #96	; 0x60
 8003664:	21ff      	movs	r1, #255	; 0xff
 8003666:	5299      	strh	r1, [r3, r2]
 8003668:	e029      	b.n	80036be <UART_Start_Receive_IT+0xaa>
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d10d      	bne.n	800368e <UART_Start_Receive_IT+0x7a>
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d104      	bne.n	8003684 <UART_Start_Receive_IT+0x70>
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2260      	movs	r2, #96	; 0x60
 800367e:	21ff      	movs	r1, #255	; 0xff
 8003680:	5299      	strh	r1, [r3, r2]
 8003682:	e01c      	b.n	80036be <UART_Start_Receive_IT+0xaa>
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2260      	movs	r2, #96	; 0x60
 8003688:	217f      	movs	r1, #127	; 0x7f
 800368a:	5299      	strh	r1, [r3, r2]
 800368c:	e017      	b.n	80036be <UART_Start_Receive_IT+0xaa>
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	689a      	ldr	r2, [r3, #8]
 8003692:	2380      	movs	r3, #128	; 0x80
 8003694:	055b      	lsls	r3, r3, #21
 8003696:	429a      	cmp	r2, r3
 8003698:	d10d      	bne.n	80036b6 <UART_Start_Receive_IT+0xa2>
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d104      	bne.n	80036ac <UART_Start_Receive_IT+0x98>
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2260      	movs	r2, #96	; 0x60
 80036a6:	217f      	movs	r1, #127	; 0x7f
 80036a8:	5299      	strh	r1, [r3, r2]
 80036aa:	e008      	b.n	80036be <UART_Start_Receive_IT+0xaa>
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2260      	movs	r2, #96	; 0x60
 80036b0:	213f      	movs	r1, #63	; 0x3f
 80036b2:	5299      	strh	r1, [r3, r2]
 80036b4:	e003      	b.n	80036be <UART_Start_Receive_IT+0xaa>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2260      	movs	r2, #96	; 0x60
 80036ba:	2100      	movs	r1, #0
 80036bc:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2290      	movs	r2, #144	; 0x90
 80036c2:	2100      	movs	r1, #0
 80036c4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	228c      	movs	r2, #140	; 0x8c
 80036ca:	2122      	movs	r1, #34	; 0x22
 80036cc:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036ce:	f3ef 8310 	mrs	r3, PRIMASK
 80036d2:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 80036d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80036d8:	2301      	movs	r3, #1
 80036da:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036de:	f383 8810 	msr	PRIMASK, r3
}
 80036e2:	46c0      	nop			; (mov r8, r8)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	689a      	ldr	r2, [r3, #8]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2101      	movs	r1, #1
 80036f0:	430a      	orrs	r2, r1
 80036f2:	609a      	str	r2, [r3, #8]
 80036f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036f6:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036fa:	f383 8810 	msr	PRIMASK, r3
}
 80036fe:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003704:	2380      	movs	r3, #128	; 0x80
 8003706:	059b      	lsls	r3, r3, #22
 8003708:	429a      	cmp	r2, r3
 800370a:	d150      	bne.n	80037ae <UART_Start_Receive_IT+0x19a>
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2268      	movs	r2, #104	; 0x68
 8003710:	5a9b      	ldrh	r3, [r3, r2]
 8003712:	1dba      	adds	r2, r7, #6
 8003714:	8812      	ldrh	r2, [r2, #0]
 8003716:	429a      	cmp	r2, r3
 8003718:	d349      	bcc.n	80037ae <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	689a      	ldr	r2, [r3, #8]
 800371e:	2380      	movs	r3, #128	; 0x80
 8003720:	015b      	lsls	r3, r3, #5
 8003722:	429a      	cmp	r2, r3
 8003724:	d107      	bne.n	8003736 <UART_Start_Receive_IT+0x122>
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d103      	bne.n	8003736 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	4a46      	ldr	r2, [pc, #280]	; (800384c <UART_Start_Receive_IT+0x238>)
 8003732:	675a      	str	r2, [r3, #116]	; 0x74
 8003734:	e002      	b.n	800373c <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	4a45      	ldr	r2, [pc, #276]	; (8003850 <UART_Start_Receive_IT+0x23c>)
 800373a:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	691b      	ldr	r3, [r3, #16]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d019      	beq.n	8003778 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003744:	f3ef 8310 	mrs	r3, PRIMASK
 8003748:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800374a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800374c:	65bb      	str	r3, [r7, #88]	; 0x58
 800374e:	2301      	movs	r3, #1
 8003750:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003754:	f383 8810 	msr	PRIMASK, r3
}
 8003758:	46c0      	nop			; (mov r8, r8)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2180      	movs	r1, #128	; 0x80
 8003766:	0049      	lsls	r1, r1, #1
 8003768:	430a      	orrs	r2, r1
 800376a:	601a      	str	r2, [r3, #0]
 800376c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800376e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003770:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003772:	f383 8810 	msr	PRIMASK, r3
}
 8003776:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003778:	f3ef 8310 	mrs	r3, PRIMASK
 800377c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800377e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003780:	657b      	str	r3, [r7, #84]	; 0x54
 8003782:	2301      	movs	r3, #1
 8003784:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003788:	f383 8810 	msr	PRIMASK, r3
}
 800378c:	46c0      	nop			; (mov r8, r8)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	689a      	ldr	r2, [r3, #8]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2180      	movs	r1, #128	; 0x80
 800379a:	0549      	lsls	r1, r1, #21
 800379c:	430a      	orrs	r2, r1
 800379e:	609a      	str	r2, [r3, #8]
 80037a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037a2:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a6:	f383 8810 	msr	PRIMASK, r3
}
 80037aa:	46c0      	nop			; (mov r8, r8)
 80037ac:	e047      	b.n	800383e <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	689a      	ldr	r2, [r3, #8]
 80037b2:	2380      	movs	r3, #128	; 0x80
 80037b4:	015b      	lsls	r3, r3, #5
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d107      	bne.n	80037ca <UART_Start_Receive_IT+0x1b6>
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d103      	bne.n	80037ca <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	4a23      	ldr	r2, [pc, #140]	; (8003854 <UART_Start_Receive_IT+0x240>)
 80037c6:	675a      	str	r2, [r3, #116]	; 0x74
 80037c8:	e002      	b.n	80037d0 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	4a22      	ldr	r2, [pc, #136]	; (8003858 <UART_Start_Receive_IT+0x244>)
 80037ce:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d019      	beq.n	800380c <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037d8:	f3ef 8310 	mrs	r3, PRIMASK
 80037dc:	61fb      	str	r3, [r7, #28]
  return(result);
 80037de:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80037e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037e2:	2301      	movs	r3, #1
 80037e4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037e6:	6a3b      	ldr	r3, [r7, #32]
 80037e8:	f383 8810 	msr	PRIMASK, r3
}
 80037ec:	46c0      	nop			; (mov r8, r8)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2190      	movs	r1, #144	; 0x90
 80037fa:	0049      	lsls	r1, r1, #1
 80037fc:	430a      	orrs	r2, r1
 80037fe:	601a      	str	r2, [r3, #0]
 8003800:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003802:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003806:	f383 8810 	msr	PRIMASK, r3
}
 800380a:	e018      	b.n	800383e <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800380c:	f3ef 8310 	mrs	r3, PRIMASK
 8003810:	613b      	str	r3, [r7, #16]
  return(result);
 8003812:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003814:	653b      	str	r3, [r7, #80]	; 0x50
 8003816:	2301      	movs	r3, #1
 8003818:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	f383 8810 	msr	PRIMASK, r3
}
 8003820:	46c0      	nop			; (mov r8, r8)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2120      	movs	r1, #32
 800382e:	430a      	orrs	r2, r1
 8003830:	601a      	str	r2, [r3, #0]
 8003832:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003834:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	f383 8810 	msr	PRIMASK, r3
}
 800383c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 800383e:	2300      	movs	r3, #0
}
 8003840:	0018      	movs	r0, r3
 8003842:	46bd      	mov	sp, r7
 8003844:	b018      	add	sp, #96	; 0x60
 8003846:	bd80      	pop	{r7, pc}
 8003848:	000001ff 	.word	0x000001ff
 800384c:	080042d5 	.word	0x080042d5
 8003850:	08003fe9 	.word	0x08003fe9
 8003854:	08003e75 	.word	0x08003e75
 8003858:	08003d01 	.word	0x08003d01

0800385c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b08e      	sub	sp, #56	; 0x38
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003864:	f3ef 8310 	mrs	r3, PRIMASK
 8003868:	617b      	str	r3, [r7, #20]
  return(result);
 800386a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800386c:	637b      	str	r3, [r7, #52]	; 0x34
 800386e:	2301      	movs	r3, #1
 8003870:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	f383 8810 	msr	PRIMASK, r3
}
 8003878:	46c0      	nop			; (mov r8, r8)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4926      	ldr	r1, [pc, #152]	; (8003920 <UART_EndRxTransfer+0xc4>)
 8003886:	400a      	ands	r2, r1
 8003888:	601a      	str	r2, [r3, #0]
 800388a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800388c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	f383 8810 	msr	PRIMASK, r3
}
 8003894:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003896:	f3ef 8310 	mrs	r3, PRIMASK
 800389a:	623b      	str	r3, [r7, #32]
  return(result);
 800389c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800389e:	633b      	str	r3, [r7, #48]	; 0x30
 80038a0:	2301      	movs	r3, #1
 80038a2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a6:	f383 8810 	msr	PRIMASK, r3
}
 80038aa:	46c0      	nop			; (mov r8, r8)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	689a      	ldr	r2, [r3, #8]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	491b      	ldr	r1, [pc, #108]	; (8003924 <UART_EndRxTransfer+0xc8>)
 80038b8:	400a      	ands	r2, r1
 80038ba:	609a      	str	r2, [r3, #8]
 80038bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038be:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c2:	f383 8810 	msr	PRIMASK, r3
}
 80038c6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d118      	bne.n	8003902 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038d0:	f3ef 8310 	mrs	r3, PRIMASK
 80038d4:	60bb      	str	r3, [r7, #8]
  return(result);
 80038d6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038da:	2301      	movs	r3, #1
 80038dc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f383 8810 	msr	PRIMASK, r3
}
 80038e4:	46c0      	nop			; (mov r8, r8)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2110      	movs	r1, #16
 80038f2:	438a      	bics	r2, r1
 80038f4:	601a      	str	r2, [r3, #0]
 80038f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	f383 8810 	msr	PRIMASK, r3
}
 8003900:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	228c      	movs	r2, #140	; 0x8c
 8003906:	2120      	movs	r1, #32
 8003908:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003916:	46c0      	nop			; (mov r8, r8)
 8003918:	46bd      	mov	sp, r7
 800391a:	b00e      	add	sp, #56	; 0x38
 800391c:	bd80      	pop	{r7, pc}
 800391e:	46c0      	nop			; (mov r8, r8)
 8003920:	fffffedf 	.word	0xfffffedf
 8003924:	effffffe 	.word	0xeffffffe

08003928 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003934:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	225e      	movs	r2, #94	; 0x5e
 800393a:	2100      	movs	r1, #0
 800393c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2256      	movs	r2, #86	; 0x56
 8003942:	2100      	movs	r1, #0
 8003944:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	0018      	movs	r0, r3
 800394a:	f7ff f9c7 	bl	8002cdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800394e:	46c0      	nop			; (mov r8, r8)
 8003950:	46bd      	mov	sp, r7
 8003952:	b004      	add	sp, #16
 8003954:	bd80      	pop	{r7, pc}

08003956 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003956:	b580      	push	{r7, lr}
 8003958:	b08a      	sub	sp, #40	; 0x28
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2288      	movs	r2, #136	; 0x88
 8003962:	589b      	ldr	r3, [r3, r2]
 8003964:	2b21      	cmp	r3, #33	; 0x21
 8003966:	d14c      	bne.n	8003a02 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2256      	movs	r2, #86	; 0x56
 800396c:	5a9b      	ldrh	r3, [r3, r2]
 800396e:	b29b      	uxth	r3, r3
 8003970:	2b00      	cmp	r3, #0
 8003972:	d132      	bne.n	80039da <UART_TxISR_8BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003974:	f3ef 8310 	mrs	r3, PRIMASK
 8003978:	60bb      	str	r3, [r7, #8]
  return(result);
 800397a:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800397c:	627b      	str	r3, [r7, #36]	; 0x24
 800397e:	2301      	movs	r3, #1
 8003980:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f383 8810 	msr	PRIMASK, r3
}
 8003988:	46c0      	nop			; (mov r8, r8)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2180      	movs	r1, #128	; 0x80
 8003996:	438a      	bics	r2, r1
 8003998:	601a      	str	r2, [r3, #0]
 800399a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	f383 8810 	msr	PRIMASK, r3
}
 80039a4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039a6:	f3ef 8310 	mrs	r3, PRIMASK
 80039aa:	617b      	str	r3, [r7, #20]
  return(result);
 80039ac:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80039ae:	623b      	str	r3, [r7, #32]
 80039b0:	2301      	movs	r3, #1
 80039b2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	f383 8810 	msr	PRIMASK, r3
}
 80039ba:	46c0      	nop			; (mov r8, r8)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2140      	movs	r1, #64	; 0x40
 80039c8:	430a      	orrs	r2, r1
 80039ca:	601a      	str	r2, [r3, #0]
 80039cc:	6a3b      	ldr	r3, [r7, #32]
 80039ce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	f383 8810 	msr	PRIMASK, r3
}
 80039d6:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80039d8:	e013      	b.n	8003a02 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039de:	781a      	ldrb	r2, [r3, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039ea:	1c5a      	adds	r2, r3, #1
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2256      	movs	r2, #86	; 0x56
 80039f4:	5a9b      	ldrh	r3, [r3, r2]
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	3b01      	subs	r3, #1
 80039fa:	b299      	uxth	r1, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2256      	movs	r2, #86	; 0x56
 8003a00:	5299      	strh	r1, [r3, r2]
}
 8003a02:	46c0      	nop			; (mov r8, r8)
 8003a04:	46bd      	mov	sp, r7
 8003a06:	b00a      	add	sp, #40	; 0x28
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003a0a:	b580      	push	{r7, lr}
 8003a0c:	b08c      	sub	sp, #48	; 0x30
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2288      	movs	r2, #136	; 0x88
 8003a16:	589b      	ldr	r3, [r3, r2]
 8003a18:	2b21      	cmp	r3, #33	; 0x21
 8003a1a:	d151      	bne.n	8003ac0 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2256      	movs	r2, #86	; 0x56
 8003a20:	5a9b      	ldrh	r3, [r3, r2]
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d132      	bne.n	8003a8e <UART_TxISR_16BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a28:	f3ef 8310 	mrs	r3, PRIMASK
 8003a2c:	60fb      	str	r3, [r7, #12]
  return(result);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003a30:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a32:	2301      	movs	r3, #1
 8003a34:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	f383 8810 	msr	PRIMASK, r3
}
 8003a3c:	46c0      	nop			; (mov r8, r8)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2180      	movs	r1, #128	; 0x80
 8003a4a:	438a      	bics	r2, r1
 8003a4c:	601a      	str	r2, [r3, #0]
 8003a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a50:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	f383 8810 	msr	PRIMASK, r3
}
 8003a58:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a5a:	f3ef 8310 	mrs	r3, PRIMASK
 8003a5e:	61bb      	str	r3, [r7, #24]
  return(result);
 8003a60:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003a62:	627b      	str	r3, [r7, #36]	; 0x24
 8003a64:	2301      	movs	r3, #1
 8003a66:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	f383 8810 	msr	PRIMASK, r3
}
 8003a6e:	46c0      	nop			; (mov r8, r8)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2140      	movs	r1, #64	; 0x40
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	601a      	str	r2, [r3, #0]
 8003a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a82:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a84:	6a3b      	ldr	r3, [r7, #32]
 8003a86:	f383 8810 	msr	PRIMASK, r3
}
 8003a8a:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003a8c:	e018      	b.n	8003ac0 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a92:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a96:	881b      	ldrh	r3, [r3, #0]
 8003a98:	001a      	movs	r2, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	05d2      	lsls	r2, r2, #23
 8003aa0:	0dd2      	lsrs	r2, r2, #23
 8003aa2:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aa8:	1c9a      	adds	r2, r3, #2
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2256      	movs	r2, #86	; 0x56
 8003ab2:	5a9b      	ldrh	r3, [r3, r2]
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	b299      	uxth	r1, r3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2256      	movs	r2, #86	; 0x56
 8003abe:	5299      	strh	r1, [r3, r2]
}
 8003ac0:	46c0      	nop			; (mov r8, r8)
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	b00c      	add	sp, #48	; 0x30
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b08c      	sub	sp, #48	; 0x30
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2288      	movs	r2, #136	; 0x88
 8003ad4:	589b      	ldr	r3, [r3, r2]
 8003ad6:	2b21      	cmp	r3, #33	; 0x21
 8003ad8:	d165      	bne.n	8003ba6 <UART_TxISR_8BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003ada:	232e      	movs	r3, #46	; 0x2e
 8003adc:	18fb      	adds	r3, r7, r3
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	216a      	movs	r1, #106	; 0x6a
 8003ae2:	5a52      	ldrh	r2, [r2, r1]
 8003ae4:	801a      	strh	r2, [r3, #0]
 8003ae6:	e059      	b.n	8003b9c <UART_TxISR_8BIT_FIFOEN+0xd4>
    {
      if (huart->TxXferCount == 0U)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2256      	movs	r2, #86	; 0x56
 8003aec:	5a9b      	ldrh	r3, [r3, r2]
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d133      	bne.n	8003b5c <UART_TxISR_8BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003af4:	f3ef 8310 	mrs	r3, PRIMASK
 8003af8:	60fb      	str	r3, [r7, #12]
  return(result);
 8003afa:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003afc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003afe:	2301      	movs	r3, #1
 8003b00:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	f383 8810 	msr	PRIMASK, r3
}
 8003b08:	46c0      	nop			; (mov r8, r8)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	689a      	ldr	r2, [r3, #8]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4926      	ldr	r1, [pc, #152]	; (8003bb0 <UART_TxISR_8BIT_FIFOEN+0xe8>)
 8003b16:	400a      	ands	r2, r1
 8003b18:	609a      	str	r2, [r3, #8]
 8003b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b1c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	f383 8810 	msr	PRIMASK, r3
}
 8003b24:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b26:	f3ef 8310 	mrs	r3, PRIMASK
 8003b2a:	61bb      	str	r3, [r7, #24]
  return(result);
 8003b2c:	69bb      	ldr	r3, [r7, #24]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003b2e:	627b      	str	r3, [r7, #36]	; 0x24
 8003b30:	2301      	movs	r3, #1
 8003b32:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	f383 8810 	msr	PRIMASK, r3
}
 8003b3a:	46c0      	nop			; (mov r8, r8)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2140      	movs	r1, #64	; 0x40
 8003b48:	430a      	orrs	r2, r1
 8003b4a:	601a      	str	r2, [r3, #0]
 8003b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b50:	6a3b      	ldr	r3, [r7, #32]
 8003b52:	f383 8810 	msr	PRIMASK, r3
}
 8003b56:	46c0      	nop			; (mov r8, r8)

        break; /* force exit loop */
 8003b58:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 8003b5a:	e024      	b.n	8003ba6 <UART_TxISR_8BIT_FIFOEN+0xde>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	69db      	ldr	r3, [r3, #28]
 8003b62:	2280      	movs	r2, #128	; 0x80
 8003b64:	4013      	ands	r3, r2
 8003b66:	d013      	beq.n	8003b90 <UART_TxISR_8BIT_FIFOEN+0xc8>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b6c:	781a      	ldrb	r2, [r3, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b78:	1c5a      	adds	r2, r3, #1
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2256      	movs	r2, #86	; 0x56
 8003b82:	5a9b      	ldrh	r3, [r3, r2]
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	3b01      	subs	r3, #1
 8003b88:	b299      	uxth	r1, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2256      	movs	r2, #86	; 0x56
 8003b8e:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003b90:	212e      	movs	r1, #46	; 0x2e
 8003b92:	187b      	adds	r3, r7, r1
 8003b94:	881a      	ldrh	r2, [r3, #0]
 8003b96:	187b      	adds	r3, r7, r1
 8003b98:	3a01      	subs	r2, #1
 8003b9a:	801a      	strh	r2, [r3, #0]
 8003b9c:	232e      	movs	r3, #46	; 0x2e
 8003b9e:	18fb      	adds	r3, r7, r3
 8003ba0:	881b      	ldrh	r3, [r3, #0]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d1a0      	bne.n	8003ae8 <UART_TxISR_8BIT_FIFOEN+0x20>
}
 8003ba6:	46c0      	nop			; (mov r8, r8)
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	b00c      	add	sp, #48	; 0x30
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	46c0      	nop			; (mov r8, r8)
 8003bb0:	ff7fffff 	.word	0xff7fffff

08003bb4 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b08c      	sub	sp, #48	; 0x30
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2288      	movs	r2, #136	; 0x88
 8003bc0:	589b      	ldr	r3, [r3, r2]
 8003bc2:	2b21      	cmp	r3, #33	; 0x21
 8003bc4:	d16a      	bne.n	8003c9c <UART_TxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003bc6:	232e      	movs	r3, #46	; 0x2e
 8003bc8:	18fb      	adds	r3, r7, r3
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	216a      	movs	r1, #106	; 0x6a
 8003bce:	5a52      	ldrh	r2, [r2, r1]
 8003bd0:	801a      	strh	r2, [r3, #0]
 8003bd2:	e05e      	b.n	8003c92 <UART_TxISR_16BIT_FIFOEN+0xde>
    {
      if (huart->TxXferCount == 0U)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2256      	movs	r2, #86	; 0x56
 8003bd8:	5a9b      	ldrh	r3, [r3, r2]
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d133      	bne.n	8003c48 <UART_TxISR_16BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003be0:	f3ef 8310 	mrs	r3, PRIMASK
 8003be4:	60bb      	str	r3, [r7, #8]
  return(result);
 8003be6:	68bb      	ldr	r3, [r7, #8]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003be8:	627b      	str	r3, [r7, #36]	; 0x24
 8003bea:	2301      	movs	r3, #1
 8003bec:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f383 8810 	msr	PRIMASK, r3
}
 8003bf4:	46c0      	nop			; (mov r8, r8)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	689a      	ldr	r2, [r3, #8]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4928      	ldr	r1, [pc, #160]	; (8003ca4 <UART_TxISR_16BIT_FIFOEN+0xf0>)
 8003c02:	400a      	ands	r2, r1
 8003c04:	609a      	str	r2, [r3, #8]
 8003c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c08:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	f383 8810 	msr	PRIMASK, r3
}
 8003c10:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c12:	f3ef 8310 	mrs	r3, PRIMASK
 8003c16:	617b      	str	r3, [r7, #20]
  return(result);
 8003c18:	697b      	ldr	r3, [r7, #20]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003c1a:	623b      	str	r3, [r7, #32]
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	f383 8810 	msr	PRIMASK, r3
}
 8003c26:	46c0      	nop			; (mov r8, r8)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2140      	movs	r1, #64	; 0x40
 8003c34:	430a      	orrs	r2, r1
 8003c36:	601a      	str	r2, [r3, #0]
 8003c38:	6a3b      	ldr	r3, [r7, #32]
 8003c3a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	f383 8810 	msr	PRIMASK, r3
}
 8003c42:	46c0      	nop			; (mov r8, r8)

        break; /* force exit loop */
 8003c44:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 8003c46:	e029      	b.n	8003c9c <UART_TxISR_16BIT_FIFOEN+0xe8>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	69db      	ldr	r3, [r3, #28]
 8003c4e:	2280      	movs	r2, #128	; 0x80
 8003c50:	4013      	ands	r3, r2
 8003c52:	d018      	beq.n	8003c86 <UART_TxISR_16BIT_FIFOEN+0xd2>
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c58:	62bb      	str	r3, [r7, #40]	; 0x28
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c5c:	881b      	ldrh	r3, [r3, #0]
 8003c5e:	001a      	movs	r2, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	05d2      	lsls	r2, r2, #23
 8003c66:	0dd2      	lsrs	r2, r2, #23
 8003c68:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c6e:	1c9a      	adds	r2, r3, #2
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2256      	movs	r2, #86	; 0x56
 8003c78:	5a9b      	ldrh	r3, [r3, r2]
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	3b01      	subs	r3, #1
 8003c7e:	b299      	uxth	r1, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2256      	movs	r2, #86	; 0x56
 8003c84:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003c86:	212e      	movs	r1, #46	; 0x2e
 8003c88:	187b      	adds	r3, r7, r1
 8003c8a:	881a      	ldrh	r2, [r3, #0]
 8003c8c:	187b      	adds	r3, r7, r1
 8003c8e:	3a01      	subs	r2, #1
 8003c90:	801a      	strh	r2, [r3, #0]
 8003c92:	232e      	movs	r3, #46	; 0x2e
 8003c94:	18fb      	adds	r3, r7, r3
 8003c96:	881b      	ldrh	r3, [r3, #0]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d19b      	bne.n	8003bd4 <UART_TxISR_16BIT_FIFOEN+0x20>
}
 8003c9c:	46c0      	nop			; (mov r8, r8)
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	b00c      	add	sp, #48	; 0x30
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	ff7fffff 	.word	0xff7fffff

08003ca8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b086      	sub	sp, #24
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cb0:	f3ef 8310 	mrs	r3, PRIMASK
 8003cb4:	60bb      	str	r3, [r7, #8]
  return(result);
 8003cb6:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003cb8:	617b      	str	r3, [r7, #20]
 8003cba:	2301      	movs	r3, #1
 8003cbc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f383 8810 	msr	PRIMASK, r3
}
 8003cc4:	46c0      	nop			; (mov r8, r8)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2140      	movs	r1, #64	; 0x40
 8003cd2:	438a      	bics	r2, r1
 8003cd4:	601a      	str	r2, [r3, #0]
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	f383 8810 	msr	PRIMASK, r3
}
 8003ce0:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2288      	movs	r2, #136	; 0x88
 8003ce6:	2120      	movs	r1, #32
 8003ce8:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	0018      	movs	r0, r3
 8003cf4:	f7fc ffa0 	bl	8000c38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003cf8:	46c0      	nop			; (mov r8, r8)
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	b006      	add	sp, #24
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b090      	sub	sp, #64	; 0x40
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003d08:	203e      	movs	r0, #62	; 0x3e
 8003d0a:	183b      	adds	r3, r7, r0
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	2160      	movs	r1, #96	; 0x60
 8003d10:	5a52      	ldrh	r2, [r2, r1]
 8003d12:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	228c      	movs	r2, #140	; 0x8c
 8003d18:	589b      	ldr	r3, [r3, r2]
 8003d1a:	2b22      	cmp	r3, #34	; 0x22
 8003d1c:	d000      	beq.n	8003d20 <UART_RxISR_8BIT+0x20>
 8003d1e:	e09a      	b.n	8003e56 <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d26:	213c      	movs	r1, #60	; 0x3c
 8003d28:	187b      	adds	r3, r7, r1
 8003d2a:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003d2c:	187b      	adds	r3, r7, r1
 8003d2e:	881b      	ldrh	r3, [r3, #0]
 8003d30:	b2da      	uxtb	r2, r3
 8003d32:	183b      	adds	r3, r7, r0
 8003d34:	881b      	ldrh	r3, [r3, #0]
 8003d36:	b2d9      	uxtb	r1, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d3c:	400a      	ands	r2, r1
 8003d3e:	b2d2      	uxtb	r2, r2
 8003d40:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d46:	1c5a      	adds	r2, r3, #1
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	225e      	movs	r2, #94	; 0x5e
 8003d50:	5a9b      	ldrh	r3, [r3, r2]
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	3b01      	subs	r3, #1
 8003d56:	b299      	uxth	r1, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	225e      	movs	r2, #94	; 0x5e
 8003d5c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	225e      	movs	r2, #94	; 0x5e
 8003d62:	5a9b      	ldrh	r3, [r3, r2]
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d000      	beq.n	8003d6c <UART_RxISR_8BIT+0x6c>
 8003d6a:	e07c      	b.n	8003e66 <UART_RxISR_8BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d6c:	f3ef 8310 	mrs	r3, PRIMASK
 8003d70:	61bb      	str	r3, [r7, #24]
  return(result);
 8003d72:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003d74:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d76:	2301      	movs	r3, #1
 8003d78:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	f383 8810 	msr	PRIMASK, r3
}
 8003d80:	46c0      	nop			; (mov r8, r8)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4938      	ldr	r1, [pc, #224]	; (8003e70 <UART_RxISR_8BIT+0x170>)
 8003d8e:	400a      	ands	r2, r1
 8003d90:	601a      	str	r2, [r3, #0]
 8003d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d94:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d96:	6a3b      	ldr	r3, [r7, #32]
 8003d98:	f383 8810 	msr	PRIMASK, r3
}
 8003d9c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d9e:	f3ef 8310 	mrs	r3, PRIMASK
 8003da2:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003da6:	637b      	str	r3, [r7, #52]	; 0x34
 8003da8:	2301      	movs	r3, #1
 8003daa:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dae:	f383 8810 	msr	PRIMASK, r3
}
 8003db2:	46c0      	nop			; (mov r8, r8)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	689a      	ldr	r2, [r3, #8]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2101      	movs	r1, #1
 8003dc0:	438a      	bics	r2, r1
 8003dc2:	609a      	str	r2, [r3, #8]
 8003dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dca:	f383 8810 	msr	PRIMASK, r3
}
 8003dce:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	228c      	movs	r2, #140	; 0x8c
 8003dd4:	2120      	movs	r1, #32
 8003dd6:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d12f      	bne.n	8003e4c <UART_RxISR_8BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003df2:	f3ef 8310 	mrs	r3, PRIMASK
 8003df6:	60fb      	str	r3, [r7, #12]
  return(result);
 8003df8:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dfa:	633b      	str	r3, [r7, #48]	; 0x30
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	f383 8810 	msr	PRIMASK, r3
}
 8003e06:	46c0      	nop			; (mov r8, r8)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2110      	movs	r1, #16
 8003e14:	438a      	bics	r2, r1
 8003e16:	601a      	str	r2, [r3, #0]
 8003e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e1a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	f383 8810 	msr	PRIMASK, r3
}
 8003e22:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	69db      	ldr	r3, [r3, #28]
 8003e2a:	2210      	movs	r2, #16
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	2b10      	cmp	r3, #16
 8003e30:	d103      	bne.n	8003e3a <UART_RxISR_8BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2210      	movs	r2, #16
 8003e38:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	225c      	movs	r2, #92	; 0x5c
 8003e3e:	5a9a      	ldrh	r2, [r3, r2]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	0011      	movs	r1, r2
 8003e44:	0018      	movs	r0, r3
 8003e46:	f7fe ff51 	bl	8002cec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003e4a:	e00c      	b.n	8003e66 <UART_RxISR_8BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	0018      	movs	r0, r3
 8003e50:	f7fc ff00 	bl	8000c54 <HAL_UART_RxCpltCallback>
}
 8003e54:	e007      	b.n	8003e66 <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	699a      	ldr	r2, [r3, #24]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2108      	movs	r1, #8
 8003e62:	430a      	orrs	r2, r1
 8003e64:	619a      	str	r2, [r3, #24]
}
 8003e66:	46c0      	nop			; (mov r8, r8)
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	b010      	add	sp, #64	; 0x40
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	46c0      	nop			; (mov r8, r8)
 8003e70:	fffffedf 	.word	0xfffffedf

08003e74 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b090      	sub	sp, #64	; 0x40
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003e7c:	203e      	movs	r0, #62	; 0x3e
 8003e7e:	183b      	adds	r3, r7, r0
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	2160      	movs	r1, #96	; 0x60
 8003e84:	5a52      	ldrh	r2, [r2, r1]
 8003e86:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	228c      	movs	r2, #140	; 0x8c
 8003e8c:	589b      	ldr	r3, [r3, r2]
 8003e8e:	2b22      	cmp	r3, #34	; 0x22
 8003e90:	d000      	beq.n	8003e94 <UART_RxISR_16BIT+0x20>
 8003e92:	e09a      	b.n	8003fca <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e9a:	213c      	movs	r1, #60	; 0x3c
 8003e9c:	187b      	adds	r3, r7, r1
 8003e9e:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ea4:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8003ea6:	187b      	adds	r3, r7, r1
 8003ea8:	183a      	adds	r2, r7, r0
 8003eaa:	881b      	ldrh	r3, [r3, #0]
 8003eac:	8812      	ldrh	r2, [r2, #0]
 8003eae:	4013      	ands	r3, r2
 8003eb0:	b29a      	uxth	r2, r3
 8003eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eb4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eba:	1c9a      	adds	r2, r3, #2
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	225e      	movs	r2, #94	; 0x5e
 8003ec4:	5a9b      	ldrh	r3, [r3, r2]
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	3b01      	subs	r3, #1
 8003eca:	b299      	uxth	r1, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	225e      	movs	r2, #94	; 0x5e
 8003ed0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	225e      	movs	r2, #94	; 0x5e
 8003ed6:	5a9b      	ldrh	r3, [r3, r2]
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d000      	beq.n	8003ee0 <UART_RxISR_16BIT+0x6c>
 8003ede:	e07c      	b.n	8003fda <UART_RxISR_16BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ee0:	f3ef 8310 	mrs	r3, PRIMASK
 8003ee4:	617b      	str	r3, [r7, #20]
  return(result);
 8003ee6:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003ee8:	637b      	str	r3, [r7, #52]	; 0x34
 8003eea:	2301      	movs	r3, #1
 8003eec:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	f383 8810 	msr	PRIMASK, r3
}
 8003ef4:	46c0      	nop			; (mov r8, r8)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4938      	ldr	r1, [pc, #224]	; (8003fe4 <UART_RxISR_16BIT+0x170>)
 8003f02:	400a      	ands	r2, r1
 8003f04:	601a      	str	r2, [r3, #0]
 8003f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f08:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	f383 8810 	msr	PRIMASK, r3
}
 8003f10:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f12:	f3ef 8310 	mrs	r3, PRIMASK
 8003f16:	623b      	str	r3, [r7, #32]
  return(result);
 8003f18:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f1a:	633b      	str	r3, [r7, #48]	; 0x30
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f22:	f383 8810 	msr	PRIMASK, r3
}
 8003f26:	46c0      	nop			; (mov r8, r8)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	689a      	ldr	r2, [r3, #8]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2101      	movs	r1, #1
 8003f34:	438a      	bics	r2, r1
 8003f36:	609a      	str	r2, [r3, #8]
 8003f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f3a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f3e:	f383 8810 	msr	PRIMASK, r3
}
 8003f42:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	228c      	movs	r2, #140	; 0x8c
 8003f48:	2120      	movs	r1, #32
 8003f4a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d12f      	bne.n	8003fc0 <UART_RxISR_16BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f66:	f3ef 8310 	mrs	r3, PRIMASK
 8003f6a:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f6c:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f70:	2301      	movs	r3, #1
 8003f72:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f383 8810 	msr	PRIMASK, r3
}
 8003f7a:	46c0      	nop			; (mov r8, r8)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	2110      	movs	r1, #16
 8003f88:	438a      	bics	r2, r1
 8003f8a:	601a      	str	r2, [r3, #0]
 8003f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f8e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	f383 8810 	msr	PRIMASK, r3
}
 8003f96:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	69db      	ldr	r3, [r3, #28]
 8003f9e:	2210      	movs	r2, #16
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	2b10      	cmp	r3, #16
 8003fa4:	d103      	bne.n	8003fae <UART_RxISR_16BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2210      	movs	r2, #16
 8003fac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	225c      	movs	r2, #92	; 0x5c
 8003fb2:	5a9a      	ldrh	r2, [r3, r2]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	0011      	movs	r1, r2
 8003fb8:	0018      	movs	r0, r3
 8003fba:	f7fe fe97 	bl	8002cec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003fbe:	e00c      	b.n	8003fda <UART_RxISR_16BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	0018      	movs	r0, r3
 8003fc4:	f7fc fe46 	bl	8000c54 <HAL_UART_RxCpltCallback>
}
 8003fc8:	e007      	b.n	8003fda <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	699a      	ldr	r2, [r3, #24]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2108      	movs	r1, #8
 8003fd6:	430a      	orrs	r2, r1
 8003fd8:	619a      	str	r2, [r3, #24]
}
 8003fda:	46c0      	nop			; (mov r8, r8)
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	b010      	add	sp, #64	; 0x40
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	46c0      	nop			; (mov r8, r8)
 8003fe4:	fffffedf 	.word	0xfffffedf

08003fe8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b09c      	sub	sp, #112	; 0x70
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8003ff0:	236a      	movs	r3, #106	; 0x6a
 8003ff2:	18fb      	adds	r3, r7, r3
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	2160      	movs	r1, #96	; 0x60
 8003ff8:	5a52      	ldrh	r2, [r2, r1]
 8003ffa:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	69db      	ldr	r3, [r3, #28]
 8004002:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	228c      	movs	r2, #140	; 0x8c
 8004018:	589b      	ldr	r3, [r3, r2]
 800401a:	2b22      	cmp	r3, #34	; 0x22
 800401c:	d000      	beq.n	8004020 <UART_RxISR_8BIT_FIFOEN+0x38>
 800401e:	e144      	b.n	80042aa <UART_RxISR_8BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004020:	235e      	movs	r3, #94	; 0x5e
 8004022:	18fb      	adds	r3, r7, r3
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	2168      	movs	r1, #104	; 0x68
 8004028:	5a52      	ldrh	r2, [r2, r1]
 800402a:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800402c:	e0eb      	b.n	8004206 <UART_RxISR_8BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004034:	215c      	movs	r1, #92	; 0x5c
 8004036:	187b      	adds	r3, r7, r1
 8004038:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800403a:	187b      	adds	r3, r7, r1
 800403c:	881b      	ldrh	r3, [r3, #0]
 800403e:	b2da      	uxtb	r2, r3
 8004040:	236a      	movs	r3, #106	; 0x6a
 8004042:	18fb      	adds	r3, r7, r3
 8004044:	881b      	ldrh	r3, [r3, #0]
 8004046:	b2d9      	uxtb	r1, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800404c:	400a      	ands	r2, r1
 800404e:	b2d2      	uxtb	r2, r2
 8004050:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004056:	1c5a      	adds	r2, r3, #1
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	225e      	movs	r2, #94	; 0x5e
 8004060:	5a9b      	ldrh	r3, [r3, r2]
 8004062:	b29b      	uxth	r3, r3
 8004064:	3b01      	subs	r3, #1
 8004066:	b299      	uxth	r1, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	225e      	movs	r2, #94	; 0x5e
 800406c:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	69db      	ldr	r3, [r3, #28]
 8004074:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004076:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004078:	2207      	movs	r2, #7
 800407a:	4013      	ands	r3, r2
 800407c:	d049      	beq.n	8004112 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800407e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004080:	2201      	movs	r2, #1
 8004082:	4013      	ands	r3, r2
 8004084:	d010      	beq.n	80040a8 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8004086:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004088:	2380      	movs	r3, #128	; 0x80
 800408a:	005b      	lsls	r3, r3, #1
 800408c:	4013      	ands	r3, r2
 800408e:	d00b      	beq.n	80040a8 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	2201      	movs	r2, #1
 8004096:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2290      	movs	r2, #144	; 0x90
 800409c:	589b      	ldr	r3, [r3, r2]
 800409e:	2201      	movs	r2, #1
 80040a0:	431a      	orrs	r2, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2190      	movs	r1, #144	; 0x90
 80040a6:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80040a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040aa:	2202      	movs	r2, #2
 80040ac:	4013      	ands	r3, r2
 80040ae:	d00f      	beq.n	80040d0 <UART_RxISR_8BIT_FIFOEN+0xe8>
 80040b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040b2:	2201      	movs	r2, #1
 80040b4:	4013      	ands	r3, r2
 80040b6:	d00b      	beq.n	80040d0 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	2202      	movs	r2, #2
 80040be:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2290      	movs	r2, #144	; 0x90
 80040c4:	589b      	ldr	r3, [r3, r2]
 80040c6:	2204      	movs	r2, #4
 80040c8:	431a      	orrs	r2, r3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2190      	movs	r1, #144	; 0x90
 80040ce:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80040d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040d2:	2204      	movs	r2, #4
 80040d4:	4013      	ands	r3, r2
 80040d6:	d00f      	beq.n	80040f8 <UART_RxISR_8BIT_FIFOEN+0x110>
 80040d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040da:	2201      	movs	r2, #1
 80040dc:	4013      	ands	r3, r2
 80040de:	d00b      	beq.n	80040f8 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2204      	movs	r2, #4
 80040e6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2290      	movs	r2, #144	; 0x90
 80040ec:	589b      	ldr	r3, [r3, r2]
 80040ee:	2202      	movs	r2, #2
 80040f0:	431a      	orrs	r2, r3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2190      	movs	r1, #144	; 0x90
 80040f6:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2290      	movs	r2, #144	; 0x90
 80040fc:	589b      	ldr	r3, [r3, r2]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d007      	beq.n	8004112 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	0018      	movs	r0, r3
 8004106:	f7fe fde9 	bl	8002cdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2290      	movs	r2, #144	; 0x90
 800410e:	2100      	movs	r1, #0
 8004110:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	225e      	movs	r2, #94	; 0x5e
 8004116:	5a9b      	ldrh	r3, [r3, r2]
 8004118:	b29b      	uxth	r3, r3
 800411a:	2b00      	cmp	r3, #0
 800411c:	d173      	bne.n	8004206 <UART_RxISR_8BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800411e:	f3ef 8310 	mrs	r3, PRIMASK
 8004122:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8004124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004126:	65bb      	str	r3, [r7, #88]	; 0x58
 8004128:	2301      	movs	r3, #1
 800412a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800412c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800412e:	f383 8810 	msr	PRIMASK, r3
}
 8004132:	46c0      	nop			; (mov r8, r8)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4961      	ldr	r1, [pc, #388]	; (80042c4 <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 8004140:	400a      	ands	r2, r1
 8004142:	601a      	str	r2, [r3, #0]
 8004144:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004146:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800414a:	f383 8810 	msr	PRIMASK, r3
}
 800414e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004150:	f3ef 8310 	mrs	r3, PRIMASK
 8004154:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8004156:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004158:	657b      	str	r3, [r7, #84]	; 0x54
 800415a:	2301      	movs	r3, #1
 800415c:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800415e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004160:	f383 8810 	msr	PRIMASK, r3
}
 8004164:	46c0      	nop			; (mov r8, r8)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	689a      	ldr	r2, [r3, #8]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4955      	ldr	r1, [pc, #340]	; (80042c8 <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 8004172:	400a      	ands	r2, r1
 8004174:	609a      	str	r2, [r3, #8]
 8004176:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004178:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800417a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800417c:	f383 8810 	msr	PRIMASK, r3
}
 8004180:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	228c      	movs	r2, #140	; 0x8c
 8004186:	2120      	movs	r1, #32
 8004188:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800419a:	2b01      	cmp	r3, #1
 800419c:	d12f      	bne.n	80041fe <UART_RxISR_8BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041a4:	f3ef 8310 	mrs	r3, PRIMASK
 80041a8:	623b      	str	r3, [r7, #32]
  return(result);
 80041aa:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041ac:	653b      	str	r3, [r7, #80]	; 0x50
 80041ae:	2301      	movs	r3, #1
 80041b0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b4:	f383 8810 	msr	PRIMASK, r3
}
 80041b8:	46c0      	nop			; (mov r8, r8)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2110      	movs	r1, #16
 80041c6:	438a      	bics	r2, r1
 80041c8:	601a      	str	r2, [r3, #0]
 80041ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041cc:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d0:	f383 8810 	msr	PRIMASK, r3
}
 80041d4:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	69db      	ldr	r3, [r3, #28]
 80041dc:	2210      	movs	r2, #16
 80041de:	4013      	ands	r3, r2
 80041e0:	2b10      	cmp	r3, #16
 80041e2:	d103      	bne.n	80041ec <UART_RxISR_8BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2210      	movs	r2, #16
 80041ea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	225c      	movs	r2, #92	; 0x5c
 80041f0:	5a9a      	ldrh	r2, [r3, r2]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	0011      	movs	r1, r2
 80041f6:	0018      	movs	r0, r3
 80041f8:	f7fe fd78 	bl	8002cec <HAL_UARTEx_RxEventCallback>
 80041fc:	e003      	b.n	8004206 <UART_RxISR_8BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	0018      	movs	r0, r3
 8004202:	f7fc fd27 	bl	8000c54 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004206:	235e      	movs	r3, #94	; 0x5e
 8004208:	18fb      	adds	r3, r7, r3
 800420a:	881b      	ldrh	r3, [r3, #0]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d004      	beq.n	800421a <UART_RxISR_8BIT_FIFOEN+0x232>
 8004210:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004212:	2220      	movs	r2, #32
 8004214:	4013      	ands	r3, r2
 8004216:	d000      	beq.n	800421a <UART_RxISR_8BIT_FIFOEN+0x232>
 8004218:	e709      	b.n	800402e <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800421a:	204e      	movs	r0, #78	; 0x4e
 800421c:	183b      	adds	r3, r7, r0
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	215e      	movs	r1, #94	; 0x5e
 8004222:	5a52      	ldrh	r2, [r2, r1]
 8004224:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004226:	0001      	movs	r1, r0
 8004228:	187b      	adds	r3, r7, r1
 800422a:	881b      	ldrh	r3, [r3, #0]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d044      	beq.n	80042ba <UART_RxISR_8BIT_FIFOEN+0x2d2>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2268      	movs	r2, #104	; 0x68
 8004234:	5a9b      	ldrh	r3, [r3, r2]
 8004236:	187a      	adds	r2, r7, r1
 8004238:	8812      	ldrh	r2, [r2, #0]
 800423a:	429a      	cmp	r2, r3
 800423c:	d23d      	bcs.n	80042ba <UART_RxISR_8BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800423e:	f3ef 8310 	mrs	r3, PRIMASK
 8004242:	60bb      	str	r3, [r7, #8]
  return(result);
 8004244:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004246:	64bb      	str	r3, [r7, #72]	; 0x48
 8004248:	2301      	movs	r3, #1
 800424a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f383 8810 	msr	PRIMASK, r3
}
 8004252:	46c0      	nop			; (mov r8, r8)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	689a      	ldr	r2, [r3, #8]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	491b      	ldr	r1, [pc, #108]	; (80042cc <UART_RxISR_8BIT_FIFOEN+0x2e4>)
 8004260:	400a      	ands	r2, r1
 8004262:	609a      	str	r2, [r3, #8]
 8004264:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004266:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	f383 8810 	msr	PRIMASK, r3
}
 800426e:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4a17      	ldr	r2, [pc, #92]	; (80042d0 <UART_RxISR_8BIT_FIFOEN+0x2e8>)
 8004274:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004276:	f3ef 8310 	mrs	r3, PRIMASK
 800427a:	617b      	str	r3, [r7, #20]
  return(result);
 800427c:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800427e:	647b      	str	r3, [r7, #68]	; 0x44
 8004280:	2301      	movs	r3, #1
 8004282:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004284:	69bb      	ldr	r3, [r7, #24]
 8004286:	f383 8810 	msr	PRIMASK, r3
}
 800428a:	46c0      	nop			; (mov r8, r8)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	2120      	movs	r1, #32
 8004298:	430a      	orrs	r2, r1
 800429a:	601a      	str	r2, [r3, #0]
 800429c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800429e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	f383 8810 	msr	PRIMASK, r3
}
 80042a6:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80042a8:	e007      	b.n	80042ba <UART_RxISR_8BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	699a      	ldr	r2, [r3, #24]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2108      	movs	r1, #8
 80042b6:	430a      	orrs	r2, r1
 80042b8:	619a      	str	r2, [r3, #24]
}
 80042ba:	46c0      	nop			; (mov r8, r8)
 80042bc:	46bd      	mov	sp, r7
 80042be:	b01c      	add	sp, #112	; 0x70
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	46c0      	nop			; (mov r8, r8)
 80042c4:	fffffeff 	.word	0xfffffeff
 80042c8:	effffffe 	.word	0xeffffffe
 80042cc:	efffffff 	.word	0xefffffff
 80042d0:	08003d01 	.word	0x08003d01

080042d4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b09e      	sub	sp, #120	; 0x78
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80042dc:	2372      	movs	r3, #114	; 0x72
 80042de:	18fb      	adds	r3, r7, r3
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	2160      	movs	r1, #96	; 0x60
 80042e4:	5a52      	ldrh	r2, [r2, r1]
 80042e6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	69db      	ldr	r3, [r3, #28]
 80042ee:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	228c      	movs	r2, #140	; 0x8c
 8004304:	589b      	ldr	r3, [r3, r2]
 8004306:	2b22      	cmp	r3, #34	; 0x22
 8004308:	d000      	beq.n	800430c <UART_RxISR_16BIT_FIFOEN+0x38>
 800430a:	e144      	b.n	8004596 <UART_RxISR_16BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800430c:	2366      	movs	r3, #102	; 0x66
 800430e:	18fb      	adds	r3, r7, r3
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	2168      	movs	r1, #104	; 0x68
 8004314:	5a52      	ldrh	r2, [r2, r1]
 8004316:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004318:	e0eb      	b.n	80044f2 <UART_RxISR_16BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004320:	2164      	movs	r1, #100	; 0x64
 8004322:	187b      	adds	r3, r7, r1
 8004324:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800432a:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 800432c:	187b      	adds	r3, r7, r1
 800432e:	2272      	movs	r2, #114	; 0x72
 8004330:	18ba      	adds	r2, r7, r2
 8004332:	881b      	ldrh	r3, [r3, #0]
 8004334:	8812      	ldrh	r2, [r2, #0]
 8004336:	4013      	ands	r3, r2
 8004338:	b29a      	uxth	r2, r3
 800433a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800433c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004342:	1c9a      	adds	r2, r3, #2
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	225e      	movs	r2, #94	; 0x5e
 800434c:	5a9b      	ldrh	r3, [r3, r2]
 800434e:	b29b      	uxth	r3, r3
 8004350:	3b01      	subs	r3, #1
 8004352:	b299      	uxth	r1, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	225e      	movs	r2, #94	; 0x5e
 8004358:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	69db      	ldr	r3, [r3, #28]
 8004360:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004362:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004364:	2207      	movs	r2, #7
 8004366:	4013      	ands	r3, r2
 8004368:	d049      	beq.n	80043fe <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800436a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800436c:	2201      	movs	r2, #1
 800436e:	4013      	ands	r3, r2
 8004370:	d010      	beq.n	8004394 <UART_RxISR_16BIT_FIFOEN+0xc0>
 8004372:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004374:	2380      	movs	r3, #128	; 0x80
 8004376:	005b      	lsls	r3, r3, #1
 8004378:	4013      	ands	r3, r2
 800437a:	d00b      	beq.n	8004394 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2201      	movs	r2, #1
 8004382:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2290      	movs	r2, #144	; 0x90
 8004388:	589b      	ldr	r3, [r3, r2]
 800438a:	2201      	movs	r2, #1
 800438c:	431a      	orrs	r2, r3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2190      	movs	r1, #144	; 0x90
 8004392:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004394:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004396:	2202      	movs	r2, #2
 8004398:	4013      	ands	r3, r2
 800439a:	d00f      	beq.n	80043bc <UART_RxISR_16BIT_FIFOEN+0xe8>
 800439c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800439e:	2201      	movs	r2, #1
 80043a0:	4013      	ands	r3, r2
 80043a2:	d00b      	beq.n	80043bc <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2202      	movs	r2, #2
 80043aa:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2290      	movs	r2, #144	; 0x90
 80043b0:	589b      	ldr	r3, [r3, r2]
 80043b2:	2204      	movs	r2, #4
 80043b4:	431a      	orrs	r2, r3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2190      	movs	r1, #144	; 0x90
 80043ba:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80043bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043be:	2204      	movs	r2, #4
 80043c0:	4013      	ands	r3, r2
 80043c2:	d00f      	beq.n	80043e4 <UART_RxISR_16BIT_FIFOEN+0x110>
 80043c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80043c6:	2201      	movs	r2, #1
 80043c8:	4013      	ands	r3, r2
 80043ca:	d00b      	beq.n	80043e4 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2204      	movs	r2, #4
 80043d2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2290      	movs	r2, #144	; 0x90
 80043d8:	589b      	ldr	r3, [r3, r2]
 80043da:	2202      	movs	r2, #2
 80043dc:	431a      	orrs	r2, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2190      	movs	r1, #144	; 0x90
 80043e2:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2290      	movs	r2, #144	; 0x90
 80043e8:	589b      	ldr	r3, [r3, r2]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d007      	beq.n	80043fe <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	0018      	movs	r0, r3
 80043f2:	f7fe fc73 	bl	8002cdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2290      	movs	r2, #144	; 0x90
 80043fa:	2100      	movs	r1, #0
 80043fc:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	225e      	movs	r2, #94	; 0x5e
 8004402:	5a9b      	ldrh	r3, [r3, r2]
 8004404:	b29b      	uxth	r3, r3
 8004406:	2b00      	cmp	r3, #0
 8004408:	d173      	bne.n	80044f2 <UART_RxISR_16BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800440a:	f3ef 8310 	mrs	r3, PRIMASK
 800440e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004412:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004414:	2301      	movs	r3, #1
 8004416:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800441a:	f383 8810 	msr	PRIMASK, r3
}
 800441e:	46c0      	nop			; (mov r8, r8)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4961      	ldr	r1, [pc, #388]	; (80045b0 <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 800442c:	400a      	ands	r2, r1
 800442e:	601a      	str	r2, [r3, #0]
 8004430:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004432:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004436:	f383 8810 	msr	PRIMASK, r3
}
 800443a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800443c:	f3ef 8310 	mrs	r3, PRIMASK
 8004440:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8004442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004444:	65bb      	str	r3, [r7, #88]	; 0x58
 8004446:	2301      	movs	r3, #1
 8004448:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800444a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800444c:	f383 8810 	msr	PRIMASK, r3
}
 8004450:	46c0      	nop			; (mov r8, r8)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	689a      	ldr	r2, [r3, #8]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4955      	ldr	r1, [pc, #340]	; (80045b4 <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 800445e:	400a      	ands	r2, r1
 8004460:	609a      	str	r2, [r3, #8]
 8004462:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004464:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004466:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004468:	f383 8810 	msr	PRIMASK, r3
}
 800446c:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	228c      	movs	r2, #140	; 0x8c
 8004472:	2120      	movs	r1, #32
 8004474:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004486:	2b01      	cmp	r3, #1
 8004488:	d12f      	bne.n	80044ea <UART_RxISR_16BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004490:	f3ef 8310 	mrs	r3, PRIMASK
 8004494:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004496:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004498:	657b      	str	r3, [r7, #84]	; 0x54
 800449a:	2301      	movs	r3, #1
 800449c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800449e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a0:	f383 8810 	msr	PRIMASK, r3
}
 80044a4:	46c0      	nop			; (mov r8, r8)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2110      	movs	r1, #16
 80044b2:	438a      	bics	r2, r1
 80044b4:	601a      	str	r2, [r3, #0]
 80044b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044bc:	f383 8810 	msr	PRIMASK, r3
}
 80044c0:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	69db      	ldr	r3, [r3, #28]
 80044c8:	2210      	movs	r2, #16
 80044ca:	4013      	ands	r3, r2
 80044cc:	2b10      	cmp	r3, #16
 80044ce:	d103      	bne.n	80044d8 <UART_RxISR_16BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2210      	movs	r2, #16
 80044d6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	225c      	movs	r2, #92	; 0x5c
 80044dc:	5a9a      	ldrh	r2, [r3, r2]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	0011      	movs	r1, r2
 80044e2:	0018      	movs	r0, r3
 80044e4:	f7fe fc02 	bl	8002cec <HAL_UARTEx_RxEventCallback>
 80044e8:	e003      	b.n	80044f2 <UART_RxISR_16BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	0018      	movs	r0, r3
 80044ee:	f7fc fbb1 	bl	8000c54 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80044f2:	2366      	movs	r3, #102	; 0x66
 80044f4:	18fb      	adds	r3, r7, r3
 80044f6:	881b      	ldrh	r3, [r3, #0]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d004      	beq.n	8004506 <UART_RxISR_16BIT_FIFOEN+0x232>
 80044fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044fe:	2220      	movs	r2, #32
 8004500:	4013      	ands	r3, r2
 8004502:	d000      	beq.n	8004506 <UART_RxISR_16BIT_FIFOEN+0x232>
 8004504:	e709      	b.n	800431a <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004506:	2052      	movs	r0, #82	; 0x52
 8004508:	183b      	adds	r3, r7, r0
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	215e      	movs	r1, #94	; 0x5e
 800450e:	5a52      	ldrh	r2, [r2, r1]
 8004510:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004512:	0001      	movs	r1, r0
 8004514:	187b      	adds	r3, r7, r1
 8004516:	881b      	ldrh	r3, [r3, #0]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d044      	beq.n	80045a6 <UART_RxISR_16BIT_FIFOEN+0x2d2>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2268      	movs	r2, #104	; 0x68
 8004520:	5a9b      	ldrh	r3, [r3, r2]
 8004522:	187a      	adds	r2, r7, r1
 8004524:	8812      	ldrh	r2, [r2, #0]
 8004526:	429a      	cmp	r2, r3
 8004528:	d23d      	bcs.n	80045a6 <UART_RxISR_16BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800452a:	f3ef 8310 	mrs	r3, PRIMASK
 800452e:	60fb      	str	r3, [r7, #12]
  return(result);
 8004530:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004532:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004534:	2301      	movs	r3, #1
 8004536:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	f383 8810 	msr	PRIMASK, r3
}
 800453e:	46c0      	nop			; (mov r8, r8)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	689a      	ldr	r2, [r3, #8]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	491b      	ldr	r1, [pc, #108]	; (80045b8 <UART_RxISR_16BIT_FIFOEN+0x2e4>)
 800454c:	400a      	ands	r2, r1
 800454e:	609a      	str	r2, [r3, #8]
 8004550:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004552:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	f383 8810 	msr	PRIMASK, r3
}
 800455a:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	4a17      	ldr	r2, [pc, #92]	; (80045bc <UART_RxISR_16BIT_FIFOEN+0x2e8>)
 8004560:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004562:	f3ef 8310 	mrs	r3, PRIMASK
 8004566:	61bb      	str	r3, [r7, #24]
  return(result);
 8004568:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800456a:	64bb      	str	r3, [r7, #72]	; 0x48
 800456c:	2301      	movs	r3, #1
 800456e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	f383 8810 	msr	PRIMASK, r3
}
 8004576:	46c0      	nop			; (mov r8, r8)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2120      	movs	r1, #32
 8004584:	430a      	orrs	r2, r1
 8004586:	601a      	str	r2, [r3, #0]
 8004588:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800458a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800458c:	6a3b      	ldr	r3, [r7, #32]
 800458e:	f383 8810 	msr	PRIMASK, r3
}
 8004592:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004594:	e007      	b.n	80045a6 <UART_RxISR_16BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	699a      	ldr	r2, [r3, #24]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2108      	movs	r1, #8
 80045a2:	430a      	orrs	r2, r1
 80045a4:	619a      	str	r2, [r3, #24]
}
 80045a6:	46c0      	nop			; (mov r8, r8)
 80045a8:	46bd      	mov	sp, r7
 80045aa:	b01e      	add	sp, #120	; 0x78
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	46c0      	nop			; (mov r8, r8)
 80045b0:	fffffeff 	.word	0xfffffeff
 80045b4:	effffffe 	.word	0xeffffffe
 80045b8:	efffffff 	.word	0xefffffff
 80045bc:	08003e75 	.word	0x08003e75

080045c0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b082      	sub	sp, #8
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80045c8:	46c0      	nop			; (mov r8, r8)
 80045ca:	46bd      	mov	sp, r7
 80045cc:	b002      	add	sp, #8
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b082      	sub	sp, #8
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80045d8:	46c0      	nop			; (mov r8, r8)
 80045da:	46bd      	mov	sp, r7
 80045dc:	b002      	add	sp, #8
 80045de:	bd80      	pop	{r7, pc}

080045e0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b082      	sub	sp, #8
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80045e8:	46c0      	nop			; (mov r8, r8)
 80045ea:	46bd      	mov	sp, r7
 80045ec:	b002      	add	sp, #8
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2284      	movs	r2, #132	; 0x84
 80045fc:	5c9b      	ldrb	r3, [r3, r2]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d101      	bne.n	8004606 <HAL_UARTEx_DisableFifoMode+0x16>
 8004602:	2302      	movs	r3, #2
 8004604:	e027      	b.n	8004656 <HAL_UARTEx_DisableFifoMode+0x66>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2284      	movs	r2, #132	; 0x84
 800460a:	2101      	movs	r1, #1
 800460c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2288      	movs	r2, #136	; 0x88
 8004612:	2124      	movs	r1, #36	; 0x24
 8004614:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2101      	movs	r1, #1
 800462a:	438a      	bics	r2, r1
 800462c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	4a0b      	ldr	r2, [pc, #44]	; (8004660 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004632:	4013      	ands	r3, r2
 8004634:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	68fa      	ldr	r2, [r7, #12]
 8004642:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2288      	movs	r2, #136	; 0x88
 8004648:	2120      	movs	r1, #32
 800464a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2284      	movs	r2, #132	; 0x84
 8004650:	2100      	movs	r1, #0
 8004652:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004654:	2300      	movs	r3, #0
}
 8004656:	0018      	movs	r0, r3
 8004658:	46bd      	mov	sp, r7
 800465a:	b004      	add	sp, #16
 800465c:	bd80      	pop	{r7, pc}
 800465e:	46c0      	nop			; (mov r8, r8)
 8004660:	dfffffff 	.word	0xdfffffff

08004664 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b084      	sub	sp, #16
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2284      	movs	r2, #132	; 0x84
 8004672:	5c9b      	ldrb	r3, [r3, r2]
 8004674:	2b01      	cmp	r3, #1
 8004676:	d101      	bne.n	800467c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004678:	2302      	movs	r3, #2
 800467a:	e02e      	b.n	80046da <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2284      	movs	r2, #132	; 0x84
 8004680:	2101      	movs	r1, #1
 8004682:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2288      	movs	r2, #136	; 0x88
 8004688:	2124      	movs	r1, #36	; 0x24
 800468a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	2101      	movs	r1, #1
 80046a0:	438a      	bics	r2, r1
 80046a2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	00db      	lsls	r3, r3, #3
 80046ac:	08d9      	lsrs	r1, r3, #3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	683a      	ldr	r2, [r7, #0]
 80046b4:	430a      	orrs	r2, r1
 80046b6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	0018      	movs	r0, r3
 80046bc:	f000 f854 	bl	8004768 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	68fa      	ldr	r2, [r7, #12]
 80046c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2288      	movs	r2, #136	; 0x88
 80046cc:	2120      	movs	r1, #32
 80046ce:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2284      	movs	r2, #132	; 0x84
 80046d4:	2100      	movs	r1, #0
 80046d6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80046d8:	2300      	movs	r3, #0
}
 80046da:	0018      	movs	r0, r3
 80046dc:	46bd      	mov	sp, r7
 80046de:	b004      	add	sp, #16
 80046e0:	bd80      	pop	{r7, pc}
	...

080046e4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2284      	movs	r2, #132	; 0x84
 80046f2:	5c9b      	ldrb	r3, [r3, r2]
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d101      	bne.n	80046fc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80046f8:	2302      	movs	r3, #2
 80046fa:	e02f      	b.n	800475c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2284      	movs	r2, #132	; 0x84
 8004700:	2101      	movs	r1, #1
 8004702:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2288      	movs	r2, #136	; 0x88
 8004708:	2124      	movs	r1, #36	; 0x24
 800470a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	2101      	movs	r1, #1
 8004720:	438a      	bics	r2, r1
 8004722:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	4a0e      	ldr	r2, [pc, #56]	; (8004764 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800472c:	4013      	ands	r3, r2
 800472e:	0019      	movs	r1, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	683a      	ldr	r2, [r7, #0]
 8004736:	430a      	orrs	r2, r1
 8004738:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	0018      	movs	r0, r3
 800473e:	f000 f813 	bl	8004768 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	68fa      	ldr	r2, [r7, #12]
 8004748:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2288      	movs	r2, #136	; 0x88
 800474e:	2120      	movs	r1, #32
 8004750:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2284      	movs	r2, #132	; 0x84
 8004756:	2100      	movs	r1, #0
 8004758:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800475a:	2300      	movs	r3, #0
}
 800475c:	0018      	movs	r0, r3
 800475e:	46bd      	mov	sp, r7
 8004760:	b004      	add	sp, #16
 8004762:	bd80      	pop	{r7, pc}
 8004764:	f1ffffff 	.word	0xf1ffffff

08004768 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004768:	b5f0      	push	{r4, r5, r6, r7, lr}
 800476a:	b085      	sub	sp, #20
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004774:	2b00      	cmp	r3, #0
 8004776:	d108      	bne.n	800478a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	226a      	movs	r2, #106	; 0x6a
 800477c:	2101      	movs	r1, #1
 800477e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2268      	movs	r2, #104	; 0x68
 8004784:	2101      	movs	r1, #1
 8004786:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004788:	e043      	b.n	8004812 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800478a:	260f      	movs	r6, #15
 800478c:	19bb      	adds	r3, r7, r6
 800478e:	2208      	movs	r2, #8
 8004790:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004792:	200e      	movs	r0, #14
 8004794:	183b      	adds	r3, r7, r0
 8004796:	2208      	movs	r2, #8
 8004798:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	0e5b      	lsrs	r3, r3, #25
 80047a2:	b2da      	uxtb	r2, r3
 80047a4:	240d      	movs	r4, #13
 80047a6:	193b      	adds	r3, r7, r4
 80047a8:	2107      	movs	r1, #7
 80047aa:	400a      	ands	r2, r1
 80047ac:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	0f5b      	lsrs	r3, r3, #29
 80047b6:	b2da      	uxtb	r2, r3
 80047b8:	250c      	movs	r5, #12
 80047ba:	197b      	adds	r3, r7, r5
 80047bc:	2107      	movs	r1, #7
 80047be:	400a      	ands	r2, r1
 80047c0:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80047c2:	183b      	adds	r3, r7, r0
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	197a      	adds	r2, r7, r5
 80047c8:	7812      	ldrb	r2, [r2, #0]
 80047ca:	4914      	ldr	r1, [pc, #80]	; (800481c <UARTEx_SetNbDataToProcess+0xb4>)
 80047cc:	5c8a      	ldrb	r2, [r1, r2]
 80047ce:	435a      	muls	r2, r3
 80047d0:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80047d2:	197b      	adds	r3, r7, r5
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	4a12      	ldr	r2, [pc, #72]	; (8004820 <UARTEx_SetNbDataToProcess+0xb8>)
 80047d8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80047da:	0019      	movs	r1, r3
 80047dc:	f7fb fd1c 	bl	8000218 <__divsi3>
 80047e0:	0003      	movs	r3, r0
 80047e2:	b299      	uxth	r1, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	226a      	movs	r2, #106	; 0x6a
 80047e8:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80047ea:	19bb      	adds	r3, r7, r6
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	193a      	adds	r2, r7, r4
 80047f0:	7812      	ldrb	r2, [r2, #0]
 80047f2:	490a      	ldr	r1, [pc, #40]	; (800481c <UARTEx_SetNbDataToProcess+0xb4>)
 80047f4:	5c8a      	ldrb	r2, [r1, r2]
 80047f6:	435a      	muls	r2, r3
 80047f8:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80047fa:	193b      	adds	r3, r7, r4
 80047fc:	781b      	ldrb	r3, [r3, #0]
 80047fe:	4a08      	ldr	r2, [pc, #32]	; (8004820 <UARTEx_SetNbDataToProcess+0xb8>)
 8004800:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004802:	0019      	movs	r1, r3
 8004804:	f7fb fd08 	bl	8000218 <__divsi3>
 8004808:	0003      	movs	r3, r0
 800480a:	b299      	uxth	r1, r3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2268      	movs	r2, #104	; 0x68
 8004810:	5299      	strh	r1, [r3, r2]
}
 8004812:	46c0      	nop			; (mov r8, r8)
 8004814:	46bd      	mov	sp, r7
 8004816:	b005      	add	sp, #20
 8004818:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800481a:	46c0      	nop			; (mov r8, r8)
 800481c:	080049e4 	.word	0x080049e4
 8004820:	080049ec 	.word	0x080049ec

08004824 <memset>:
 8004824:	0003      	movs	r3, r0
 8004826:	1882      	adds	r2, r0, r2
 8004828:	4293      	cmp	r3, r2
 800482a:	d100      	bne.n	800482e <memset+0xa>
 800482c:	4770      	bx	lr
 800482e:	7019      	strb	r1, [r3, #0]
 8004830:	3301      	adds	r3, #1
 8004832:	e7f9      	b.n	8004828 <memset+0x4>

08004834 <strncasecmp>:
 8004834:	2303      	movs	r3, #3
 8004836:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004838:	469c      	mov	ip, r3
 800483a:	0006      	movs	r6, r0
 800483c:	2400      	movs	r4, #0
 800483e:	4f0e      	ldr	r7, [pc, #56]	; (8004878 <strncasecmp+0x44>)
 8004840:	9201      	str	r2, [sp, #4]
 8004842:	9b01      	ldr	r3, [sp, #4]
 8004844:	429c      	cmp	r4, r3
 8004846:	d101      	bne.n	800484c <strncasecmp+0x18>
 8004848:	2000      	movs	r0, #0
 800484a:	e013      	b.n	8004874 <strncasecmp+0x40>
 800484c:	4660      	mov	r0, ip
 800484e:	5d35      	ldrb	r5, [r6, r4]
 8004850:	5d7b      	ldrb	r3, [r7, r5]
 8004852:	4003      	ands	r3, r0
 8004854:	2b01      	cmp	r3, #1
 8004856:	d100      	bne.n	800485a <strncasecmp+0x26>
 8004858:	3520      	adds	r5, #32
 800485a:	4662      	mov	r2, ip
 800485c:	5d0b      	ldrb	r3, [r1, r4]
 800485e:	5cf8      	ldrb	r0, [r7, r3]
 8004860:	4010      	ands	r0, r2
 8004862:	2801      	cmp	r0, #1
 8004864:	d100      	bne.n	8004868 <strncasecmp+0x34>
 8004866:	3320      	adds	r3, #32
 8004868:	1ae8      	subs	r0, r5, r3
 800486a:	429d      	cmp	r5, r3
 800486c:	d102      	bne.n	8004874 <strncasecmp+0x40>
 800486e:	3401      	adds	r4, #1
 8004870:	2b00      	cmp	r3, #0
 8004872:	d1e6      	bne.n	8004842 <strncasecmp+0xe>
 8004874:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004876:	46c0      	nop			; (mov r8, r8)
 8004878:	080049f5 	.word	0x080049f5

0800487c <__libc_init_array>:
 800487c:	b570      	push	{r4, r5, r6, lr}
 800487e:	2600      	movs	r6, #0
 8004880:	4c0c      	ldr	r4, [pc, #48]	; (80048b4 <__libc_init_array+0x38>)
 8004882:	4d0d      	ldr	r5, [pc, #52]	; (80048b8 <__libc_init_array+0x3c>)
 8004884:	1b64      	subs	r4, r4, r5
 8004886:	10a4      	asrs	r4, r4, #2
 8004888:	42a6      	cmp	r6, r4
 800488a:	d109      	bne.n	80048a0 <__libc_init_array+0x24>
 800488c:	2600      	movs	r6, #0
 800488e:	f000 f819 	bl	80048c4 <_init>
 8004892:	4c0a      	ldr	r4, [pc, #40]	; (80048bc <__libc_init_array+0x40>)
 8004894:	4d0a      	ldr	r5, [pc, #40]	; (80048c0 <__libc_init_array+0x44>)
 8004896:	1b64      	subs	r4, r4, r5
 8004898:	10a4      	asrs	r4, r4, #2
 800489a:	42a6      	cmp	r6, r4
 800489c:	d105      	bne.n	80048aa <__libc_init_array+0x2e>
 800489e:	bd70      	pop	{r4, r5, r6, pc}
 80048a0:	00b3      	lsls	r3, r6, #2
 80048a2:	58eb      	ldr	r3, [r5, r3]
 80048a4:	4798      	blx	r3
 80048a6:	3601      	adds	r6, #1
 80048a8:	e7ee      	b.n	8004888 <__libc_init_array+0xc>
 80048aa:	00b3      	lsls	r3, r6, #2
 80048ac:	58eb      	ldr	r3, [r5, r3]
 80048ae:	4798      	blx	r3
 80048b0:	3601      	adds	r6, #1
 80048b2:	e7f2      	b.n	800489a <__libc_init_array+0x1e>
 80048b4:	08004b00 	.word	0x08004b00
 80048b8:	08004b00 	.word	0x08004b00
 80048bc:	08004b04 	.word	0x08004b04
 80048c0:	08004b00 	.word	0x08004b00

080048c4 <_init>:
 80048c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048c6:	46c0      	nop			; (mov r8, r8)
 80048c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048ca:	bc08      	pop	{r3}
 80048cc:	469e      	mov	lr, r3
 80048ce:	4770      	bx	lr

080048d0 <_fini>:
 80048d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048d2:	46c0      	nop			; (mov r8, r8)
 80048d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048d6:	bc08      	pop	{r3}
 80048d8:	469e      	mov	lr, r3
 80048da:	4770      	bx	lr
